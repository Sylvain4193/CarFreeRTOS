
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da48  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800dc38  0800dc38  0000ec38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8c0  0800e8c0  00010234  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8c0  0800e8c0  0000f8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8c8  0800e8c8  00010234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8c8  0800e8c8  0000f8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8cc  0800e8cc  0000f8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800e8d0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b5c  20000234  0800eb04  00010234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d90  0800eb04  00010d90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001889b  00000000  00000000  0001025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b79  00000000  00000000  00028af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  0002e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135d  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002422b  00000000  00000000  000313bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b0cb  00000000  00000000  000555e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aef8e  00000000  00000000  000806b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e0  00000000  00000000  0012f684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00136d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000234 	.word	0x20000234
 800020c:	00000000 	.word	0x00000000
 8000210:	0800dc20 	.word	0x0800dc20

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000238 	.word	0x20000238
 800022c:	0800dc20 	.word	0x0800dc20

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_frsub>:
 8000c08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c0c:	e002      	b.n	8000c14 <__addsf3>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_fsub>:
 8000c10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c14 <__addsf3>:
 8000c14:	0042      	lsls	r2, r0, #1
 8000c16:	bf1f      	itttt	ne
 8000c18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c1c:	ea92 0f03 	teqne	r2, r3
 8000c20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c28:	d06a      	beq.n	8000d00 <__addsf3+0xec>
 8000c2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c32:	bfc1      	itttt	gt
 8000c34:	18d2      	addgt	r2, r2, r3
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	4048      	eorgt	r0, r1
 8000c3a:	4041      	eorgt	r1, r0
 8000c3c:	bfb8      	it	lt
 8000c3e:	425b      	neglt	r3, r3
 8000c40:	2b19      	cmp	r3, #25
 8000c42:	bf88      	it	hi
 8000c44:	4770      	bxhi	lr
 8000c46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c62:	bf18      	it	ne
 8000c64:	4249      	negne	r1, r1
 8000c66:	ea92 0f03 	teq	r2, r3
 8000c6a:	d03f      	beq.n	8000cec <__addsf3+0xd8>
 8000c6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c70:	fa41 fc03 	asr.w	ip, r1, r3
 8000c74:	eb10 000c 	adds.w	r0, r0, ip
 8000c78:	f1c3 0320 	rsb	r3, r3, #32
 8000c7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__addsf3+0x78>
 8000c86:	4249      	negs	r1, r1
 8000c88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c90:	d313      	bcc.n	8000cba <__addsf3+0xa6>
 8000c92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c96:	d306      	bcc.n	8000ca6 <__addsf3+0x92>
 8000c98:	0840      	lsrs	r0, r0, #1
 8000c9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9e:	f102 0201 	add.w	r2, r2, #1
 8000ca2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ca4:	d251      	bcs.n	8000d4a <__addsf3+0x136>
 8000ca6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	ea40 0003 	orr.w	r0, r0, r3
 8000cb8:	4770      	bx	lr
 8000cba:	0049      	lsls	r1, r1, #1
 8000cbc:	eb40 0000 	adc.w	r0, r0, r0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cc8:	d2ed      	bcs.n	8000ca6 <__addsf3+0x92>
 8000cca:	fab0 fc80 	clz	ip, r0
 8000cce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cda:	bfaa      	itet	ge
 8000cdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ce0:	4252      	neglt	r2, r2
 8000ce2:	4318      	orrge	r0, r3
 8000ce4:	bfbc      	itt	lt
 8000ce6:	40d0      	lsrlt	r0, r2
 8000ce8:	4318      	orrlt	r0, r3
 8000cea:	4770      	bx	lr
 8000cec:	f092 0f00 	teq	r2, #0
 8000cf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cf4:	bf06      	itte	eq
 8000cf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cfa:	3201      	addeq	r2, #1
 8000cfc:	3b01      	subne	r3, #1
 8000cfe:	e7b5      	b.n	8000c6c <__addsf3+0x58>
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d021      	beq.n	8000d54 <__addsf3+0x140>
 8000d10:	ea92 0f03 	teq	r2, r3
 8000d14:	d004      	beq.n	8000d20 <__addsf3+0x10c>
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	bf08      	it	eq
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	4770      	bx	lr
 8000d20:	ea90 0f01 	teq	r0, r1
 8000d24:	bf1c      	itt	ne
 8000d26:	2000      	movne	r0, #0
 8000d28:	4770      	bxne	lr
 8000d2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d2e:	d104      	bne.n	8000d3a <__addsf3+0x126>
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	bf28      	it	cs
 8000d34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d38:	4770      	bx	lr
 8000d3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d3e:	bf3c      	itt	cc
 8000d40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bxcc	lr
 8000d46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d52:	4770      	bx	lr
 8000d54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d58:	bf16      	itet	ne
 8000d5a:	4608      	movne	r0, r1
 8000d5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d60:	4601      	movne	r1, r0
 8000d62:	0242      	lsls	r2, r0, #9
 8000d64:	bf06      	itte	eq
 8000d66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d6a:	ea90 0f01 	teqeq	r0, r1
 8000d6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_ui2f>:
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e004      	b.n	8000d84 <__aeabi_i2f+0x8>
 8000d7a:	bf00      	nop

08000d7c <__aeabi_i2f>:
 8000d7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d80:	bf48      	it	mi
 8000d82:	4240      	negmi	r0, r0
 8000d84:	ea5f 0c00 	movs.w	ip, r0
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d90:	4601      	mov	r1, r0
 8000d92:	f04f 0000 	mov.w	r0, #0
 8000d96:	e01c      	b.n	8000dd2 <__aeabi_l2f+0x2a>

08000d98 <__aeabi_ul2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e00a      	b.n	8000dbc <__aeabi_l2f+0x14>
 8000da6:	bf00      	nop

08000da8 <__aeabi_l2f>:
 8000da8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000db4:	d502      	bpl.n	8000dbc <__aeabi_l2f+0x14>
 8000db6:	4240      	negs	r0, r0
 8000db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbc:	ea5f 0c01 	movs.w	ip, r1
 8000dc0:	bf02      	ittt	eq
 8000dc2:	4684      	moveq	ip, r0
 8000dc4:	4601      	moveq	r1, r0
 8000dc6:	2000      	moveq	r0, #0
 8000dc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dcc:	bf08      	it	eq
 8000dce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dd6:	fabc f28c 	clz	r2, ip
 8000dda:	3a08      	subs	r2, #8
 8000ddc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000de0:	db10      	blt.n	8000e04 <__aeabi_l2f+0x5c>
 8000de2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de6:	4463      	add	r3, ip
 8000de8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000df4:	fa20 f202 	lsr.w	r2, r0, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	f020 0001 	biceq.w	r0, r0, #1
 8000e02:	4770      	bx	lr
 8000e04:	f102 0220 	add.w	r2, r2, #32
 8000e08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e14:	fa21 f202 	lsr.w	r2, r1, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_fmul>:
 8000e24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e2c:	bf1e      	ittt	ne
 8000e2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e32:	ea92 0f0c 	teqne	r2, ip
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d06f      	beq.n	8000f1c <__aeabi_fmul+0xf8>
 8000e3c:	441a      	add	r2, r3
 8000e3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e42:	0240      	lsls	r0, r0, #9
 8000e44:	bf18      	it	ne
 8000e46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e4a:	d01e      	beq.n	8000e8a <__aeabi_fmul+0x66>
 8000e4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e58:	fba0 3101 	umull	r3, r1, r0, r1
 8000e5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e64:	bf3e      	ittt	cc
 8000e66:	0049      	lslcc	r1, r1, #1
 8000e68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e6c:	005b      	lslcc	r3, r3, #1
 8000e6e:	ea40 0001 	orr.w	r0, r0, r1
 8000e72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e76:	2afd      	cmp	r2, #253	@ 0xfd
 8000e78:	d81d      	bhi.n	8000eb6 <__aeabi_fmul+0x92>
 8000e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e82:	bf08      	it	eq
 8000e84:	f020 0001 	biceq.w	r0, r0, #1
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e92:	bf08      	it	eq
 8000e94:	0249      	lsleq	r1, r1, #9
 8000e96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000ea0:	bfc2      	ittt	gt
 8000ea2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ea6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eaa:	4770      	bxgt	lr
 8000eac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	3a01      	subs	r2, #1
 8000eb6:	dc5d      	bgt.n	8000f74 <__aeabi_fmul+0x150>
 8000eb8:	f112 0f19 	cmn.w	r2, #25
 8000ebc:	bfdc      	itt	le
 8000ebe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ec2:	4770      	bxle	lr
 8000ec4:	f1c2 0200 	rsb	r2, r2, #0
 8000ec8:	0041      	lsls	r1, r0, #1
 8000eca:	fa21 f102 	lsr.w	r1, r1, r2
 8000ece:	f1c2 0220 	rsb	r2, r2, #32
 8000ed2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ed6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eda:	f140 0000 	adc.w	r0, r0, #0
 8000ede:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ee2:	bf08      	it	eq
 8000ee4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee8:	4770      	bx	lr
 8000eea:	f092 0f00 	teq	r2, #0
 8000eee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0040      	lsleq	r0, r0, #1
 8000ef6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000efa:	3a01      	subeq	r2, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fmul+0xce>
 8000efe:	ea40 000c 	orr.w	r0, r0, ip
 8000f02:	f093 0f00 	teq	r3, #0
 8000f06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0049      	lsleq	r1, r1, #1
 8000f0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f12:	3b01      	subeq	r3, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fmul+0xe6>
 8000f16:	ea41 010c 	orr.w	r1, r1, ip
 8000f1a:	e78f      	b.n	8000e3c <__aeabi_fmul+0x18>
 8000f1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f20:	ea92 0f0c 	teq	r2, ip
 8000f24:	bf18      	it	ne
 8000f26:	ea93 0f0c 	teqne	r3, ip
 8000f2a:	d00a      	beq.n	8000f42 <__aeabi_fmul+0x11e>
 8000f2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f30:	bf18      	it	ne
 8000f32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f36:	d1d8      	bne.n	8000eea <__aeabi_fmul+0xc6>
 8000f38:	ea80 0001 	eor.w	r0, r0, r1
 8000f3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f40:	4770      	bx	lr
 8000f42:	f090 0f00 	teq	r0, #0
 8000f46:	bf17      	itett	ne
 8000f48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f4c:	4608      	moveq	r0, r1
 8000f4e:	f091 0f00 	teqne	r1, #0
 8000f52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f56:	d014      	beq.n	8000f82 <__aeabi_fmul+0x15e>
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	d101      	bne.n	8000f62 <__aeabi_fmul+0x13e>
 8000f5e:	0242      	lsls	r2, r0, #9
 8000f60:	d10f      	bne.n	8000f82 <__aeabi_fmul+0x15e>
 8000f62:	ea93 0f0c 	teq	r3, ip
 8000f66:	d103      	bne.n	8000f70 <__aeabi_fmul+0x14c>
 8000f68:	024b      	lsls	r3, r1, #9
 8000f6a:	bf18      	it	ne
 8000f6c:	4608      	movne	r0, r1
 8000f6e:	d108      	bne.n	8000f82 <__aeabi_fmul+0x15e>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f80:	4770      	bx	lr
 8000f82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_fdiv>:
 8000f8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f94:	bf1e      	ittt	ne
 8000f96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f9a:	ea92 0f0c 	teqne	r2, ip
 8000f9e:	ea93 0f0c 	teqne	r3, ip
 8000fa2:	d069      	beq.n	8001078 <__aeabi_fdiv+0xec>
 8000fa4:	eba2 0203 	sub.w	r2, r2, r3
 8000fa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fac:	0249      	lsls	r1, r1, #9
 8000fae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fb2:	d037      	beq.n	8001024 <__aeabi_fdiv+0x98>
 8000fb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fbc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fc0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fc4:	428b      	cmp	r3, r1
 8000fc6:	bf38      	it	cc
 8000fc8:	005b      	lslcc	r3, r3, #1
 8000fca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fce:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	bf24      	itt	cs
 8000fd6:	1a5b      	subcs	r3, r3, r1
 8000fd8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fdc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fe0:	bf24      	itt	cs
 8000fe2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fe6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fee:	bf24      	itt	cs
 8000ff0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ff4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ffc:	bf24      	itt	cs
 8000ffe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001002:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	bf18      	it	ne
 800100a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800100e:	d1e0      	bne.n	8000fd2 <__aeabi_fdiv+0x46>
 8001010:	2afd      	cmp	r2, #253	@ 0xfd
 8001012:	f63f af50 	bhi.w	8000eb6 <__aeabi_fmul+0x92>
 8001016:	428b      	cmp	r3, r1
 8001018:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800101c:	bf08      	it	eq
 800101e:	f020 0001 	biceq.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001028:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800102c:	327f      	adds	r2, #127	@ 0x7f
 800102e:	bfc2      	ittt	gt
 8001030:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001034:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001038:	4770      	bxgt	lr
 800103a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	3a01      	subs	r2, #1
 8001044:	e737      	b.n	8000eb6 <__aeabi_fmul+0x92>
 8001046:	f092 0f00 	teq	r2, #0
 800104a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800104e:	bf02      	ittt	eq
 8001050:	0040      	lsleq	r0, r0, #1
 8001052:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001056:	3a01      	subeq	r2, #1
 8001058:	d0f9      	beq.n	800104e <__aeabi_fdiv+0xc2>
 800105a:	ea40 000c 	orr.w	r0, r0, ip
 800105e:	f093 0f00 	teq	r3, #0
 8001062:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001066:	bf02      	ittt	eq
 8001068:	0049      	lsleq	r1, r1, #1
 800106a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800106e:	3b01      	subeq	r3, #1
 8001070:	d0f9      	beq.n	8001066 <__aeabi_fdiv+0xda>
 8001072:	ea41 010c 	orr.w	r1, r1, ip
 8001076:	e795      	b.n	8000fa4 <__aeabi_fdiv+0x18>
 8001078:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800107c:	ea92 0f0c 	teq	r2, ip
 8001080:	d108      	bne.n	8001094 <__aeabi_fdiv+0x108>
 8001082:	0242      	lsls	r2, r0, #9
 8001084:	f47f af7d 	bne.w	8000f82 <__aeabi_fmul+0x15e>
 8001088:	ea93 0f0c 	teq	r3, ip
 800108c:	f47f af70 	bne.w	8000f70 <__aeabi_fmul+0x14c>
 8001090:	4608      	mov	r0, r1
 8001092:	e776      	b.n	8000f82 <__aeabi_fmul+0x15e>
 8001094:	ea93 0f0c 	teq	r3, ip
 8001098:	d104      	bne.n	80010a4 <__aeabi_fdiv+0x118>
 800109a:	024b      	lsls	r3, r1, #9
 800109c:	f43f af4c 	beq.w	8000f38 <__aeabi_fmul+0x114>
 80010a0:	4608      	mov	r0, r1
 80010a2:	e76e      	b.n	8000f82 <__aeabi_fmul+0x15e>
 80010a4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010a8:	bf18      	it	ne
 80010aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010ae:	d1ca      	bne.n	8001046 <__aeabi_fdiv+0xba>
 80010b0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010b4:	f47f af5c 	bne.w	8000f70 <__aeabi_fmul+0x14c>
 80010b8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010bc:	f47f af3c 	bne.w	8000f38 <__aeabi_fmul+0x114>
 80010c0:	e75f      	b.n	8000f82 <__aeabi_fmul+0x15e>
 80010c2:	bf00      	nop

080010c4 <__gesf2>:
 80010c4:	f04f 3cff 	mov.w	ip, #4294967295
 80010c8:	e006      	b.n	80010d8 <__cmpsf2+0x4>
 80010ca:	bf00      	nop

080010cc <__lesf2>:
 80010cc:	f04f 0c01 	mov.w	ip, #1
 80010d0:	e002      	b.n	80010d8 <__cmpsf2+0x4>
 80010d2:	bf00      	nop

080010d4 <__cmpsf2>:
 80010d4:	f04f 0c01 	mov.w	ip, #1
 80010d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010e8:	bf18      	it	ne
 80010ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ee:	d011      	beq.n	8001114 <__cmpsf2+0x40>
 80010f0:	b001      	add	sp, #4
 80010f2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010f6:	bf18      	it	ne
 80010f8:	ea90 0f01 	teqne	r0, r1
 80010fc:	bf58      	it	pl
 80010fe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001102:	bf88      	it	hi
 8001104:	17c8      	asrhi	r0, r1, #31
 8001106:	bf38      	it	cc
 8001108:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800110c:	bf18      	it	ne
 800110e:	f040 0001 	orrne.w	r0, r0, #1
 8001112:	4770      	bx	lr
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	d102      	bne.n	8001120 <__cmpsf2+0x4c>
 800111a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111e:	d105      	bne.n	800112c <__cmpsf2+0x58>
 8001120:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001124:	d1e4      	bne.n	80010f0 <__cmpsf2+0x1c>
 8001126:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112a:	d0e1      	beq.n	80010f0 <__cmpsf2+0x1c>
 800112c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <__aeabi_cfrcmple>:
 8001134:	4684      	mov	ip, r0
 8001136:	4608      	mov	r0, r1
 8001138:	4661      	mov	r1, ip
 800113a:	e7ff      	b.n	800113c <__aeabi_cfcmpeq>

0800113c <__aeabi_cfcmpeq>:
 800113c:	b50f      	push	{r0, r1, r2, r3, lr}
 800113e:	f7ff ffc9 	bl	80010d4 <__cmpsf2>
 8001142:	2800      	cmp	r0, #0
 8001144:	bf48      	it	mi
 8001146:	f110 0f00 	cmnmi.w	r0, #0
 800114a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800114c <__aeabi_fcmpeq>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff fff4 	bl	800113c <__aeabi_cfcmpeq>
 8001154:	bf0c      	ite	eq
 8001156:	2001      	moveq	r0, #1
 8001158:	2000      	movne	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmplt>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffea 	bl	800113c <__aeabi_cfcmpeq>
 8001168:	bf34      	ite	cc
 800116a:	2001      	movcc	r0, #1
 800116c:	2000      	movcs	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_fcmple>:
 8001174:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001178:	f7ff ffe0 	bl	800113c <__aeabi_cfcmpeq>
 800117c:	bf94      	ite	ls
 800117e:	2001      	movls	r0, #1
 8001180:	2000      	movhi	r0, #0
 8001182:	f85d fb08 	ldr.w	pc, [sp], #8
 8001186:	bf00      	nop

08001188 <__aeabi_fcmpge>:
 8001188:	f84d ed08 	str.w	lr, [sp, #-8]!
 800118c:	f7ff ffd2 	bl	8001134 <__aeabi_cfrcmple>
 8001190:	bf94      	ite	ls
 8001192:	2001      	movls	r0, #1
 8001194:	2000      	movhi	r0, #0
 8001196:	f85d fb08 	ldr.w	pc, [sp], #8
 800119a:	bf00      	nop

0800119c <__aeabi_fcmpgt>:
 800119c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a0:	f7ff ffc8 	bl	8001134 <__aeabi_cfrcmple>
 80011a4:	bf34      	ite	cc
 80011a6:	2001      	movcc	r0, #1
 80011a8:	2000      	movcs	r0, #0
 80011aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ae:	bf00      	nop

080011b0 <__aeabi_f2iz>:
 80011b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011b8:	d30f      	bcc.n	80011da <__aeabi_f2iz+0x2a>
 80011ba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011c2:	d90d      	bls.n	80011e0 <__aeabi_f2iz+0x30>
 80011c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011cc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011d0:	fa23 f002 	lsr.w	r0, r3, r2
 80011d4:	bf18      	it	ne
 80011d6:	4240      	negne	r0, r0
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2iz+0x3a>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d105      	bne.n	80011f6 <__aeabi_f2iz+0x46>
 80011ea:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011ee:	bf08      	it	eq
 80011f0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011f4:	4770      	bx	lr
 80011f6:	f04f 0000 	mov.w	r0, #0
 80011fa:	4770      	bx	lr

080011fc <Set_Buzzer>:
 * i: 0 or 1
 * 0: turn off the buzzer
 * 1: turn on the buzzer
 * */
void Set_Buzzer(uint8_t i)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	if (i == 0)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d106      	bne.n	800121a <Set_Buzzer+0x1e>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); // turn off the buzzer
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001212:	4807      	ldr	r0, [pc, #28]	@ (8001230 <Set_Buzzer+0x34>)
 8001214:	f005 f9b1 	bl	800657a <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); // turn on the buzzer
	}
}
 8001218:	e005      	b.n	8001226 <Set_Buzzer+0x2a>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); // turn on the buzzer
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001220:	4803      	ldr	r0, [pc, #12]	@ (8001230 <Set_Buzzer+0x34>)
 8001222:	f005 f9aa 	bl	800657a <HAL_GPIO_WritePin>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40012000 	.word	0x40012000

08001234 <Key1_is_Press>:

/*
 *Determine whether the button is pressed, press to return KEY_PRESS, release to return KEY_RELEASE
 * */
static uint8_t Key1_is_Press(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin))
 8001238:	2108      	movs	r1, #8
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <Key1_is_Press+0x1c>)
 800123c:	f005 f986 	bl	800654c <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <Key1_is_Press+0x16>
	{
		return KEY_PRESS; // If the key is pressed, return KEY_PRESS
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <Key1_is_Press+0x18>
	}
	return KEY_RELEASE; // If the key is released, return KEY_RELEASE
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40012000 	.word	0x40012000

08001254 <Key2_is_Press>:
/*
 *Determine whether the button is pressed, press to return KEY_PRESS, release to return KEY_RELEASE
 * */

static uint8_t Key2_is_Press(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin))
 8001258:	2110      	movs	r1, #16
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <Key2_is_Press+0x1c>)
 800125c:	f005 f976 	bl	800654c <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <Key2_is_Press+0x16>
	{
		return KEY_PRESS; // KEY_PRESS
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <Key2_is_Press+0x18>
	}
	return KEY_RELEASE; // KEY_RELEASE
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40012000 	.word	0x40012000

08001274 <Key3_is_Press>:
/*
 *Determine whether the button is pressed, press to return KEY_PRESS, release to return KEY_RELEASE
 * */

static uint8_t Key3_is_Press(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(KEY3_GPIO_Port, KEY3_Pin))
 8001278:	2120      	movs	r1, #32
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <Key3_is_Press+0x1c>)
 800127c:	f005 f966 	bl	800654c <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <Key3_is_Press+0x16>
	{
		return KEY_PRESS; // KEY_PRESS
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <Key3_is_Press+0x18>
	}
	return KEY_RELEASE; // KEY_RELEASE
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40012000 	.word	0x40012000

08001294 <Key1_State>:
 * Read the status of button K1, return 1 when pressed, and return 0 when released.
 * mode: setting mode, 0: Press to return to 1 all the time; 1: Press to return to 1 only once
 * */

uint8_t Key1_State(uint8_t mode)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	static uint16_t key1_state = 0;

	if (Key1_is_Press() == KEY_PRESS)
 800129e:	f7ff ffc9 	bl	8001234 <Key1_is_Press>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10e      	bne.n	80012c6 <Key1_State+0x32>
	{
		if (key1_state < (mode + 1) * 2)
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <Key1_State+0x5c>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	3301      	adds	r3, #1
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	429a      	cmp	r2, r3
 80012b6:	da0c      	bge.n	80012d2 <Key1_State+0x3e>
		{
			key1_state++;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <Key1_State+0x5c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <Key1_State+0x5c>)
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	e005      	b.n	80012d2 <Key1_State+0x3e>
		}
	}
	else
	{
		key1_state = 0;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <Key1_State+0x5c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
		g_key1_long_press = 0;
 80012cc:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <Key1_State+0x60>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	801a      	strh	r2, [r3, #0]
	}
	if (key1_state == 2)
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <Key1_State+0x5c>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d104      	bne.n	80012e4 <Key1_State+0x50>
	{
		g_key1_long_press = 1;
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <Key1_State+0x60>)
 80012dc:	2201      	movs	r2, #1
 80012de:	801a      	strh	r2, [r3, #0]
		return KEY_PRESS;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <Key1_State+0x52>
	}
	return KEY_RELEASE;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000256 	.word	0x20000256
 80012f4:	20000250 	.word	0x20000250

080012f8 <Key2_State>:
 * Read the status of button K2, return 1 when pressed, and return 0 when released.
 * mode: setting mode, 0: Press to return to 1 all the time; 1: Press to return to 1 only once
 * */

uint8_t Key2_State(uint8_t mode)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	static uint16_t key2_state = 0;

	if (Key2_is_Press() == KEY_PRESS)
 8001302:	f7ff ffa7 	bl	8001254 <Key2_is_Press>
 8001306:	4603      	mov	r3, r0
 8001308:	2b01      	cmp	r3, #1
 800130a:	d10e      	bne.n	800132a <Key2_State+0x32>
	{
		if (key2_state < (mode + 1) * 2)
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <Key2_State+0x5c>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	3301      	adds	r3, #1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	429a      	cmp	r2, r3
 800131a:	da0c      	bge.n	8001336 <Key2_State+0x3e>
		{
			key2_state++;
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <Key2_State+0x5c>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <Key2_State+0x5c>)
 8001326:	801a      	strh	r2, [r3, #0]
 8001328:	e005      	b.n	8001336 <Key2_State+0x3e>
		}
	}
	else
	{
		key2_state = 0;
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <Key2_State+0x5c>)
 800132c:	2200      	movs	r2, #0
 800132e:	801a      	strh	r2, [r3, #0]
		g_key2_long_press = 0;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <Key2_State+0x60>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
	}
	if (key2_state == 2)
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <Key2_State+0x5c>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d104      	bne.n	8001348 <Key2_State+0x50>
	{
		g_key2_long_press = 1;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <Key2_State+0x60>)
 8001340:	2201      	movs	r2, #1
 8001342:	801a      	strh	r2, [r3, #0]
		return KEY_PRESS;
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <Key2_State+0x52>
	}
	return KEY_RELEASE;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000258 	.word	0x20000258
 8001358:	20000252 	.word	0x20000252

0800135c <Key3_State>:
 * Read the status of button K3, return 1 when pressed, and return 0 when released.
 * mode: setting mode, 0: Press to return to 1 all the time; 1: Press to return to 1 only once
 * */

uint8_t Key3_State(uint8_t mode)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	static uint16_t key3_state = 0;

	if (Key3_is_Press() == KEY_PRESS)
 8001366:	f7ff ff85 	bl	8001274 <Key3_is_Press>
 800136a:	4603      	mov	r3, r0
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10e      	bne.n	800138e <Key3_State+0x32>
	{
		if (key3_state < (mode + 1) * 2)
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <Key3_State+0x5c>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	3301      	adds	r3, #1
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	429a      	cmp	r2, r3
 800137e:	da0c      	bge.n	800139a <Key3_State+0x3e>
		{
			key3_state++;
 8001380:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <Key3_State+0x5c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <Key3_State+0x5c>)
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	e005      	b.n	800139a <Key3_State+0x3e>
		}
	}
	else
	{
		key3_state = 0;
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <Key3_State+0x5c>)
 8001390:	2200      	movs	r2, #0
 8001392:	801a      	strh	r2, [r3, #0]
		g_key3_long_press = 0;
 8001394:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <Key3_State+0x60>)
 8001396:	2200      	movs	r2, #0
 8001398:	801a      	strh	r2, [r3, #0]
	}
	if (key3_state == 2)
 800139a:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <Key3_State+0x5c>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d104      	bne.n	80013ac <Key3_State+0x50>
	{
		g_key3_long_press = 1;
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <Key3_State+0x60>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	801a      	strh	r2, [r3, #0]
		return KEY_PRESS;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <Key3_State+0x52>
	}
	return KEY_RELEASE;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	2000025a 	.word	0x2000025a
 80013bc:	20000254 	.word	0x20000254

080013c0 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
	...

08001448 <I2C_WriteByte>:

static SSD1306_t SSD1306;

//  Write data to OLED
void I2C_WriteByte(unsigned char addr, unsigned char data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	4613      	mov	r3, r2
 8001456:	71bb      	strb	r3, [r7, #6]
    while (LL_I2C_IsActiveFlag_BUSY(OLED_I2C))
 8001458:	bf00      	nop
 800145a:	481f      	ldr	r0, [pc, #124]	@ (80014d8 <I2C_WriteByte+0x90>)
 800145c:	f7ff ffb0 	bl	80013c0 <LL_I2C_IsActiveFlag_BUSY>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <I2C_WriteByte+0x12>
        ;                                    // Determine if the bus is busy
    LL_I2C_GenerateStartCondition(OLED_I2C); // START 1
 8001466:	481c      	ldr	r0, [pc, #112]	@ (80014d8 <I2C_WriteByte+0x90>)
 8001468:	f7ff ffbc 	bl	80013e4 <LL_I2C_GenerateStartCondition>
    while (!I2C_CheckEvent(OLED_I2C, I2C_EVENT_MASTER_MODE_SELECT))
 800146c:	bf00      	nop
 800146e:	491b      	ldr	r1, [pc, #108]	@ (80014dc <I2C_WriteByte+0x94>)
 8001470:	4819      	ldr	r0, [pc, #100]	@ (80014d8 <I2C_WriteByte+0x90>)
 8001472:	f000 fbb1 	bl	8001bd8 <I2C_CheckEvent>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f8      	beq.n	800146e <I2C_WriteByte+0x26>
        ;                                                                   // Read SR1->SB bit to determine whether the start bit is sent
    I2C_Send7bitAddress(OLED_I2C, OLED_ADDRESS, I2C_Direction_Transmitter); // Send from device address
 800147c:	2200      	movs	r2, #0
 800147e:	2178      	movs	r1, #120	@ 0x78
 8001480:	4815      	ldr	r0, [pc, #84]	@ (80014d8 <I2C_WriteByte+0x90>)
 8001482:	f000 fb8d 	bl	8001ba0 <I2C_Send7bitAddress>
    while (!I2C_CheckEvent(OLED_I2C, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
 8001486:	bf00      	nop
 8001488:	4915      	ldr	r1, [pc, #84]	@ (80014e0 <I2C_WriteByte+0x98>)
 800148a:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <I2C_WriteByte+0x90>)
 800148c:	f000 fba4 	bl	8001bd8 <I2C_CheckEvent>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f8      	beq.n	8001488 <I2C_WriteByte+0x40>
        ;                                 // Waiting for EV6 to complete; Read SR1
    LL_I2C_TransmitData8(OLED_I2C, addr); // Register address of the slave device
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4619      	mov	r1, r3
 800149a:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <I2C_WriteByte+0x90>)
 800149c:	f7ff ffc0 	bl	8001420 <LL_I2C_TransmitData8>
    while (!I2C_CheckEvent(OLED_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80014a0:	bf00      	nop
 80014a2:	4910      	ldr	r1, [pc, #64]	@ (80014e4 <I2C_WriteByte+0x9c>)
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <I2C_WriteByte+0x90>)
 80014a6:	f000 fb97 	bl	8001bd8 <I2C_CheckEvent>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f8      	beq.n	80014a2 <I2C_WriteByte+0x5a>
        ;
    LL_I2C_TransmitData8(OLED_I2C, data); // send data
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <I2C_WriteByte+0x90>)
 80014b6:	f7ff ffb3 	bl	8001420 <LL_I2C_TransmitData8>
    while (!I2C_CheckEvent(OLED_I2C, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 80014ba:	bf00      	nop
 80014bc:	4909      	ldr	r1, [pc, #36]	@ (80014e4 <I2C_WriteByte+0x9c>)
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <I2C_WriteByte+0x90>)
 80014c0:	f000 fb8a 	bl	8001bd8 <I2C_CheckEvent>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f8      	beq.n	80014bc <I2C_WriteByte+0x74>
        ;
    LL_I2C_GenerateStopCondition(OLED_I2C);
 80014ca:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <I2C_WriteByte+0x90>)
 80014cc:	f7ff ff99 	bl	8001402 <LL_I2C_GenerateStopCondition>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40005400 	.word	0x40005400
 80014dc:	00030001 	.word	0x00030001
 80014e0:	00070082 	.word	0x00070082
 80014e4:	00070084 	.word	0x00070084

080014e8 <OLED_Init>:

// Function function: oled initialization
// Incoming parameter: None
void OLED_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    I2C1_OLED_Init();
 80014ec:	f000 fb4e 	bl	8001b8c <I2C1_OLED_Init>
    HAL_Delay(100);
 80014f0:	2064      	movs	r0, #100	@ 0x64
 80014f2:	f004 f8a7 	bl	8005644 <HAL_Delay>

    SSD1306_WRITECOMMAND(0xae); // display off
 80014f6:	21ae      	movs	r1, #174	@ 0xae
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff ffa5 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // Set Normal Display (default)
 80014fe:	21a6      	movs	r1, #166	@ 0xa6
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff ffa1 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xAE); // DISPLAYOFF
 8001506:	21ae      	movs	r1, #174	@ 0xae
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff ff9d 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD5); // SETDISPLAYCLOCKDIV
 800150e:	21d5      	movs	r1, #213	@ 0xd5
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff ff99 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x80); // the suggested ratio 0x80
 8001516:	2180      	movs	r1, #128	@ 0x80
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff ff95 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xA8); // SSD1306_SETMULTIPLEX
 800151e:	21a8      	movs	r1, #168	@ 0xa8
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ff91 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x1F);
 8001526:	211f      	movs	r1, #31
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff ff8d 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD3);       // SETDISPLAYOFFSET
 800152e:	21d3      	movs	r1, #211	@ 0xd3
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff ff89 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x00);       // no offset
 8001536:	2100      	movs	r1, #0
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff ff85 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40 | 0x0); // SETSTARTLINE
 800153e:	2140      	movs	r1, #64	@ 0x40
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff ff81 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x8D);       // CHARGEPUMP
 8001546:	218d      	movs	r1, #141	@ 0x8d
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ff7d 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x14);       // 0x014 enable, 0x010 disable
 800154e:	2114      	movs	r1, #20
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff ff79 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x20);       // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5),
 8001556:	2120      	movs	r1, #32
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff ff75 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02);       // 0x12 //128x32 OLED: 0x002,  128x32 OLED 0x012
 800155e:	2102      	movs	r1, #2
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff ff71 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa1);       // segment remap a0/a1
 8001566:	21a1      	movs	r1, #161	@ 0xa1
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ff6d 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xc8);       // c0: scan dir normal, c8: reverse
 800156e:	21c8      	movs	r1, #200	@ 0xc8
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff ff69 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xda);
 8001576:	21da      	movs	r1, #218	@ 0xda
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff65 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02); // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5)
 800157e:	2102      	movs	r1, #2
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff ff61 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x81);
 8001586:	2181      	movs	r1, #129	@ 0x81
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff ff5d 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xcf); // [2] set contrast control
 800158e:	21cf      	movs	r1, #207	@ 0xcf
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff ff59 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xd9);
 8001596:	21d9      	movs	r1, #217	@ 0xd9
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff ff55 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xf1); // [2] pre-charge period 0x022/f1
 800159e:	21f1      	movs	r1, #241	@ 0xf1
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff ff51 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xdb);
 80015a6:	21db      	movs	r1, #219	@ 0xdb
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff ff4d 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40); // vcomh deselect level
 80015ae:	2140      	movs	r1, #64	@ 0x40
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ff49 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x2e); // Disable scroll
 80015b6:	212e      	movs	r1, #46	@ 0x2e
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ff45 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa4); // output ram to display
 80015be:	21a4      	movs	r1, #164	@ 0xa4
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ff41 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // none inverted normal display mode
 80015c6:	21a6      	movs	r1, #166	@ 0xa6
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ff3d 	bl	8001448 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xaf); // display on
 80015ce:	21af      	movs	r1, #175	@ 0xaf
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ff39 	bl	8001448 <I2C_WriteByte>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f846 	bl	8001668 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 80015dc:	f000 f80e 	bl	80015fc <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 80015e0:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <OLED_Init+0x110>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80015e6:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <OLED_Init+0x110>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 80015ec:	4b02      	ldr	r3, [pc, #8]	@ (80015f8 <OLED_Init+0x110>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	715a      	strb	r2, [r3, #5]
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000045c 	.word	0x2000045c

080015fc <SSD1306_UpdateScreen>:

// Function function: OLED screen update display
// Incoming parameter: None
void SSD1306_UpdateScreen(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
    uint8_t m, n;

    for (m = 0; m < 8; m++)
 8001602:	2300      	movs	r3, #0
 8001604:	71fb      	strb	r3, [r7, #7]
 8001606:	e025      	b.n	8001654 <SSD1306_UpdateScreen+0x58>
    {
        SSD1306_WRITECOMMAND(0xB0 + m);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	3b50      	subs	r3, #80	@ 0x50
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4619      	mov	r1, r3
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff ff19 	bl	8001448 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x00);
 8001616:	2100      	movs	r1, #0
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff ff15 	bl	8001448 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x10);
 800161e:	2110      	movs	r1, #16
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff ff11 	bl	8001448 <I2C_WriteByte>

        for (n = 0; n < SSD1306_WIDTH; n++)
 8001626:	2300      	movs	r3, #0
 8001628:	71bb      	strb	r3, [r7, #6]
 800162a:	e00c      	b.n	8001646 <SSD1306_UpdateScreen+0x4a>
        {
            SSD1306_WRITEDATA(SSD1306_Buffer[n + SSD1306_WIDTH * m]);
 800162c:	79ba      	ldrb	r2, [r7, #6]
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	01db      	lsls	r3, r3, #7
 8001632:	4413      	add	r3, r2
 8001634:	4a0b      	ldr	r2, [pc, #44]	@ (8001664 <SSD1306_UpdateScreen+0x68>)
 8001636:	5cd3      	ldrb	r3, [r2, r3]
 8001638:	4619      	mov	r1, r3
 800163a:	2040      	movs	r0, #64	@ 0x40
 800163c:	f7ff ff04 	bl	8001448 <I2C_WriteByte>
        for (n = 0; n < SSD1306_WIDTH; n++)
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	3301      	adds	r3, #1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800164a:	2b00      	cmp	r3, #0
 800164c:	daee      	bge.n	800162c <SSD1306_UpdateScreen+0x30>
    for (m = 0; m < 8; m++)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	3301      	adds	r3, #1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2b07      	cmp	r3, #7
 8001658:	d9d6      	bls.n	8001608 <SSD1306_UpdateScreen+0xc>
        }
    }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000025c 	.word	0x2000025c

08001668 <SSD1306_Fill>:

// Function function: OLED screen is cleared, but the display is not refreshed
// Incoming parameter: color: SSD1306_ COLOR_ BLACK SSD1306_ COLOR_ WHITE
void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <SSD1306_Fill+0x14>
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <SSD1306_Fill+0x16>
 800167c:	23ff      	movs	r3, #255	@ 0xff
 800167e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001682:	4619      	mov	r1, r3
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <SSD1306_Fill+0x2c>)
 8001686:	f00a f9f8 	bl	800ba7a <memset>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000025c 	.word	0x2000025c

08001698 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
 80016a2:	460b      	mov	r3, r1
 80016a4:	80bb      	strh	r3, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	70fb      	strb	r3, [r7, #3]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80016ae:	d848      	bhi.n	8001742 <SSD1306_DrawPixel+0xaa>
 80016b0:	88bb      	ldrh	r3, [r7, #4]
 80016b2:	2b1f      	cmp	r3, #31
 80016b4:	d845      	bhi.n	8001742 <SSD1306_DrawPixel+0xaa>
    {
        return; // Error, out of range
    }

    /* Check if pixels are inverted*/
    if (SSD1306.Inverted)
 80016b6:	4b25      	ldr	r3, [pc, #148]	@ (800174c <SSD1306_DrawPixel+0xb4>)
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <SSD1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR_t)!color;
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf0c      	ite	eq
 80016c4:	2301      	moveq	r3, #1
 80016c6:	2300      	movne	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	70fb      	strb	r3, [r7, #3]
    }

    /* set color */
    if (color == SSD1306_COLOR_WHITE)
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d11a      	bne.n	8001708 <SSD1306_DrawPixel+0x70>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	b298      	uxth	r0, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	4413      	add	r3, r2
 80016e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001750 <SSD1306_DrawPixel+0xb8>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b259      	sxtb	r1, r3
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	4603      	mov	r3, r0
 80016fc:	01db      	lsls	r3, r3, #7
 80016fe:	4413      	add	r3, r2
 8001700:	b2c9      	uxtb	r1, r1
 8001702:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <SSD1306_DrawPixel+0xb8>)
 8001704:	54d1      	strb	r1, [r2, r3]
 8001706:	e01d      	b.n	8001744 <SSD1306_DrawPixel+0xac>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	b298      	uxth	r0, r3
 8001710:	4603      	mov	r3, r0
 8001712:	01db      	lsls	r3, r3, #7
 8001714:	4413      	add	r3, r2
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <SSD1306_DrawPixel+0xb8>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	b25a      	sxtb	r2, r3
 800171c:	88bb      	ldrh	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	b25b      	sxtb	r3, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4013      	ands	r3, r2
 8001730:	b259      	sxtb	r1, r3
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	4603      	mov	r3, r0
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	4413      	add	r3, r2
 800173a:	b2c9      	uxtb	r1, r1
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <SSD1306_DrawPixel+0xb8>)
 800173e:	54d1      	strb	r1, [r2, r3]
 8001740:	e000      	b.n	8001744 <SSD1306_DrawPixel+0xac>
        return; // Error, out of range
 8001742:	bf00      	nop
    }
}
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	2000045c 	.word	0x2000045c
 8001750:	2000025c 	.word	0x2000025c

08001754 <SSD1306_GotoXY>:

// Function function: Set the current cursor
// Incoming parameter: x: abscissa y: ordinate
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	460a      	mov	r2, r1
 800175e:	80fb      	strh	r3, [r7, #6]
 8001760:	4613      	mov	r3, r2
 8001762:	80bb      	strh	r3, [r7, #4]
    SSD1306.CurrentX = x;
 8001764:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SSD1306_GotoXY+0x28>)
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 800176a:	4a04      	ldr	r2, [pc, #16]	@ (800177c <SSD1306_GotoXY+0x28>)
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	8053      	strh	r3, [r2, #2]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000045c 	.word	0x2000045c

08001780 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001790:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <SSD1306_Putc+0xf8>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
    if (
 800179c:	2b7f      	cmp	r3, #127	@ 0x7f
 800179e:	dc07      	bgt.n	80017b0 <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 80017a0:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <SSD1306_Putc+0xf8>)
 80017a2:	885b      	ldrh	r3, [r3, #2]
 80017a4:	461a      	mov	r2, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80017ac:	2b1f      	cmp	r3, #31
 80017ae:	dd01      	ble.n	80017b4 <SSD1306_Putc+0x34>
    {
        return 0; // Error, out of range
 80017b0:	2300      	movs	r3, #0
 80017b2:	e05d      	b.n	8001870 <SSD1306_Putc+0xf0>
    }

    for (i = 0; i < Font->FontHeight; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e04b      	b.n	8001852 <SSD1306_Putc+0xd2>
    {
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	3b20      	subs	r3, #32
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	7849      	ldrb	r1, [r1, #1]
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	440b      	add	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++)
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	e030      	b.n	8001840 <SSD1306_Putc+0xc0>
        {
            if ((b << j) & 0x8000)
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d010      	beq.n	8001810 <SSD1306_Putc+0x90>
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)color);
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <SSD1306_Putc+0xf8>)
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	b298      	uxth	r0, r3
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <SSD1306_Putc+0xf8>)
 80017fc:	885a      	ldrh	r2, [r3, #2]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	79ba      	ldrb	r2, [r7, #6]
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff ff45 	bl	8001698 <SSD1306_DrawPixel>
 800180e:	e014      	b.n	800183a <SSD1306_Putc+0xba>
            }
            else
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <SSD1306_Putc+0xf8>)
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	b298      	uxth	r0, r3
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <SSD1306_Putc+0xf8>)
 800181e:	885a      	ldrh	r2, [r3, #2]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	b29b      	uxth	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b299      	uxth	r1, r3
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	f7ff ff2f 	bl	8001698 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4293      	cmp	r3, r2
 800184a:	d3c8      	bcc.n	80017de <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	461a      	mov	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4293      	cmp	r3, r2
 800185c:	d3ad      	bcc.n	80017ba <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <SSD1306_Putc+0xf8>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	4413      	add	r3, r2
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <SSD1306_Putc+0xf8>)
 800186c:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 800186e:	79fb      	ldrb	r3, [r7, #7]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000045c 	.word	0x2000045c

0800187c <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str)
 800188a:	e012      	b.n	80018b2 <SSD1306_Puts+0x36>
    {
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff73 	bl	8001780 <SSD1306_Putc>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d002      	beq.n	80018ac <SSD1306_Puts+0x30>
        {
            /* Return error */
            return *str;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	e008      	b.n	80018be <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
    while (*str)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1e8      	bne.n	800188c <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <OLED_Clear>:
    SSD1306_WRITECOMMAND(0xAE);
}

/* OLED Clear Screen */
void OLED_Clear(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fecc 	bl	8001668 <SSD1306_Fill>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <OLED_Refresh>:

/*Refresh OLED screen */
void OLED_Refresh(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    SSD1306_UpdateScreen();
 80018d8:	f7ff fe90 	bl	80015fc <SSD1306_UpdateScreen>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <OLED_Draw_String>:

/* Write Characters */
void OLED_Draw_String(char *data, uint8_t x, uint8_t y, bool clear, bool refresh)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	70fb      	strb	r3, [r7, #3]
 80018f2:	460b      	mov	r3, r1
 80018f4:	70bb      	strb	r3, [r7, #2]
 80018f6:	4613      	mov	r3, r2
 80018f8:	707b      	strb	r3, [r7, #1]
    if (clear)
 80018fa:	787b      	ldrb	r3, [r7, #1]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <OLED_Draw_String+0x24>
        OLED_Clear();
 8001900:	f7ff ffe1 	bl	80018c6 <OLED_Clear>
    SSD1306_GotoXY(x, y);
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	b29b      	uxth	r3, r3
 8001908:	78ba      	ldrb	r2, [r7, #2]
 800190a:	b292      	uxth	r2, r2
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff20 	bl	8001754 <SSD1306_GotoXY>
    SSD1306_Puts(data, &Font_7x10, SSD1306_COLOR_WHITE);
 8001914:	2201      	movs	r2, #1
 8001916:	4906      	ldr	r1, [pc, #24]	@ (8001930 <OLED_Draw_String+0x50>)
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ffaf 	bl	800187c <SSD1306_Puts>
    if (refresh)
 800191e:	7c3b      	ldrb	r3, [r7, #16]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <OLED_Draw_String+0x48>
        OLED_Refresh();
 8001924:	f7ff ffd6 	bl	80018d4 <OLED_Refresh>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000

08001934 <OLED_Draw_Line>:

/* Write a line of characters */
void OLED_Draw_Line(char *data, uint8_t line, bool clear, bool refresh)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af02      	add	r7, sp, #8
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4603      	mov	r3, r0
 8001944:	70fb      	strb	r3, [r7, #3]
 8001946:	460b      	mov	r3, r1
 8001948:	70bb      	strb	r3, [r7, #2]
 800194a:	4613      	mov	r3, r2
 800194c:	707b      	strb	r3, [r7, #1]
    if (line > 0 && line <= 3)
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d012      	beq.n	800197a <OLED_Draw_Line+0x46>
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d80f      	bhi.n	800197a <OLED_Draw_Line+0x46>
    {
        OLED_Draw_String(data, 0, 10 * (line - 1), clear, refresh);
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	461a      	mov	r2, r3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	3b0a      	subs	r3, #10
 8001968:	b2da      	uxtb	r2, r3
 800196a:	78b9      	ldrb	r1, [r7, #2]
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	460b      	mov	r3, r1
 8001972:	2100      	movs	r1, #0
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ffb3 	bl	80018e0 <OLED_Draw_String>
    }
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <OLED_QuickChat>:
        }
    }
}

// Just like the Rocket League video game.
void OLED_QuickChat(uint32_t firstPad, uint32_t secondPad){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	switch(firstPad)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3b05      	subs	r3, #5
 8001992:	2b03      	cmp	r3, #3
 8001994:	f200 80c4 	bhi.w	8001b20 <OLED_QuickChat+0x19c>
 8001998:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <OLED_QuickChat+0x1c>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	08001a0d 	.word	0x08001a0d
 80019a8:	08001a69 	.word	0x08001a69
 80019ac:	08001ac5 	.word	0x08001ac5
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3b05      	subs	r3, #5
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d827      	bhi.n	8001a08 <OLED_QuickChat+0x84>
 80019b8:	a201      	add	r2, pc, #4	@ (adr r2, 80019c0 <OLED_QuickChat+0x3c>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019d1 	.word	0x080019d1
 80019c4:	080019df 	.word	0x080019df
 80019c8:	080019ed 	.word	0x080019ed
 80019cc:	080019fb 	.word	0x080019fb
	{
	case PSB_PAD_UP:
		switch(secondPad)
		{
		case PSB_PAD_UP:
			OLED_Draw_Line("Je l'ai !", 1, true, true);
 80019d0:	2301      	movs	r3, #1
 80019d2:	2201      	movs	r2, #1
 80019d4:	2101      	movs	r1, #1
 80019d6:	4855      	ldr	r0, [pc, #340]	@ (8001b2c <OLED_QuickChat+0x1a8>)
 80019d8:	f7ff ffac 	bl	8001934 <OLED_Draw_Line>
			break;
 80019dc:	e015      	b.n	8001a0a <OLED_QuickChat+0x86>
		case PSB_PAD_RIGHT:
			OLED_Draw_Line("Besoin de turbo !", 1, true, true);
 80019de:	2301      	movs	r3, #1
 80019e0:	2201      	movs	r2, #1
 80019e2:	2101      	movs	r1, #1
 80019e4:	4852      	ldr	r0, [pc, #328]	@ (8001b30 <OLED_QuickChat+0x1ac>)
 80019e6:	f7ff ffa5 	bl	8001934 <OLED_Draw_Line>
			break;
 80019ea:	e00e      	b.n	8001a0a <OLED_QuickChat+0x86>
		case PSB_PAD_DOWN:
			OLED_Draw_Line("Prends-le !", 1, true, true);
 80019ec:	2301      	movs	r3, #1
 80019ee:	2201      	movs	r2, #1
 80019f0:	2101      	movs	r1, #1
 80019f2:	4850      	ldr	r0, [pc, #320]	@ (8001b34 <OLED_QuickChat+0x1b0>)
 80019f4:	f7ff ff9e 	bl	8001934 <OLED_Draw_Line>
			break;
 80019f8:	e007      	b.n	8001a0a <OLED_QuickChat+0x86>
		case PSB_PAD_LEFT:
			OLED_Draw_Line("Je défends.", 1, true, true);
 80019fa:	2301      	movs	r3, #1
 80019fc:	2201      	movs	r2, #1
 80019fe:	2101      	movs	r1, #1
 8001a00:	484d      	ldr	r0, [pc, #308]	@ (8001b38 <OLED_QuickChat+0x1b4>)
 8001a02:	f7ff ff97 	bl	8001934 <OLED_Draw_Line>
			break;
 8001a06:	e000      	b.n	8001a0a <OLED_QuickChat+0x86>
		default:
			break;
 8001a08:	bf00      	nop
		}
		break;
 8001a0a:	e08a      	b.n	8001b22 <OLED_QuickChat+0x19e>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3b05      	subs	r3, #5
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d827      	bhi.n	8001a64 <OLED_QuickChat+0xe0>
 8001a14:	a201      	add	r2, pc, #4	@ (adr r2, 8001a1c <OLED_QuickChat+0x98>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a3b 	.word	0x08001a3b
 8001a24:	08001a49 	.word	0x08001a49
 8001a28:	08001a57 	.word	0x08001a57
	case PSB_PAD_RIGHT:
		switch(secondPad)
		{
		case PSB_PAD_UP:
			OLED_Draw_Line("Beau tir !", 1, true, true);
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2101      	movs	r1, #1
 8001a32:	4842      	ldr	r0, [pc, #264]	@ (8001b3c <OLED_QuickChat+0x1b8>)
 8001a34:	f7ff ff7e 	bl	8001934 <OLED_Draw_Line>
			break;
 8001a38:	e015      	b.n	8001a66 <OLED_QuickChat+0xe2>
		case PSB_PAD_RIGHT:
			OLED_Draw_Line("Belle passe !", 1, true, true);
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2101      	movs	r1, #1
 8001a40:	483f      	ldr	r0, [pc, #252]	@ (8001b40 <OLED_QuickChat+0x1bc>)
 8001a42:	f7ff ff77 	bl	8001934 <OLED_Draw_Line>
			break;
 8001a46:	e00e      	b.n	8001a66 <OLED_QuickChat+0xe2>
		case PSB_PAD_DOWN:
			OLED_Draw_Line("Merci !", 1, true, true);
 8001a48:	2301      	movs	r3, #1
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	483d      	ldr	r0, [pc, #244]	@ (8001b44 <OLED_QuickChat+0x1c0>)
 8001a50:	f7ff ff70 	bl	8001934 <OLED_Draw_Line>
			break;
 8001a54:	e007      	b.n	8001a66 <OLED_QuickChat+0xe2>
		case PSB_PAD_LEFT:
			OLED_Draw_Line("Quel arrêt !", 1, true, true);
 8001a56:	2301      	movs	r3, #1
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	483a      	ldr	r0, [pc, #232]	@ (8001b48 <OLED_QuickChat+0x1c4>)
 8001a5e:	f7ff ff69 	bl	8001934 <OLED_Draw_Line>
			break;
 8001a62:	e000      	b.n	8001a66 <OLED_QuickChat+0xe2>
		default:
			break;
 8001a64:	bf00      	nop
		}
		break;
 8001a66:	e05c      	b.n	8001b22 <OLED_QuickChat+0x19e>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3b05      	subs	r3, #5
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d827      	bhi.n	8001ac0 <OLED_QuickChat+0x13c>
 8001a70:	a201      	add	r2, pc, #4	@ (adr r2, 8001a78 <OLED_QuickChat+0xf4>)
 8001a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001a97 	.word	0x08001a97
 8001a80:	08001aa5 	.word	0x08001aa5
 8001a84:	08001ab3 	.word	0x08001ab3
	case PSB_PAD_DOWN:
		switch(secondPad)
		{
		case PSB_PAD_UP:
			OLED_Draw_Line("Joli démo !", 1, true, true);
 8001a88:	2301      	movs	r3, #1
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	482f      	ldr	r0, [pc, #188]	@ (8001b4c <OLED_QuickChat+0x1c8>)
 8001a90:	f7ff ff50 	bl	8001934 <OLED_Draw_Line>
			break;
 8001a94:	e015      	b.n	8001ac2 <OLED_QuickChat+0x13e>
		case PSB_PAD_RIGHT:
			OLED_Draw_Line("La feinte.", 1, true, true);
 8001a96:	2301      	movs	r3, #1
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	482c      	ldr	r0, [pc, #176]	@ (8001b50 <OLED_QuickChat+0x1cc>)
 8001a9e:	f7ff ff49 	bl	8001934 <OLED_Draw_Line>
			break;
 8001aa2:	e00e      	b.n	8001ac2 <OLED_QuickChat+0x13e>
		case PSB_PAD_DOWN:
			OLED_Draw_Line("Quelle intensité !", 1, true, true);
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	482a      	ldr	r0, [pc, #168]	@ (8001b54 <OLED_QuickChat+0x1d0>)
 8001aac:	f7ff ff42 	bl	8001934 <OLED_Draw_Line>
			break;
 8001ab0:	e007      	b.n	8001ac2 <OLED_QuickChat+0x13e>
		case PSB_PAD_LEFT:
			OLED_Draw_Line("En approche !", 1, true, true);
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4827      	ldr	r0, [pc, #156]	@ (8001b58 <OLED_QuickChat+0x1d4>)
 8001aba:	f7ff ff3b 	bl	8001934 <OLED_Draw_Line>
			break;
 8001abe:	e000      	b.n	8001ac2 <OLED_QuickChat+0x13e>
		default:
			break;
 8001ac0:	bf00      	nop
		}
		break;
 8001ac2:	e02e      	b.n	8001b22 <OLED_QuickChat+0x19e>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3b05      	subs	r3, #5
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d827      	bhi.n	8001b1c <OLED_QuickChat+0x198>
 8001acc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad4 <OLED_QuickChat+0x150>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001ae5 	.word	0x08001ae5
 8001ad8:	08001af3 	.word	0x08001af3
 8001adc:	08001b01 	.word	0x08001b01
 8001ae0:	08001b0f 	.word	0x08001b0f
	case PSB_PAD_LEFT:
		switch(secondPad)
		{
		case PSB_PAD_UP:
			OLED_Draw_Line("Ok.", 1, true, true);
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2101      	movs	r1, #1
 8001aea:	481c      	ldr	r0, [pc, #112]	@ (8001b5c <OLED_QuickChat+0x1d8>)
 8001aec:	f7ff ff22 	bl	8001934 <OLED_Draw_Line>
			break;
 8001af0:	e015      	b.n	8001b1e <OLED_QuickChat+0x19a>
		case PSB_PAD_RIGHT:
			OLED_Draw_Line("Sauvage !", 1, true, true);
 8001af2:	2301      	movs	r3, #1
 8001af4:	2201      	movs	r2, #1
 8001af6:	2101      	movs	r1, #1
 8001af8:	4819      	ldr	r0, [pc, #100]	@ (8001b60 <OLED_QuickChat+0x1dc>)
 8001afa:	f7ff ff1b 	bl	8001934 <OLED_Draw_Line>
			break;
 8001afe:	e00e      	b.n	8001b1e <OLED_QuickChat+0x19a>
		case PSB_PAD_DOWN:
			OLED_Draw_Line("Pas de problème.", 1, true, true);
 8001b00:	2301      	movs	r3, #1
 8001b02:	2201      	movs	r2, #1
 8001b04:	2101      	movs	r1, #1
 8001b06:	4817      	ldr	r0, [pc, #92]	@ (8001b64 <OLED_QuickChat+0x1e0>)
 8001b08:	f7ff ff14 	bl	8001934 <OLED_Draw_Line>
			break;
 8001b0c:	e007      	b.n	8001b1e <OLED_QuickChat+0x19a>
		case PSB_PAD_LEFT:
			OLED_Draw_Line("Pardon...", 1, true, true);
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2201      	movs	r2, #1
 8001b12:	2101      	movs	r1, #1
 8001b14:	4814      	ldr	r0, [pc, #80]	@ (8001b68 <OLED_QuickChat+0x1e4>)
 8001b16:	f7ff ff0d 	bl	8001934 <OLED_Draw_Line>
			break;
 8001b1a:	e000      	b.n	8001b1e <OLED_QuickChat+0x19a>
		default:
			break;
 8001b1c:	bf00      	nop
		}
		break;
 8001b1e:	e000      	b.n	8001b22 <OLED_QuickChat+0x19e>
	default:
		break;
 8001b20:	bf00      	nop
	}
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0800dc38 	.word	0x0800dc38
 8001b30:	0800dc44 	.word	0x0800dc44
 8001b34:	0800dc58 	.word	0x0800dc58
 8001b38:	0800dc64 	.word	0x0800dc64
 8001b3c:	0800dc74 	.word	0x0800dc74
 8001b40:	0800dc80 	.word	0x0800dc80
 8001b44:	0800dc90 	.word	0x0800dc90
 8001b48:	0800dc98 	.word	0x0800dc98
 8001b4c:	0800dca8 	.word	0x0800dca8
 8001b50:	0800dcb8 	.word	0x0800dcb8
 8001b54:	0800dcc4 	.word	0x0800dcc4
 8001b58:	0800dcd8 	.word	0x0800dcd8
 8001b5c:	0800dce8 	.word	0x0800dce8
 8001b60:	0800dcec 	.word	0x0800dcec
 8001b64:	0800dcf8 	.word	0x0800dcf8
 8001b68:	0800dd0c 	.word	0x0800dd0c

08001b6c <LL_I2C_Enable>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	601a      	str	r2, [r3, #0]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <I2C1_OLED_Init>:
#include "bsp_oled_i2c.h"

void I2C1_OLED_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  LL_I2C_Enable(I2C1); // Start i2c 启动i2c
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <I2C1_OLED_Init+0x10>)
 8001b92:	f7ff ffeb 	bl	8001b6c <LL_I2C_Enable>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40005400 	.word	0x40005400

08001ba0 <I2C_Send7bitAddress>:

void I2C_Send7bitAddress(I2C_TypeDef *I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
 8001bac:	4613      	mov	r3, r2
 8001bae:	70bb      	strb	r3, [r7, #2]
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001bb0:	78bb      	ldrb	r3, [r7, #2]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	70fb      	strb	r3, [r7, #3]
 8001bbe:	e003      	b.n	8001bc8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t) ~((uint8_t)I2C_OAR1_ADD0);
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <I2C_CheckEvent>:

uint8_t I2C_CheckEvent(I2C_TypeDef *I2Cx, uint32_t I2C_EVENT)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  uint8_t status = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	4013      	ands	r3, r2
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d102      	bne.n	8001c22 <I2C_CheckEvent+0x4a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = 1;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	75fb      	strb	r3, [r7, #23]
 8001c20:	e001      	b.n	8001c26 <I2C_CheckEvent+0x4e>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	371c      	adds	r7, #28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
	...

08001c34 <User_PS2_Control>:
BeepCommand_t beepCmdPS2 = {0};
//char buff[20] = {'\0'}; //Debug
// Function function: PS2 control car

void User_PS2_Control(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	//If the handle is not connected, i.e. 4 255
	PS2_LX = PS2_AnologData(PSS_LX);
 8001c38:	2007      	movs	r0, #7
 8001c3a:	f000 fb25 	bl	8002288 <PS2_AnologData>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b8c      	ldr	r3, [pc, #560]	@ (8001e74 <User_PS2_Control+0x240>)
 8001c44:	601a      	str	r2, [r3, #0]
	PS2_LY = PS2_AnologData(PSS_LY);
 8001c46:	2008      	movs	r0, #8
 8001c48:	f000 fb1e 	bl	8002288 <PS2_AnologData>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b89      	ldr	r3, [pc, #548]	@ (8001e78 <User_PS2_Control+0x244>)
 8001c52:	601a      	str	r2, [r3, #0]
	PS2_RX = PS2_AnologData(PSS_RX);
 8001c54:	2005      	movs	r0, #5
 8001c56:	f000 fb17 	bl	8002288 <PS2_AnologData>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b87      	ldr	r3, [pc, #540]	@ (8001e7c <User_PS2_Control+0x248>)
 8001c60:	601a      	str	r2, [r3, #0]
	PS2_RY = PS2_AnologData(PSS_RY);
 8001c62:	2006      	movs	r0, #6
 8001c64:	f000 fb10 	bl	8002288 <PS2_AnologData>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b84      	ldr	r3, [pc, #528]	@ (8001e80 <User_PS2_Control+0x24c>)
 8001c6e:	601a      	str	r2, [r3, #0]
	PS2_KEY = PS2_DataKey(); // To only one key at the time but use Handkey to do multi-key
 8001c70:	f000 fad0 	bl	8002214 <PS2_DataKey>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b82      	ldr	r3, [pc, #520]	@ (8001e84 <User_PS2_Control+0x250>)
 8001c7a:	601a      	str	r2, [r3, #0]


	// The handle is not communicating
	if ((PS2_LX == 255) && (PS2_LY == 255) && (PS2_RX == 255) && (PS2_RY == 255))
 8001c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8001e74 <User_PS2_Control+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2bff      	cmp	r3, #255	@ 0xff
 8001c82:	d110      	bne.n	8001ca6 <User_PS2_Control+0x72>
 8001c84:	4b7c      	ldr	r3, [pc, #496]	@ (8001e78 <User_PS2_Control+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2bff      	cmp	r3, #255	@ 0xff
 8001c8a:	d10c      	bne.n	8001ca6 <User_PS2_Control+0x72>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e7c <User_PS2_Control+0x248>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2bff      	cmp	r3, #255	@ 0xff
 8001c92:	d108      	bne.n	8001ca6 <User_PS2_Control+0x72>
 8001c94:	4b7a      	ldr	r3, [pc, #488]	@ (8001e80 <User_PS2_Control+0x24c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2bff      	cmp	r3, #255	@ 0xff
 8001c9a:	d104      	bne.n	8001ca6 <User_PS2_Control+0x72>
	{
		Set_RGB(RGB_Max, white);
 8001c9c:	2106      	movs	r1, #6
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f000 fbe2 	bl	8002468 <Set_RGB>
		return;
 8001ca4:	e1dd      	b.n	8002062 <User_PS2_Control+0x42e>
	}
	else if ((PS2_LX == 0) && (PS2_LY == 0) && (PS2_RX == 0) && (PS2_RY == 0))
 8001ca6:	4b73      	ldr	r3, [pc, #460]	@ (8001e74 <User_PS2_Control+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d110      	bne.n	8001cd0 <User_PS2_Control+0x9c>
 8001cae:	4b72      	ldr	r3, [pc, #456]	@ (8001e78 <User_PS2_Control+0x244>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <User_PS2_Control+0x9c>
 8001cb6:	4b71      	ldr	r3, [pc, #452]	@ (8001e7c <User_PS2_Control+0x248>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d108      	bne.n	8001cd0 <User_PS2_Control+0x9c>
 8001cbe:	4b70      	ldr	r3, [pc, #448]	@ (8001e80 <User_PS2_Control+0x24c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <User_PS2_Control+0x9c>
	{
		Set_RGB(RGB_Max, white);
 8001cc6:	2106      	movs	r1, #6
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f000 fbcd 	bl	8002468 <Set_RGB>
		return;
 8001cce:	e1c8      	b.n	8002062 <User_PS2_Control+0x42e>
	}
	else if ((PS2_LX == 192) || (PS2_LY == 192) || (PS2_RX == 192) || (PS2_RY == 192)) // This is a misjudgment value, you can adjust it yourself then
 8001cd0:	4b68      	ldr	r3, [pc, #416]	@ (8001e74 <User_PS2_Control+0x240>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2bc0      	cmp	r3, #192	@ 0xc0
 8001cd6:	d00b      	beq.n	8001cf0 <User_PS2_Control+0xbc>
 8001cd8:	4b67      	ldr	r3, [pc, #412]	@ (8001e78 <User_PS2_Control+0x244>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2bc0      	cmp	r3, #192	@ 0xc0
 8001cde:	d007      	beq.n	8001cf0 <User_PS2_Control+0xbc>
 8001ce0:	4b66      	ldr	r3, [pc, #408]	@ (8001e7c <User_PS2_Control+0x248>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ce6:	d003      	beq.n	8001cf0 <User_PS2_Control+0xbc>
 8001ce8:	4b65      	ldr	r3, [pc, #404]	@ (8001e80 <User_PS2_Control+0x24c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2bc0      	cmp	r3, #192	@ 0xc0
 8001cee:	d104      	bne.n	8001cfa <User_PS2_Control+0xc6>
	{
		Set_RGB(RGB_Max, white);
 8001cf0:	2106      	movs	r1, #6
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 fbb8 	bl	8002468 <Set_RGB>
		return;
 8001cf8:	e1b3      	b.n	8002062 <User_PS2_Control+0x42e>
	 * R2     : Forward
	 * L1     : Spin
	 * L2     : Backward
	 */

	motorCmd.joystickX = PS2_LX;
 8001cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001e74 <User_PS2_Control+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	4b61      	ldr	r3, [pc, #388]	@ (8001e88 <User_PS2_Control+0x254>)
 8001d02:	801a      	strh	r2, [r3, #0]
	motorCmd.R1_pressed = ((Handkey & (1 << (MASK[PSB_R1 - 1]-1))) == 0);
 8001d04:	4b61      	ldr	r3, [pc, #388]	@ (8001e8c <User_PS2_Control+0x258>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b61      	ldr	r3, [pc, #388]	@ (8001e90 <User_PS2_Control+0x25c>)
 8001d0c:	8adb      	ldrh	r3, [r3, #22]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	fa42 f303 	asr.w	r3, r2, r3
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b58      	ldr	r3, [pc, #352]	@ (8001e88 <User_PS2_Control+0x254>)
 8001d26:	70da      	strb	r2, [r3, #3]
	motorCmd.R2_pressed = ((Handkey & (1 << (MASK[PSB_R2 - 1]-1))) == 0);
 8001d28:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <User_PS2_Control+0x258>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b58      	ldr	r3, [pc, #352]	@ (8001e90 <User_PS2_Control+0x25c>)
 8001d30:	8a5b      	ldrh	r3, [r3, #18]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	fa42 f303 	asr.w	r3, r2, r3
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b4f      	ldr	r3, [pc, #316]	@ (8001e88 <User_PS2_Control+0x254>)
 8001d4a:	709a      	strb	r2, [r3, #2]
	motorCmd.L1_pressed = ((Handkey & (1 << (MASK[PSB_L1 - 1]-1))) == 0);
 8001d4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e8c <User_PS2_Control+0x258>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b4f      	ldr	r3, [pc, #316]	@ (8001e90 <User_PS2_Control+0x25c>)
 8001d54:	8a9b      	ldrh	r3, [r3, #20]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	fa42 f303 	asr.w	r3, r2, r3
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b46      	ldr	r3, [pc, #280]	@ (8001e88 <User_PS2_Control+0x254>)
 8001d6e:	715a      	strb	r2, [r3, #5]
	motorCmd.L2_pressed = ((Handkey & (1 << (MASK[PSB_L2 - 1]-1))) == 0);
 8001d70:	4b46      	ldr	r3, [pc, #280]	@ (8001e8c <User_PS2_Control+0x258>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b46      	ldr	r3, [pc, #280]	@ (8001e90 <User_PS2_Control+0x25c>)
 8001d78:	8a1b      	ldrh	r3, [r3, #16]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	fa42 f303 	asr.w	r3, r2, r3
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <User_PS2_Control+0x254>)
 8001d92:	711a      	strb	r2, [r3, #4]
	xQueueSend(myQueue_controlMotor, &motorCmd, 0);
 8001d94:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <User_PS2_Control+0x260>)
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	493a      	ldr	r1, [pc, #232]	@ (8001e88 <User_PS2_Control+0x254>)
 8001d9e:	f007 fa1b 	bl	80091d8 <xQueueGenericSend>

	if (PS2_RX < 125 || PS2_RX > 150){
 8001da2:	4b36      	ldr	r3, [pc, #216]	@ (8001e7c <User_PS2_Control+0x248>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b7c      	cmp	r3, #124	@ 0x7c
 8001da8:	dd03      	ble.n	8001db2 <User_PS2_Control+0x17e>
 8001daa:	4b34      	ldr	r3, [pc, #208]	@ (8001e7c <User_PS2_Control+0x248>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b96      	cmp	r3, #150	@ 0x96
 8001db0:	dd08      	ble.n	8001dc4 <User_PS2_Control+0x190>
		xTaskNotify(myTask_ServoHandle, PS2_RX, eSetValueWithOverwrite);
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <User_PS2_Control+0x264>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	4b31      	ldr	r3, [pc, #196]	@ (8001e7c <User_PS2_Control+0x248>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	f008 fc1e 	bl	800a600 <xTaskGenericNotify>
	}

	// Klaxon on green button
	if ((((Handkey & (1 << (MASK[PSB_GREEN-1] - 1))) == 0) && (Beep_Trigger_State_PS2 == 0) ) ||
 8001dc4:	4b31      	ldr	r3, [pc, #196]	@ (8001e8c <User_PS2_Control+0x258>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <User_PS2_Control+0x25c>)
 8001dcc:	8b1b      	ldrh	r3, [r3, #24]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	fa42 f303 	asr.w	r3, r2, r3
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d104      	bne.n	8001de6 <User_PS2_Control+0x1b2>
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <User_PS2_Control+0x268>)
 8001dde:	f993 3000 	ldrsb.w	r3, [r3]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d010      	beq.n	8001e08 <User_PS2_Control+0x1d4>
					(((Handkey & (1 << (MASK[PSB_GREEN-1] - 1))) != 0) && (Beep_Trigger_State_PS2 == 1)))
 8001de6:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <User_PS2_Control+0x258>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b28      	ldr	r3, [pc, #160]	@ (8001e90 <User_PS2_Control+0x25c>)
 8001dee:	8b1b      	ldrh	r3, [r3, #24]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	fa42 f303 	asr.w	r3, r2, r3
 8001df6:	f003 0301 	and.w	r3, r3, #1
	if ((((Handkey & (1 << (MASK[PSB_GREEN-1] - 1))) == 0) && (Beep_Trigger_State_PS2 == 0) ) ||
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <User_PS2_Control+0x1f8>
					(((Handkey & (1 << (MASK[PSB_GREEN-1] - 1))) != 0) && (Beep_Trigger_State_PS2 == 1)))
 8001dfe:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <User_PS2_Control+0x268>)
 8001e00:	f993 3000 	ldrsb.w	r3, [r3]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d111      	bne.n	8001e2c <User_PS2_Control+0x1f8>
	{
		xQueueSend(myQueue_controlMotor, &beepCmdPS2, 0);
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <User_PS2_Control+0x260>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4923      	ldr	r1, [pc, #140]	@ (8001ea0 <User_PS2_Control+0x26c>)
 8001e12:	f007 f9e1 	bl	80091d8 <xQueueGenericSend>
		Beep_Trigger_State_PS2 = !Beep_Trigger_State_PS2;
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <User_PS2_Control+0x268>)
 8001e18:	f993 3000 	ldrsb.w	r3, [r3]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	b25a      	sxtb	r2, r3
 8001e28:	4b1c      	ldr	r3, [pc, #112]	@ (8001e9c <User_PS2_Control+0x268>)
 8001e2a:	701a      	strb	r2, [r3, #0]
	}

	// Get Distance on blue button
	if ((((Handkey & (1 << (MASK[PSB_BLUE-1] - 1))) == 0) && (Dist_Trigger_State_PS2 == 0) )  //Push Button
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <User_PS2_Control+0x258>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <User_PS2_Control+0x25c>)
 8001e34:	8b9b      	ldrh	r3, [r3, #28]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	fa42 f303 	asr.w	r3, r2, r3
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d133      	bne.n	8001eac <User_PS2_Control+0x278>
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <User_PS2_Control+0x270>)
 8001e46:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d12e      	bne.n	8001eac <User_PS2_Control+0x278>
					)
	{
		xTaskNotify(myTask_USRanginHandle, 0, eNoAction);
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <User_PS2_Control+0x274>)
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	f008 fbd2 	bl	800a600 <xTaskGenericNotify>
		Dist_Trigger_State_PS2 = !Dist_Trigger_State_PS2;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <User_PS2_Control+0x270>)
 8001e5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	b25a      	sxtb	r2, r3
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <User_PS2_Control+0x270>)
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e037      	b.n	8001ee4 <User_PS2_Control+0x2b0>
 8001e74:	20000464 	.word	0x20000464
 8001e78:	20000468 	.word	0x20000468
 8001e7c:	2000046c 	.word	0x2000046c
 8001e80:	20000470 	.word	0x20000470
 8001e84:	20000474 	.word	0x20000474
 8001e88:	2000048c 	.word	0x2000048c
 8001e8c:	20000496 	.word	0x20000496
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	200004e8 	.word	0x200004e8
 8001e98:	200004e0 	.word	0x200004e0
 8001e9c:	20000488 	.word	0x20000488
 8001ea0:	20000494 	.word	0x20000494
 8001ea4:	20000489 	.word	0x20000489
 8001ea8:	200004d0 	.word	0x200004d0
	}
	else if ((((Handkey & (1 << (MASK[PSB_BLUE-1] - 1))) != 0) && (Dist_Trigger_State_PS2 == 1))){ // Release Button
 8001eac:	4b6d      	ldr	r3, [pc, #436]	@ (8002064 <User_PS2_Control+0x430>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <User_PS2_Control+0x434>)
 8001eb4:	8b9b      	ldrh	r3, [r3, #28]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	fa42 f303 	asr.w	r3, r2, r3
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00f      	beq.n	8001ee4 <User_PS2_Control+0x2b0>
 8001ec4:	4b69      	ldr	r3, [pc, #420]	@ (800206c <User_PS2_Control+0x438>)
 8001ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10a      	bne.n	8001ee4 <User_PS2_Control+0x2b0>
		Dist_Trigger_State_PS2 = !Dist_Trigger_State_PS2;
 8001ece:	4b67      	ldr	r3, [pc, #412]	@ (800206c <User_PS2_Control+0x438>)
 8001ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	b25a      	sxtb	r2, r3
 8001ee0:	4b62      	ldr	r3, [pc, #392]	@ (800206c <User_PS2_Control+0x438>)
 8001ee2:	701a      	strb	r2, [r3, #0]
	}
	// Temperature on pink button
	if ((((Handkey & (1 << (MASK[PSB_PINK-1] - 1))) == 0) && (Temp_Trigger_State_PS2 == 0) )  //Push Button
 8001ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8002064 <User_PS2_Control+0x430>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <User_PS2_Control+0x434>)
 8001eec:	8bdb      	ldrh	r3, [r3, #30]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	fa42 f303 	asr.w	r3, r2, r3
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d117      	bne.n	8001f2c <User_PS2_Control+0x2f8>
 8001efc:	4b5c      	ldr	r3, [pc, #368]	@ (8002070 <User_PS2_Control+0x43c>)
 8001efe:	f993 3000 	ldrsb.w	r3, [r3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d112      	bne.n	8001f2c <User_PS2_Control+0x2f8>
					)
	{
		xTaskNotify(myTask_TempHandle, 0, eNoAction);
 8001f06:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <User_PS2_Control+0x440>)
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f008 fb76 	bl	800a600 <xTaskGenericNotify>
		Temp_Trigger_State_PS2 = !Temp_Trigger_State_PS2;
 8001f14:	4b56      	ldr	r3, [pc, #344]	@ (8002070 <User_PS2_Control+0x43c>)
 8001f16:	f993 3000 	ldrsb.w	r3, [r3]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bf0c      	ite	eq
 8001f1e:	2301      	moveq	r3, #1
 8001f20:	2300      	movne	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	b25a      	sxtb	r2, r3
 8001f26:	4b52      	ldr	r3, [pc, #328]	@ (8002070 <User_PS2_Control+0x43c>)
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	e01b      	b.n	8001f64 <User_PS2_Control+0x330>
	}
	else if ((((Handkey & (1 << (MASK[PSB_PINK-1] - 1))) != 0) && (Temp_Trigger_State_PS2 == 1))){ // Release Button
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002064 <User_PS2_Control+0x430>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b4d      	ldr	r3, [pc, #308]	@ (8002068 <User_PS2_Control+0x434>)
 8001f34:	8bdb      	ldrh	r3, [r3, #30]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	fa42 f303 	asr.w	r3, r2, r3
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00f      	beq.n	8001f64 <User_PS2_Control+0x330>
 8001f44:	4b4a      	ldr	r3, [pc, #296]	@ (8002070 <User_PS2_Control+0x43c>)
 8001f46:	f993 3000 	ldrsb.w	r3, [r3]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10a      	bne.n	8001f64 <User_PS2_Control+0x330>
		Temp_Trigger_State_PS2 = !Temp_Trigger_State_PS2;
 8001f4e:	4b48      	ldr	r3, [pc, #288]	@ (8002070 <User_PS2_Control+0x43c>)
 8001f50:	f993 3000 	ldrsb.w	r3, [r3]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	b25a      	sxtb	r2, r3
 8001f60:	4b43      	ldr	r3, [pc, #268]	@ (8002070 <User_PS2_Control+0x43c>)
 8001f62:	701a      	strb	r2, [r3, #0]
	}


	// Need to be fix, don't work if multi key push
	switch (PS2_KEY) //One key at the time
 8001f64:	4b44      	ldr	r3, [pc, #272]	@ (8002078 <User_PS2_Control+0x444>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3b05      	subs	r3, #5
 8001f6a:	2b0b      	cmp	r3, #11
 8001f6c:	d865      	bhi.n	800203a <User_PS2_Control+0x406>
 8001f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <User_PS2_Control+0x340>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001fa5 	.word	0x08001fa5
 8001f78:	08001fc3 	.word	0x08001fc3
 8001f7c:	08001fe1 	.word	0x08001fe1
 8001f80:	08001fff 	.word	0x08001fff
 8001f84:	0800203b 	.word	0x0800203b
 8001f88:	0800203b 	.word	0x0800203b
 8001f8c:	0800203b 	.word	0x0800203b
 8001f90:	0800203b 	.word	0x0800203b
 8001f94:	0800203b 	.word	0x0800203b
 8001f98:	08002031 	.word	0x08002031
 8001f9c:	0800201d 	.word	0x0800201d
 8001fa0:	08002027 	.word	0x08002027
	{
	case PSB_PAD_UP:
		if (State_PSB_PAD_UP == 0){
 8001fa4:	4b35      	ldr	r3, [pc, #212]	@ (800207c <User_PS2_Control+0x448>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d153      	bne.n	8002054 <User_PS2_Control+0x420>
			xTaskNotify(myTask_OLEDHandle, PSB_PAD_UP, eSetValueWithOverwrite);
 8001fac:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <User_PS2_Control+0x44c>)
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	f008 fb23 	bl	800a600 <xTaskGenericNotify>
			State_PSB_PAD_UP = 1;    // Forces you to release the button
 8001fba:	4b30      	ldr	r3, [pc, #192]	@ (800207c <User_PS2_Control+0x448>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
		}
		break;
 8001fc0:	e048      	b.n	8002054 <User_PS2_Control+0x420>
	case PSB_PAD_RIGHT:
		if (State_PSB_PAD_RIGHT == 0){
 8001fc2:	4b30      	ldr	r3, [pc, #192]	@ (8002084 <User_PS2_Control+0x450>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d146      	bne.n	8002058 <User_PS2_Control+0x424>
			xTaskNotify(myTask_OLEDHandle, PSB_PAD_RIGHT, eSetValueWithOverwrite);
 8001fca:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <User_PS2_Control+0x44c>)
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	2106      	movs	r1, #6
 8001fd4:	f008 fb14 	bl	800a600 <xTaskGenericNotify>
			State_PSB_PAD_RIGHT = 1; // Forces you to release the button
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <User_PS2_Control+0x450>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
		}
		break;
 8001fde:	e03b      	b.n	8002058 <User_PS2_Control+0x424>
	case PSB_PAD_DOWN:
		if (State_PSB_PAD_DOWN == 0){
 8001fe0:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <User_PS2_Control+0x454>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d139      	bne.n	800205c <User_PS2_Control+0x428>
			xTaskNotify(myTask_OLEDHandle, PSB_PAD_DOWN, eSetValueWithOverwrite);
 8001fe8:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <User_PS2_Control+0x44c>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	2203      	movs	r2, #3
 8001ff0:	2107      	movs	r1, #7
 8001ff2:	f008 fb05 	bl	800a600 <xTaskGenericNotify>
			State_PSB_PAD_DOWN = 1;  // Forces you to release the button
 8001ff6:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <User_PS2_Control+0x454>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
		}
		break;
 8001ffc:	e02e      	b.n	800205c <User_PS2_Control+0x428>
	case PSB_PAD_LEFT:
		if (State_PSB_PAD_LEFT == 0){
 8001ffe:	4b23      	ldr	r3, [pc, #140]	@ (800208c <User_PS2_Control+0x458>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d12c      	bne.n	8002060 <User_PS2_Control+0x42c>
			xTaskNotify(myTask_OLEDHandle, PSB_PAD_LEFT, eSetValueWithOverwrite);
 8002006:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <User_PS2_Control+0x44c>)
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	2203      	movs	r2, #3
 800200e:	2108      	movs	r1, #8
 8002010:	f008 faf6 	bl	800a600 <xTaskGenericNotify>
			State_PSB_PAD_LEFT = 1;  // Forces you to release the button
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <User_PS2_Control+0x458>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]
		}
		break;
 800201a:	e021      	b.n	8002060 <User_PS2_Control+0x42c>
	case PSB_BLUE:
		Set_RGB(RGB_R, blue);
 800201c:	2102      	movs	r1, #2
 800201e:	2001      	movs	r0, #1
 8002020:	f000 fa22 	bl	8002468 <Set_RGB>
		break;
 8002024:	e01d      	b.n	8002062 <User_PS2_Control+0x42e>
	case PSB_PINK:
		Set_RGB(RGB_L, purple);
 8002026:	2104      	movs	r1, #4
 8002028:	2002      	movs	r0, #2
 800202a:	f000 fa1d 	bl	8002468 <Set_RGB>
		break;
 800202e:	e018      	b.n	8002062 <User_PS2_Control+0x42e>
	case PSB_RED:
		Set_RGB(RGB_Max, red);
 8002030:	2100      	movs	r1, #0
 8002032:	2003      	movs	r0, #3
 8002034:	f000 fa18 	bl	8002468 <Set_RGB>
		break;
 8002038:	e013      	b.n	8002062 <User_PS2_Control+0x42e>
	default:
		State_PSB_PAD_UP = 0;     // Forces you to release the button
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <User_PS2_Control+0x448>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
		State_PSB_PAD_DOWN = 0;   // Forces you to release the button
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <User_PS2_Control+0x454>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
		State_PSB_PAD_RIGHT = 0;  // Forces you to release the button
 8002046:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <User_PS2_Control+0x450>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
		State_PSB_PAD_LEFT = 0;   // Forces you to release the button
 800204c:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <User_PS2_Control+0x458>)
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
		break;
 8002052:	e006      	b.n	8002062 <User_PS2_Control+0x42e>
		break;
 8002054:	bf00      	nop
 8002056:	e004      	b.n	8002062 <User_PS2_Control+0x42e>
		break;
 8002058:	bf00      	nop
 800205a:	e002      	b.n	8002062 <User_PS2_Control+0x42e>
		break;
 800205c:	bf00      	nop
 800205e:	e000      	b.n	8002062 <User_PS2_Control+0x42e>
		break;
 8002060:	bf00      	nop
	}

	//HAL_Delay(20); // Replace with vTaskDelay(pdMS_TO_TICKS(20)); in the task, enables anti-bounce and staying connected
}
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000496 	.word	0x20000496
 8002068:	2000000c 	.word	0x2000000c
 800206c:	20000489 	.word	0x20000489
 8002070:	2000048a 	.word	0x2000048a
 8002074:	200004e4 	.word	0x200004e4
 8002078:	20000474 	.word	0x20000474
 800207c:	20000478 	.word	0x20000478
 8002080:	200004d4 	.word	0x200004d4
 8002084:	20000480 	.word	0x20000480
 8002088:	2000047c 	.word	0x2000047c
 800208c:	20000484 	.word	0x20000484

08002090 <PS2_Cmd>:
Function function: Send commands to the handle
Entry parameter: CMD instruction
Return value: None
**************************************************************************/
void PS2_Cmd(uint8_t CMD)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
	volatile uint16_t ref = 0x01;
 800209a:	2301      	movs	r3, #1
 800209c:	81fb      	strh	r3, [r7, #14]
	Data[1] = 0;
 800209e:	4b26      	ldr	r3, [pc, #152]	@ (8002138 <PS2_Cmd+0xa8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	705a      	strb	r2, [r3, #1]
	for (ref = 0x01; ref < 0x0100; ref <<= 1)
 80020a4:	2301      	movs	r3, #1
 80020a6:	81fb      	strh	r3, [r7, #14]
 80020a8:	e03b      	b.n	8002122 <PS2_Cmd+0x92>
	{
		if (ref & CMD)
 80020aa:	89fb      	ldrh	r3, [r7, #14]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <PS2_Cmd+0x34>
		{
			DO_H; // Output one control bit
 80020b8:	2201      	movs	r2, #1
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	481f      	ldr	r0, [pc, #124]	@ (800213c <PS2_Cmd+0xac>)
 80020be:	f004 fa5c 	bl	800657a <HAL_GPIO_WritePin>
 80020c2:	e004      	b.n	80020ce <PS2_Cmd+0x3e>
		}
		else
			DO_L;
 80020c4:	2200      	movs	r2, #0
 80020c6:	2180      	movs	r1, #128	@ 0x80
 80020c8:	481c      	ldr	r0, [pc, #112]	@ (800213c <PS2_Cmd+0xac>)
 80020ca:	f004 fa56 	bl	800657a <HAL_GPIO_WritePin>
		CLK_H; // Clock up
 80020ce:	2201      	movs	r2, #1
 80020d0:	2120      	movs	r1, #32
 80020d2:	481a      	ldr	r0, [pc, #104]	@ (800213c <PS2_Cmd+0xac>)
 80020d4:	f004 fa51 	bl	800657a <HAL_GPIO_WritePin>
		DELAY_TIME;
 80020d8:	2005      	movs	r0, #5
 80020da:	f000 fdb7 	bl	8002c4c <delay_us>
		CLK_L;
 80020de:	2200      	movs	r2, #0
 80020e0:	2120      	movs	r1, #32
 80020e2:	4816      	ldr	r0, [pc, #88]	@ (800213c <PS2_Cmd+0xac>)
 80020e4:	f004 fa49 	bl	800657a <HAL_GPIO_WritePin>
		DELAY_TIME;
 80020e8:	2005      	movs	r0, #5
 80020ea:	f000 fdaf 	bl	8002c4c <delay_us>
		CLK_H;
 80020ee:	2201      	movs	r2, #1
 80020f0:	2120      	movs	r1, #32
 80020f2:	4812      	ldr	r0, [pc, #72]	@ (800213c <PS2_Cmd+0xac>)
 80020f4:	f004 fa41 	bl	800657a <HAL_GPIO_WritePin>
		if (DI) // At high levels
 80020f8:	2140      	movs	r1, #64	@ 0x40
 80020fa:	4810      	ldr	r0, [pc, #64]	@ (800213c <PS2_Cmd+0xac>)
 80020fc:	f004 fa26 	bl	800654c <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <PS2_Cmd+0x88>
			Data[1] = ref | Data[1];
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <PS2_Cmd+0xa8>)
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	4313      	orrs	r3, r2
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <PS2_Cmd+0xa8>)
 8002116:	705a      	strb	r2, [r3, #1]
	for (ref = 0x01; ref < 0x0100; ref <<= 1)
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	b29b      	uxth	r3, r3
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	b29b      	uxth	r3, r3
 8002120:	81fb      	strh	r3, [r7, #14]
 8002122:	89fb      	ldrh	r3, [r7, #14]
 8002124:	b29b      	uxth	r3, r3
 8002126:	2bff      	cmp	r3, #255	@ 0xff
 8002128:	d9bf      	bls.n	80020aa <PS2_Cmd+0x1a>
	}
	delay_us(16);
 800212a:	2010      	movs	r0, #16
 800212c:	f000 fd8e 	bl	8002c4c <delay_us>
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000498 	.word	0x20000498
 800213c:	40010800 	.word	0x40010800

08002140 <PS2_ReadData>:
Function function: Read handle data
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ReadData(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	volatile uint8_t byte = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	71fb      	strb	r3, [r7, #7]
	volatile uint16_t ref = 0x01;
 800214a:	2301      	movs	r3, #1
 800214c:	80bb      	strh	r3, [r7, #4]
	CS_L;
 800214e:	2200      	movs	r2, #0
 8002150:	2110      	movs	r1, #16
 8002152:	482d      	ldr	r0, [pc, #180]	@ (8002208 <PS2_ReadData+0xc8>)
 8002154:	f004 fa11 	bl	800657a <HAL_GPIO_WritePin>
	PS2_Cmd(Comd[0]);				 // start command
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <PS2_ReadData+0xcc>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff97 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(Comd[1]);				 // request data
 8002162:	4b2a      	ldr	r3, [pc, #168]	@ (800220c <PS2_ReadData+0xcc>)
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff92 	bl	8002090 <PS2_Cmd>
	for (byte = 2; byte < 9; byte++) // Start accepting data
 800216c:	2302      	movs	r3, #2
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	e03d      	b.n	80021ee <PS2_ReadData+0xae>
	{
		for (ref = 0x01; ref < 0x100; ref <<= 1)
 8002172:	2301      	movs	r3, #1
 8002174:	80bb      	strh	r3, [r7, #4]
 8002176:	e02e      	b.n	80021d6 <PS2_ReadData+0x96>
		{
			CLK_H;
 8002178:	2201      	movs	r2, #1
 800217a:	2120      	movs	r1, #32
 800217c:	4822      	ldr	r0, [pc, #136]	@ (8002208 <PS2_ReadData+0xc8>)
 800217e:	f004 f9fc 	bl	800657a <HAL_GPIO_WritePin>
			DELAY_TIME;
 8002182:	2005      	movs	r0, #5
 8002184:	f000 fd62 	bl	8002c4c <delay_us>
			CLK_L;
 8002188:	2200      	movs	r2, #0
 800218a:	2120      	movs	r1, #32
 800218c:	481e      	ldr	r0, [pc, #120]	@ (8002208 <PS2_ReadData+0xc8>)
 800218e:	f004 f9f4 	bl	800657a <HAL_GPIO_WritePin>
			DELAY_TIME;
 8002192:	2005      	movs	r0, #5
 8002194:	f000 fd5a 	bl	8002c4c <delay_us>
			CLK_H;
 8002198:	2201      	movs	r2, #1
 800219a:	2120      	movs	r1, #32
 800219c:	481a      	ldr	r0, [pc, #104]	@ (8002208 <PS2_ReadData+0xc8>)
 800219e:	f004 f9ec 	bl	800657a <HAL_GPIO_WritePin>
			if (DI)
 80021a2:	2140      	movs	r1, #64	@ 0x40
 80021a4:	4818      	ldr	r0, [pc, #96]	@ (8002208 <PS2_ReadData+0xc8>)
 80021a6:	f004 f9d1 	bl	800654c <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <PS2_ReadData+0x8c>
				Data[byte] = ref | Data[byte];
 80021b0:	88bb      	ldrh	r3, [r7, #4]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <PS2_ReadData+0xd0>)
 80021be:	5c5b      	ldrb	r3, [r3, r1]
 80021c0:	79f9      	ldrb	r1, [r7, #7]
 80021c2:	b2c9      	uxtb	r1, r1
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <PS2_ReadData+0xd0>)
 80021ca:	545a      	strb	r2, [r3, r1]
		for (ref = 0x01; ref < 0x100; ref <<= 1)
 80021cc:	88bb      	ldrh	r3, [r7, #4]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	80bb      	strh	r3, [r7, #4]
 80021d6:	88bb      	ldrh	r3, [r7, #4]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2bff      	cmp	r3, #255	@ 0xff
 80021dc:	d9cc      	bls.n	8002178 <PS2_ReadData+0x38>
		}
		delay_us(16);
 80021de:	2010      	movs	r0, #16
 80021e0:	f000 fd34 	bl	8002c4c <delay_us>
	for (byte = 2; byte < 9; byte++) // Start accepting data
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d9bd      	bls.n	8002172 <PS2_ReadData+0x32>
	}
	CS_H;
 80021f6:	2201      	movs	r2, #1
 80021f8:	2110      	movs	r1, #16
 80021fa:	4803      	ldr	r0, [pc, #12]	@ (8002208 <PS2_ReadData+0xc8>)
 80021fc:	f004 f9bd 	bl	800657a <HAL_GPIO_WritePin>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40010800 	.word	0x40010800
 800220c:	20000008 	.word	0x20000008
 8002210:	20000498 	.word	0x20000498

08002214 <PS2_DataKey>:
Entry parameter: CMD instruction
Return value: None
//0 when only one button is pressed, 1 when not pressed
**************************************************************************/
uint8_t PS2_DataKey()
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
	uint8_t index;
	PS2_ClearData();
 800221a:	f000 f845 	bl	80022a8 <PS2_ClearData>
	PS2_ReadData();
 800221e:	f7ff ff8f 	bl	8002140 <PS2_ReadData>
	Handkey = (Data[4] << 8) | Data[3]; // These are 16 buttons that are pressed as 0 and not pressed as 1
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <PS2_DataKey+0x68>)
 8002224:	791b      	ldrb	r3, [r3, #4]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	b21a      	sxth	r2, r3
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <PS2_DataKey+0x68>)
 800222c:	78db      	ldrb	r3, [r3, #3]
 800222e:	b21b      	sxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b21b      	sxth	r3, r3
 8002234:	b29a      	uxth	r2, r3
 8002236:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <PS2_DataKey+0x6c>)
 8002238:	801a      	strh	r2, [r3, #0]
	for (index = 0; index < 16; index++)
 800223a:	2300      	movs	r3, #0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	e014      	b.n	800226a <PS2_DataKey+0x56>
	{
		if ((Handkey & (1 << (MASK[index] - 1))) == 0)
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <PS2_DataKey+0x6c>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4a0e      	ldr	r2, [pc, #56]	@ (8002284 <PS2_DataKey+0x70>)
 800224a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800224e:	3b01      	subs	r3, #1
 8002250:	fa41 f303 	asr.w	r3, r1, r3
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <PS2_DataKey+0x50>
			return index + 1;
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	3301      	adds	r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e006      	b.n	8002272 <PS2_DataKey+0x5e>
	for (index = 0; index < 16; index++)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	3301      	adds	r3, #1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d9e7      	bls.n	8002240 <PS2_DataKey+0x2c>
	}
	return 0; // No buttons pressed
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000498 	.word	0x20000498
 8002280:	20000496 	.word	0x20000496
 8002284:	2000000c 	.word	0x2000000c

08002288 <PS2_AnologData>:
Function function: Send commands to the handle
Entry parameters: Obtain an analog range of 0-256 for a joystick
Return value: None
**************************************************************************/
uint8_t PS2_AnologData(uint8_t button)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	return Data[button];
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4a03      	ldr	r2, [pc, #12]	@ (80022a4 <PS2_AnologData+0x1c>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000498 	.word	0x20000498

080022a8 <PS2_ClearData>:
// Clear data buffer
void PS2_ClearData()
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
	uint8_t a;
	for (a = 0; a < 9; a++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	e006      	b.n	80022c2 <PS2_ClearData+0x1a>
		Data[a] = 0x00;
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <PS2_ClearData+0x2c>)
 80022b8:	2100      	movs	r1, #0
 80022ba:	54d1      	strb	r1, [r2, r3]
	for (a = 0; a < 9; a++)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	3301      	adds	r3, #1
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d9f5      	bls.n	80022b4 <PS2_ClearData+0xc>
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000498 	.word	0x20000498

080022d8 <PS2_ShortPoll>:
Function function: short poll
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ShortPoll(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	CS_L;
 80022dc:	2200      	movs	r2, #0
 80022de:	2110      	movs	r1, #16
 80022e0:	480f      	ldr	r0, [pc, #60]	@ (8002320 <PS2_ShortPoll+0x48>)
 80022e2:	f004 f94a 	bl	800657a <HAL_GPIO_WritePin>
	delay_us(16);
 80022e6:	2010      	movs	r0, #16
 80022e8:	f000 fcb0 	bl	8002c4c <delay_us>
	PS2_Cmd(0x01);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7ff fecf 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x42);
 80022f2:	2042      	movs	r0, #66	@ 0x42
 80022f4:	f7ff fecc 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff fec9 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x00);
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fec6 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fec3 	bl	8002090 <PS2_Cmd>
	CS_H;
 800230a:	2201      	movs	r2, #1
 800230c:	2110      	movs	r1, #16
 800230e:	4804      	ldr	r0, [pc, #16]	@ (8002320 <PS2_ShortPoll+0x48>)
 8002310:	f004 f933 	bl	800657a <HAL_GPIO_WritePin>
	delay_us(16);
 8002314:	2010      	movs	r0, #16
 8002316:	f000 fc99 	bl	8002c4c <delay_us>
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40010800 	.word	0x40010800

08002324 <PS2_EnterConfing>:
Function Function: Enter Configuration
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_EnterConfing(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	CS_L;
 8002328:	2200      	movs	r2, #0
 800232a:	2110      	movs	r1, #16
 800232c:	4815      	ldr	r0, [pc, #84]	@ (8002384 <PS2_EnterConfing+0x60>)
 800232e:	f004 f924 	bl	800657a <HAL_GPIO_WritePin>
	delay_us(16);
 8002332:	2010      	movs	r0, #16
 8002334:	f000 fc8a 	bl	8002c4c <delay_us>
	PS2_Cmd(0x01);
 8002338:	2001      	movs	r0, #1
 800233a:	f7ff fea9 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x43);
 800233e:	2043      	movs	r0, #67	@ 0x43
 8002340:	f7ff fea6 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff fea3 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x01);
 800234a:	2001      	movs	r0, #1
 800234c:	f7ff fea0 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7ff fe9d 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fe9a 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7ff fe97 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fe94 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fe91 	bl	8002090 <PS2_Cmd>
	CS_H;
 800236e:	2201      	movs	r2, #1
 8002370:	2110      	movs	r1, #16
 8002372:	4804      	ldr	r0, [pc, #16]	@ (8002384 <PS2_EnterConfing+0x60>)
 8002374:	f004 f901 	bl	800657a <HAL_GPIO_WritePin>
	delay_us(16);
 8002378:	2010      	movs	r0, #16
 800237a:	f000 fc67 	bl	8002c4c <delay_us>
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40010800 	.word	0x40010800

08002388 <PS2_TurnOnAnalogMode>:
Function Function: Sending Mode Settings
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_TurnOnAnalogMode(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	CS_L;
 800238c:	2200      	movs	r2, #0
 800238e:	2110      	movs	r1, #16
 8002390:	4813      	ldr	r0, [pc, #76]	@ (80023e0 <PS2_TurnOnAnalogMode+0x58>)
 8002392:	f004 f8f2 	bl	800657a <HAL_GPIO_WritePin>
	PS2_Cmd(0x01);
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff fe7a 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x44);
 800239c:	2044      	movs	r0, #68	@ 0x44
 800239e:	f7ff fe77 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff fe74 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x01); // analog=0x01;digital=0x00  Software settings sending mode
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7ff fe71 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x03); // Ox03 latch setting, that is, the mode cannot be set by pressing the "MODE" button.
 80023ae:	2003      	movs	r0, #3
 80023b0:	f7ff fe6e 	bl	8002090 <PS2_Cmd>
				   // 0xEE does not lock software settings, and the mode can be set by pressing the "MODE" button.
	PS2_Cmd(0X00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7ff fe6b 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7ff fe68 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff fe65 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff fe62 	bl	8002090 <PS2_Cmd>
	CS_H;
 80023cc:	2201      	movs	r2, #1
 80023ce:	2110      	movs	r1, #16
 80023d0:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <PS2_TurnOnAnalogMode+0x58>)
 80023d2:	f004 f8d2 	bl	800657a <HAL_GPIO_WritePin>
	delay_us(16);
 80023d6:	2010      	movs	r0, #16
 80023d8:	f000 fc38 	bl	8002c4c <delay_us>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40010800 	.word	0x40010800

080023e4 <PS2_ExitConfing>:
Function function: Complete and save configuration
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ExitConfing(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	CS_L;
 80023e8:	2200      	movs	r2, #0
 80023ea:	2110      	movs	r1, #16
 80023ec:	4815      	ldr	r0, [pc, #84]	@ (8002444 <PS2_ExitConfing+0x60>)
 80023ee:	f004 f8c4 	bl	800657a <HAL_GPIO_WritePin>
	delay_us(16);
 80023f2:	2010      	movs	r0, #16
 80023f4:	f000 fc2a 	bl	8002c4c <delay_us>
	PS2_Cmd(0x01);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7ff fe49 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x43);
 80023fe:	2043      	movs	r0, #67	@ 0x43
 8002400:	f7ff fe46 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0X00);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff fe43 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x00);
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff fe40 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8002410:	205a      	movs	r0, #90	@ 0x5a
 8002412:	f7ff fe3d 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8002416:	205a      	movs	r0, #90	@ 0x5a
 8002418:	f7ff fe3a 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x5A);
 800241c:	205a      	movs	r0, #90	@ 0x5a
 800241e:	f7ff fe37 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8002422:	205a      	movs	r0, #90	@ 0x5a
 8002424:	f7ff fe34 	bl	8002090 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8002428:	205a      	movs	r0, #90	@ 0x5a
 800242a:	f7ff fe31 	bl	8002090 <PS2_Cmd>
	CS_H;
 800242e:	2201      	movs	r2, #1
 8002430:	2110      	movs	r1, #16
 8002432:	4804      	ldr	r0, [pc, #16]	@ (8002444 <PS2_ExitConfing+0x60>)
 8002434:	f004 f8a1 	bl	800657a <HAL_GPIO_WritePin>
	delay_us(16);
 8002438:	2010      	movs	r0, #16
 800243a:	f000 fc07 	bl	8002c4c <delay_us>
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40010800 	.word	0x40010800

08002448 <PS2_SetInit>:
Function Function: Handle Configuration Initialization
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_SetInit(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	PS2_ShortPoll();
 800244c:	f7ff ff44 	bl	80022d8 <PS2_ShortPoll>
	PS2_ShortPoll();
 8002450:	f7ff ff42 	bl	80022d8 <PS2_ShortPoll>
	PS2_ShortPoll();
 8002454:	f7ff ff40 	bl	80022d8 <PS2_ShortPoll>
	PS2_EnterConfing();		// Entering configuration mode
 8002458:	f7ff ff64 	bl	8002324 <PS2_EnterConfing>
	PS2_TurnOnAnalogMode(); // Configure the "Traffic Light" mode and choose whether to save it
 800245c:	f7ff ff94 	bl	8002388 <PS2_TurnOnAnalogMode>
	// PS2_VibrationMode();	//Enable vibration mode
	PS2_ExitConfing(); // Complete and save the configuration
 8002460:	f7ff ffc0 	bl	80023e4 <PS2_ExitConfing>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <Set_RGB>:
 * Turn on the left or right searchlight and display the selected color
 * Select the RGB searchlights that need to be turned on on the left and right sides
 * Choose the color you want to display
 * */
void Set_RGB(car_RGB light, RGB_Color color)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	460a      	mov	r2, r1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	4613      	mov	r3, r2
 8002476:	71bb      	strb	r3, [r7, #6]
	uint8_t Light_RGB = light;
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	73fb      	strb	r3, [r7, #15]
	switch (Light_RGB)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d010      	beq.n	80024a4 <Set_RGB+0x3c>
 8002482:	2b03      	cmp	r3, #3
 8002484:	dc17      	bgt.n	80024b6 <Set_RGB+0x4e>
 8002486:	2b01      	cmp	r3, #1
 8002488:	d002      	beq.n	8002490 <Set_RGB+0x28>
 800248a:	2b02      	cmp	r3, #2
 800248c:	d005      	beq.n	800249a <Set_RGB+0x32>
 800248e:	e012      	b.n	80024b6 <Set_RGB+0x4e>
	{
	case RGB_R:
		Set_color_R(color);
 8002490:	79bb      	ldrb	r3, [r7, #6]
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f836 	bl	8002504 <Set_color_R>
		break;
 8002498:	e02c      	b.n	80024f4 <Set_RGB+0x8c>
	case RGB_L:
		Set_color_L(color);
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f8d1 	bl	8002644 <Set_color_L>
		break;
 80024a2:	e027      	b.n	80024f4 <Set_RGB+0x8c>
	case RGB_Max:
		Set_color_R(color);
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f82c 	bl	8002504 <Set_color_R>
		Set_color_L(color);
 80024ac:	79bb      	ldrb	r3, [r7, #6]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f8c8 	bl	8002644 <Set_color_L>
		break;
 80024b4:	e01e      	b.n	80024f4 <Set_RGB+0x8c>
	default:
		RGB_OFF_ALL;
 80024b6:	2200      	movs	r2, #0
 80024b8:	2104      	movs	r1, #4
 80024ba:	4810      	ldr	r0, [pc, #64]	@ (80024fc <Set_RGB+0x94>)
 80024bc:	f004 f85d 	bl	800657a <HAL_GPIO_WritePin>
 80024c0:	2200      	movs	r2, #0
 80024c2:	2108      	movs	r1, #8
 80024c4:	480d      	ldr	r0, [pc, #52]	@ (80024fc <Set_RGB+0x94>)
 80024c6:	f004 f858 	bl	800657a <HAL_GPIO_WritePin>
 80024ca:	2200      	movs	r2, #0
 80024cc:	2110      	movs	r1, #16
 80024ce:	480b      	ldr	r0, [pc, #44]	@ (80024fc <Set_RGB+0x94>)
 80024d0:	f004 f853 	bl	800657a <HAL_GPIO_WritePin>
 80024d4:	2200      	movs	r2, #0
 80024d6:	2102      	movs	r1, #2
 80024d8:	4809      	ldr	r0, [pc, #36]	@ (8002500 <Set_RGB+0x98>)
 80024da:	f004 f84e 	bl	800657a <HAL_GPIO_WritePin>
 80024de:	2200      	movs	r2, #0
 80024e0:	2180      	movs	r1, #128	@ 0x80
 80024e2:	4806      	ldr	r0, [pc, #24]	@ (80024fc <Set_RGB+0x94>)
 80024e4:	f004 f849 	bl	800657a <HAL_GPIO_WritePin>
 80024e8:	2200      	movs	r2, #0
 80024ea:	2104      	movs	r1, #4
 80024ec:	4804      	ldr	r0, [pc, #16]	@ (8002500 <Set_RGB+0x98>)
 80024ee:	f004 f844 	bl	800657a <HAL_GPIO_WritePin>
	}
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40011800 	.word	0x40011800
 8002500:	40012000 	.word	0x40012000

08002504 <Set_color_R>:
/*
 * Turn on the searchlight on the right and show the color
 * Select the color to be displayed
 * */
void Set_color_R(RGB_Color color)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
	switch (color)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b06      	cmp	r3, #6
 8002512:	f200 8081 	bhi.w	8002618 <Set_color_R+0x114>
 8002516:	a201      	add	r2, pc, #4	@ (adr r2, 800251c <Set_color_R+0x18>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	08002539 	.word	0x08002539
 8002520:	08002559 	.word	0x08002559
 8002524:	08002579 	.word	0x08002579
 8002528:	08002599 	.word	0x08002599
 800252c:	080025b9 	.word	0x080025b9
 8002530:	080025d9 	.word	0x080025d9
 8002534:	080025f9 	.word	0x080025f9
	{
	case red:
		RRGB_SET(set, reset, reset);
 8002538:	2201      	movs	r2, #1
 800253a:	2104      	movs	r1, #4
 800253c:	4840      	ldr	r0, [pc, #256]	@ (8002640 <Set_color_R+0x13c>)
 800253e:	f004 f81c 	bl	800657a <HAL_GPIO_WritePin>
 8002542:	2200      	movs	r2, #0
 8002544:	2108      	movs	r1, #8
 8002546:	483e      	ldr	r0, [pc, #248]	@ (8002640 <Set_color_R+0x13c>)
 8002548:	f004 f817 	bl	800657a <HAL_GPIO_WritePin>
 800254c:	2200      	movs	r2, #0
 800254e:	2110      	movs	r1, #16
 8002550:	483b      	ldr	r0, [pc, #236]	@ (8002640 <Set_color_R+0x13c>)
 8002552:	f004 f812 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002556:	e06f      	b.n	8002638 <Set_color_R+0x134>
	case green:
		RRGB_SET(reset, set, reset);
 8002558:	2200      	movs	r2, #0
 800255a:	2104      	movs	r1, #4
 800255c:	4838      	ldr	r0, [pc, #224]	@ (8002640 <Set_color_R+0x13c>)
 800255e:	f004 f80c 	bl	800657a <HAL_GPIO_WritePin>
 8002562:	2201      	movs	r2, #1
 8002564:	2108      	movs	r1, #8
 8002566:	4836      	ldr	r0, [pc, #216]	@ (8002640 <Set_color_R+0x13c>)
 8002568:	f004 f807 	bl	800657a <HAL_GPIO_WritePin>
 800256c:	2200      	movs	r2, #0
 800256e:	2110      	movs	r1, #16
 8002570:	4833      	ldr	r0, [pc, #204]	@ (8002640 <Set_color_R+0x13c>)
 8002572:	f004 f802 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002576:	e05f      	b.n	8002638 <Set_color_R+0x134>
	case blue:
		RRGB_SET(reset, reset, set);
 8002578:	2200      	movs	r2, #0
 800257a:	2104      	movs	r1, #4
 800257c:	4830      	ldr	r0, [pc, #192]	@ (8002640 <Set_color_R+0x13c>)
 800257e:	f003 fffc 	bl	800657a <HAL_GPIO_WritePin>
 8002582:	2200      	movs	r2, #0
 8002584:	2108      	movs	r1, #8
 8002586:	482e      	ldr	r0, [pc, #184]	@ (8002640 <Set_color_R+0x13c>)
 8002588:	f003 fff7 	bl	800657a <HAL_GPIO_WritePin>
 800258c:	2201      	movs	r2, #1
 800258e:	2110      	movs	r1, #16
 8002590:	482b      	ldr	r0, [pc, #172]	@ (8002640 <Set_color_R+0x13c>)
 8002592:	f003 fff2 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002596:	e04f      	b.n	8002638 <Set_color_R+0x134>
	case yellow:
		RRGB_SET(set, set, reset);
 8002598:	2201      	movs	r2, #1
 800259a:	2104      	movs	r1, #4
 800259c:	4828      	ldr	r0, [pc, #160]	@ (8002640 <Set_color_R+0x13c>)
 800259e:	f003 ffec 	bl	800657a <HAL_GPIO_WritePin>
 80025a2:	2201      	movs	r2, #1
 80025a4:	2108      	movs	r1, #8
 80025a6:	4826      	ldr	r0, [pc, #152]	@ (8002640 <Set_color_R+0x13c>)
 80025a8:	f003 ffe7 	bl	800657a <HAL_GPIO_WritePin>
 80025ac:	2200      	movs	r2, #0
 80025ae:	2110      	movs	r1, #16
 80025b0:	4823      	ldr	r0, [pc, #140]	@ (8002640 <Set_color_R+0x13c>)
 80025b2:	f003 ffe2 	bl	800657a <HAL_GPIO_WritePin>
		break;
 80025b6:	e03f      	b.n	8002638 <Set_color_R+0x134>
	case purple:
		RRGB_SET(set, reset, set);
 80025b8:	2201      	movs	r2, #1
 80025ba:	2104      	movs	r1, #4
 80025bc:	4820      	ldr	r0, [pc, #128]	@ (8002640 <Set_color_R+0x13c>)
 80025be:	f003 ffdc 	bl	800657a <HAL_GPIO_WritePin>
 80025c2:	2200      	movs	r2, #0
 80025c4:	2108      	movs	r1, #8
 80025c6:	481e      	ldr	r0, [pc, #120]	@ (8002640 <Set_color_R+0x13c>)
 80025c8:	f003 ffd7 	bl	800657a <HAL_GPIO_WritePin>
 80025cc:	2201      	movs	r2, #1
 80025ce:	2110      	movs	r1, #16
 80025d0:	481b      	ldr	r0, [pc, #108]	@ (8002640 <Set_color_R+0x13c>)
 80025d2:	f003 ffd2 	bl	800657a <HAL_GPIO_WritePin>
		break;
 80025d6:	e02f      	b.n	8002638 <Set_color_R+0x134>
	case lake:
		RRGB_SET(reset, set, set);
 80025d8:	2200      	movs	r2, #0
 80025da:	2104      	movs	r1, #4
 80025dc:	4818      	ldr	r0, [pc, #96]	@ (8002640 <Set_color_R+0x13c>)
 80025de:	f003 ffcc 	bl	800657a <HAL_GPIO_WritePin>
 80025e2:	2201      	movs	r2, #1
 80025e4:	2108      	movs	r1, #8
 80025e6:	4816      	ldr	r0, [pc, #88]	@ (8002640 <Set_color_R+0x13c>)
 80025e8:	f003 ffc7 	bl	800657a <HAL_GPIO_WritePin>
 80025ec:	2201      	movs	r2, #1
 80025ee:	2110      	movs	r1, #16
 80025f0:	4813      	ldr	r0, [pc, #76]	@ (8002640 <Set_color_R+0x13c>)
 80025f2:	f003 ffc2 	bl	800657a <HAL_GPIO_WritePin>
		break;
 80025f6:	e01f      	b.n	8002638 <Set_color_R+0x134>
	case white:
		RRGB_SET(set, set, set);
 80025f8:	2201      	movs	r2, #1
 80025fa:	2104      	movs	r1, #4
 80025fc:	4810      	ldr	r0, [pc, #64]	@ (8002640 <Set_color_R+0x13c>)
 80025fe:	f003 ffbc 	bl	800657a <HAL_GPIO_WritePin>
 8002602:	2201      	movs	r2, #1
 8002604:	2108      	movs	r1, #8
 8002606:	480e      	ldr	r0, [pc, #56]	@ (8002640 <Set_color_R+0x13c>)
 8002608:	f003 ffb7 	bl	800657a <HAL_GPIO_WritePin>
 800260c:	2201      	movs	r2, #1
 800260e:	2110      	movs	r1, #16
 8002610:	480b      	ldr	r0, [pc, #44]	@ (8002640 <Set_color_R+0x13c>)
 8002612:	f003 ffb2 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002616:	e00f      	b.n	8002638 <Set_color_R+0x134>
	default:
		RGB_OFF_R;
 8002618:	2200      	movs	r2, #0
 800261a:	2104      	movs	r1, #4
 800261c:	4808      	ldr	r0, [pc, #32]	@ (8002640 <Set_color_R+0x13c>)
 800261e:	f003 ffac 	bl	800657a <HAL_GPIO_WritePin>
 8002622:	2200      	movs	r2, #0
 8002624:	2108      	movs	r1, #8
 8002626:	4806      	ldr	r0, [pc, #24]	@ (8002640 <Set_color_R+0x13c>)
 8002628:	f003 ffa7 	bl	800657a <HAL_GPIO_WritePin>
 800262c:	2200      	movs	r2, #0
 800262e:	2110      	movs	r1, #16
 8002630:	4803      	ldr	r0, [pc, #12]	@ (8002640 <Set_color_R+0x13c>)
 8002632:	f003 ffa2 	bl	800657a <HAL_GPIO_WritePin>
	}
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40011800 	.word	0x40011800

08002644 <Set_color_L>:
/*
 * Turn on the left searchlight and show colors
 * Select the color to be displayed
 * */
void Set_color_L(RGB_Color color)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	switch (color)
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b06      	cmp	r3, #6
 8002652:	f200 8081 	bhi.w	8002758 <Set_color_L+0x114>
 8002656:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <Set_color_L+0x18>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	08002679 	.word	0x08002679
 8002660:	08002699 	.word	0x08002699
 8002664:	080026b9 	.word	0x080026b9
 8002668:	080026d9 	.word	0x080026d9
 800266c:	080026f9 	.word	0x080026f9
 8002670:	08002719 	.word	0x08002719
 8002674:	08002739 	.word	0x08002739
	{
	case red:
		LRGB_SET(set, reset, reset);
 8002678:	2201      	movs	r2, #1
 800267a:	2102      	movs	r1, #2
 800267c:	4840      	ldr	r0, [pc, #256]	@ (8002780 <Set_color_L+0x13c>)
 800267e:	f003 ff7c 	bl	800657a <HAL_GPIO_WritePin>
 8002682:	2200      	movs	r2, #0
 8002684:	2180      	movs	r1, #128	@ 0x80
 8002686:	483f      	ldr	r0, [pc, #252]	@ (8002784 <Set_color_L+0x140>)
 8002688:	f003 ff77 	bl	800657a <HAL_GPIO_WritePin>
 800268c:	2200      	movs	r2, #0
 800268e:	2104      	movs	r1, #4
 8002690:	483b      	ldr	r0, [pc, #236]	@ (8002780 <Set_color_L+0x13c>)
 8002692:	f003 ff72 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002696:	e06f      	b.n	8002778 <Set_color_L+0x134>
	case green:
		LRGB_SET(reset, set, reset);
 8002698:	2200      	movs	r2, #0
 800269a:	2102      	movs	r1, #2
 800269c:	4838      	ldr	r0, [pc, #224]	@ (8002780 <Set_color_L+0x13c>)
 800269e:	f003 ff6c 	bl	800657a <HAL_GPIO_WritePin>
 80026a2:	2201      	movs	r2, #1
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	4837      	ldr	r0, [pc, #220]	@ (8002784 <Set_color_L+0x140>)
 80026a8:	f003 ff67 	bl	800657a <HAL_GPIO_WritePin>
 80026ac:	2200      	movs	r2, #0
 80026ae:	2104      	movs	r1, #4
 80026b0:	4833      	ldr	r0, [pc, #204]	@ (8002780 <Set_color_L+0x13c>)
 80026b2:	f003 ff62 	bl	800657a <HAL_GPIO_WritePin>
		break;
 80026b6:	e05f      	b.n	8002778 <Set_color_L+0x134>
	case blue:
		LRGB_SET(reset, reset, set);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2102      	movs	r1, #2
 80026bc:	4830      	ldr	r0, [pc, #192]	@ (8002780 <Set_color_L+0x13c>)
 80026be:	f003 ff5c 	bl	800657a <HAL_GPIO_WritePin>
 80026c2:	2200      	movs	r2, #0
 80026c4:	2180      	movs	r1, #128	@ 0x80
 80026c6:	482f      	ldr	r0, [pc, #188]	@ (8002784 <Set_color_L+0x140>)
 80026c8:	f003 ff57 	bl	800657a <HAL_GPIO_WritePin>
 80026cc:	2201      	movs	r2, #1
 80026ce:	2104      	movs	r1, #4
 80026d0:	482b      	ldr	r0, [pc, #172]	@ (8002780 <Set_color_L+0x13c>)
 80026d2:	f003 ff52 	bl	800657a <HAL_GPIO_WritePin>
		break;
 80026d6:	e04f      	b.n	8002778 <Set_color_L+0x134>
	case yellow:
		LRGB_SET(set, set, 0);
 80026d8:	2201      	movs	r2, #1
 80026da:	2102      	movs	r1, #2
 80026dc:	4828      	ldr	r0, [pc, #160]	@ (8002780 <Set_color_L+0x13c>)
 80026de:	f003 ff4c 	bl	800657a <HAL_GPIO_WritePin>
 80026e2:	2201      	movs	r2, #1
 80026e4:	2180      	movs	r1, #128	@ 0x80
 80026e6:	4827      	ldr	r0, [pc, #156]	@ (8002784 <Set_color_L+0x140>)
 80026e8:	f003 ff47 	bl	800657a <HAL_GPIO_WritePin>
 80026ec:	2200      	movs	r2, #0
 80026ee:	2104      	movs	r1, #4
 80026f0:	4823      	ldr	r0, [pc, #140]	@ (8002780 <Set_color_L+0x13c>)
 80026f2:	f003 ff42 	bl	800657a <HAL_GPIO_WritePin>
		break;
 80026f6:	e03f      	b.n	8002778 <Set_color_L+0x134>
	case purple:
		LRGB_SET(set, reset, set);
 80026f8:	2201      	movs	r2, #1
 80026fa:	2102      	movs	r1, #2
 80026fc:	4820      	ldr	r0, [pc, #128]	@ (8002780 <Set_color_L+0x13c>)
 80026fe:	f003 ff3c 	bl	800657a <HAL_GPIO_WritePin>
 8002702:	2200      	movs	r2, #0
 8002704:	2180      	movs	r1, #128	@ 0x80
 8002706:	481f      	ldr	r0, [pc, #124]	@ (8002784 <Set_color_L+0x140>)
 8002708:	f003 ff37 	bl	800657a <HAL_GPIO_WritePin>
 800270c:	2201      	movs	r2, #1
 800270e:	2104      	movs	r1, #4
 8002710:	481b      	ldr	r0, [pc, #108]	@ (8002780 <Set_color_L+0x13c>)
 8002712:	f003 ff32 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002716:	e02f      	b.n	8002778 <Set_color_L+0x134>
	case lake:
		LRGB_SET(reset, set, set);
 8002718:	2200      	movs	r2, #0
 800271a:	2102      	movs	r1, #2
 800271c:	4818      	ldr	r0, [pc, #96]	@ (8002780 <Set_color_L+0x13c>)
 800271e:	f003 ff2c 	bl	800657a <HAL_GPIO_WritePin>
 8002722:	2201      	movs	r2, #1
 8002724:	2180      	movs	r1, #128	@ 0x80
 8002726:	4817      	ldr	r0, [pc, #92]	@ (8002784 <Set_color_L+0x140>)
 8002728:	f003 ff27 	bl	800657a <HAL_GPIO_WritePin>
 800272c:	2201      	movs	r2, #1
 800272e:	2104      	movs	r1, #4
 8002730:	4813      	ldr	r0, [pc, #76]	@ (8002780 <Set_color_L+0x13c>)
 8002732:	f003 ff22 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002736:	e01f      	b.n	8002778 <Set_color_L+0x134>
	case white:
		LRGB_SET(set, set, set);
 8002738:	2201      	movs	r2, #1
 800273a:	2102      	movs	r1, #2
 800273c:	4810      	ldr	r0, [pc, #64]	@ (8002780 <Set_color_L+0x13c>)
 800273e:	f003 ff1c 	bl	800657a <HAL_GPIO_WritePin>
 8002742:	2201      	movs	r2, #1
 8002744:	2180      	movs	r1, #128	@ 0x80
 8002746:	480f      	ldr	r0, [pc, #60]	@ (8002784 <Set_color_L+0x140>)
 8002748:	f003 ff17 	bl	800657a <HAL_GPIO_WritePin>
 800274c:	2201      	movs	r2, #1
 800274e:	2104      	movs	r1, #4
 8002750:	480b      	ldr	r0, [pc, #44]	@ (8002780 <Set_color_L+0x13c>)
 8002752:	f003 ff12 	bl	800657a <HAL_GPIO_WritePin>
		break;
 8002756:	e00f      	b.n	8002778 <Set_color_L+0x134>
	default:
		RGB_OFF_L;
 8002758:	2200      	movs	r2, #0
 800275a:	2102      	movs	r1, #2
 800275c:	4808      	ldr	r0, [pc, #32]	@ (8002780 <Set_color_L+0x13c>)
 800275e:	f003 ff0c 	bl	800657a <HAL_GPIO_WritePin>
 8002762:	2200      	movs	r2, #0
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	4807      	ldr	r0, [pc, #28]	@ (8002784 <Set_color_L+0x140>)
 8002768:	f003 ff07 	bl	800657a <HAL_GPIO_WritePin>
 800276c:	2200      	movs	r2, #0
 800276e:	2104      	movs	r1, #4
 8002770:	4803      	ldr	r0, [pc, #12]	@ (8002780 <Set_color_L+0x13c>)
 8002772:	f003 ff02 	bl	800657a <HAL_GPIO_WritePin>
	}
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40012000 	.word	0x40012000
 8002784:	40011800 	.word	0x40011800

08002788 <Task_Entity_RGB>:
unsigned int LED1_Switch = 0;	//0
unsigned int LED2_Switch = 0;	//0
unsigned int previousPad = 0;   //0

void Task_Entity_RGB(void)// RGB task entity function
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	while(1)
	{
		vTaskDelay(pdMS_TO_TICKS(1000));
 800278c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002790:	f007 f9ae 	bl	8009af0 <vTaskDelay>
		Set_RGB(RGB_Max, red);
 8002794:	2100      	movs	r1, #0
 8002796:	2003      	movs	r0, #3
 8002798:	f7ff fe66 	bl	8002468 <Set_RGB>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800279c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027a0:	f007 f9a6 	bl	8009af0 <vTaskDelay>
		Set_RGB(RGB_Max, green);
 80027a4:	2101      	movs	r1, #1
 80027a6:	2003      	movs	r0, #3
 80027a8:	f7ff fe5e 	bl	8002468 <Set_RGB>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80027ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027b0:	f007 f99e 	bl	8009af0 <vTaskDelay>
		Set_RGB(RGB_Max, blue);
 80027b4:	2102      	movs	r1, #2
 80027b6:	2003      	movs	r0, #3
 80027b8:	f7ff fe56 	bl	8002468 <Set_RGB>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80027bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027c0:	f007 f996 	bl	8009af0 <vTaskDelay>
		Set_RGB(RGB_Max, yellow);
 80027c4:	2103      	movs	r1, #3
 80027c6:	2003      	movs	r0, #3
 80027c8:	f7ff fe4e 	bl	8002468 <Set_RGB>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80027cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027d0:	f007 f98e 	bl	8009af0 <vTaskDelay>
		Set_RGB(RGB_Max, purple);
 80027d4:	2104      	movs	r1, #4
 80027d6:	2003      	movs	r0, #3
 80027d8:	f7ff fe46 	bl	8002468 <Set_RGB>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80027dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027e0:	f007 f986 	bl	8009af0 <vTaskDelay>
		Set_RGB(RGB_Max, lake);
 80027e4:	2105      	movs	r1, #5
 80027e6:	2003      	movs	r0, #3
 80027e8:	f7ff fe3e 	bl	8002468 <Set_RGB>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80027ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027f0:	f007 f97e 	bl	8009af0 <vTaskDelay>
		Set_RGB(RGB_Max, white);
 80027f4:	2106      	movs	r1, #6
 80027f6:	2003      	movs	r0, #3
 80027f8:	f7ff fe36 	bl	8002468 <Set_RGB>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80027fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002800:	f007 f976 	bl	8009af0 <vTaskDelay>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002804:	bf00      	nop
 8002806:	e7c1      	b.n	800278c <Task_Entity_RGB+0x4>

08002808 <Task_Entity_BEEP>:
	}
}

void Task_Entity_BEEP(void)// Buzzer task entity functions
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
	uint8_t stateHorn = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
	int8_t stateBackward = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	73bb      	strb	r3, [r7, #14]
	BeepCommand_t beepCmdSender = {0};
 8002816:	2300      	movs	r3, #0
 8002818:	713b      	strb	r3, [r7, #4]
	TickType_t delay = portMAX_DELAY;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	60bb      	str	r3, [r7, #8]
	uint8_t incr = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	71fb      	strb	r3, [r7, #7]
	while(1)
	{

		if (xQueueReceive(myQueue_controlMotor, &beepCmdSender, delay) == pdPASS) {
 8002824:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <Task_Entity_BEEP+0xc0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1d39      	adds	r1, r7, #4
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4618      	mov	r0, r3
 800282e:	f006 fdd5 	bl	80093dc <xQueueReceive>
 8002832:	4603      	mov	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	d112      	bne.n	800285e <Task_Entity_BEEP+0x56>
			if (beepCmdSender.taskSender == 0){
 8002838:	793b      	ldrb	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <Task_Entity_BEEP+0x46>
				stateHorn = !stateHorn;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	e007      	b.n	800285e <Task_Entity_BEEP+0x56>
			}
			else {
				stateBackward = !stateBackward;
 800284e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	73bb      	strb	r3, [r7, #14]
				}
			}
		if (stateHorn == 1){            // Horn ON
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d104      	bne.n	800286e <Task_Entity_BEEP+0x66>
			Set_Buzzer(stateHorn);
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fcc8 	bl	80011fc <Set_Buzzer>
 800286c:	e7da      	b.n	8002824 <Task_Entity_BEEP+0x1c>
		}
		else if (stateBackward == 1){   // Backward ON
 800286e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d117      	bne.n	80028a6 <Task_Entity_BEEP+0x9e>
			if (incr == 0){
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <Task_Entity_BEEP+0x80>
				Set_Buzzer(1);
 800287c:	2001      	movs	r0, #1
 800287e:	f7fe fcbd 	bl	80011fc <Set_Buzzer>
				delay = pdMS_TO_TICKS(10);
 8002882:	230a      	movs	r3, #10
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	e005      	b.n	8002894 <Task_Entity_BEEP+0x8c>
			}
			else if (incr == 25){
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	2b19      	cmp	r3, #25
 800288c:	d102      	bne.n	8002894 <Task_Entity_BEEP+0x8c>
				Set_Buzzer(0);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fe fcb4 	bl	80011fc <Set_Buzzer>
			}
			incr += 1;
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	3301      	adds	r3, #1
 8002898:	71fb      	strb	r3, [r7, #7]
			if (incr == 75)             //Horn 250ms On, 500ms Off
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b4b      	cmp	r3, #75	@ 0x4b
 800289e:	d1c1      	bne.n	8002824 <Task_Entity_BEEP+0x1c>
				incr = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	71fb      	strb	r3, [r7, #7]
 80028a4:	e7be      	b.n	8002824 <Task_Entity_BEEP+0x1c>
		}
		else if (stateBackward == 0){   // Backward OFF
 80028a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ba      	bne.n	8002824 <Task_Entity_BEEP+0x1c>
			delay = portMAX_DELAY;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	60bb      	str	r3, [r7, #8]
			incr = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	71fb      	strb	r3, [r7, #7]
			if (stateHorn == 0){        //Horn OFF
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1b2      	bne.n	8002824 <Task_Entity_BEEP+0x1c>
				Set_Buzzer(stateHorn);
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fc9b 	bl	80011fc <Set_Buzzer>
		if (xQueueReceive(myQueue_controlMotor, &beepCmdSender, delay) == pdPASS) {
 80028c6:	e7ad      	b.n	8002824 <Task_Entity_BEEP+0x1c>
 80028c8:	200004e8 	.word	0x200004e8

080028cc <Task_Entity_LED>:
		}
	}
}

void Task_Entity_LED(void)// LED task entity functions
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	while(1)
	{
		if(LED1_Switch)
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <Task_Entity_LED+0x44>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <Task_Entity_LED+0x18>
		{
			HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80028d8:	2201      	movs	r2, #1
 80028da:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80028de:	480d      	ldr	r0, [pc, #52]	@ (8002914 <Task_Entity_LED+0x48>)
 80028e0:	f003 fe4b 	bl	800657a <HAL_GPIO_WritePin>
		}
		if(LED2_Switch)
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <Task_Entity_LED+0x4c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <Task_Entity_LED+0x2c>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80028ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028f0:	4808      	ldr	r0, [pc, #32]	@ (8002914 <Task_Entity_LED+0x48>)
 80028f2:	f003 fe5a 	bl	80065aa <HAL_GPIO_TogglePin>
 80028f6:	e005      	b.n	8002904 <Task_Entity_LED+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80028f8:	2200      	movs	r2, #0
 80028fa:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80028fe:	4805      	ldr	r0, [pc, #20]	@ (8002914 <Task_Entity_LED+0x48>)
 8002900:	f003 fe3b 	bl	800657a <HAL_GPIO_WritePin>
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002904:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002908:	f007 f8f2 	bl	8009af0 <vTaskDelay>
		if(LED1_Switch)
 800290c:	e7e0      	b.n	80028d0 <Task_Entity_LED+0x4>
 800290e:	bf00      	nop
 8002910:	200004a4 	.word	0x200004a4
 8002914:	40012000 	.word	0x40012000
 8002918:	200004a8 	.word	0x200004a8

0800291c <Task_Entity_KEY>:
	}
}

void Task_Entity_KEY(void)// Button entity function
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	while(1)
	{
		if(Key1_State(1) == KEY_PRESS)
 8002920:	2001      	movs	r0, #1
 8002922:	f7fe fcb7 	bl	8001294 <Key1_State>
 8002926:	4603      	mov	r3, r0
 8002928:	2b01      	cmp	r3, #1
 800292a:	d113      	bne.n	8002954 <Task_Entity_KEY+0x38>
		{
			LED1_Switch = !LED1_Switch;
 800292c:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <Task_Entity_KEY+0x80>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <Task_Entity_KEY+0x80>)
 800293e:	601a      	str	r2, [r3, #0]
			LED2_Switch = !LED2_Switch;
 8002940:	4b17      	ldr	r3, [pc, #92]	@ (80029a0 <Task_Entity_KEY+0x84>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <Task_Entity_KEY+0x84>)
 8002952:	601a      	str	r2, [r3, #0]
		}
		if(Key2_State(1) == KEY_PRESS)
 8002954:	2001      	movs	r0, #1
 8002956:	f7fe fccf 	bl	80012f8 <Key2_State>
 800295a:	4603      	mov	r3, r0
 800295c:	2b01      	cmp	r3, #1
 800295e:	d109      	bne.n	8002974 <Task_Entity_KEY+0x58>
		{
			LED1_Switch = !LED1_Switch;
 8002960:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <Task_Entity_KEY+0x80>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <Task_Entity_KEY+0x80>)
 8002972:	601a      	str	r2, [r3, #0]
		}
		if(Key3_State(1) == KEY_PRESS)
 8002974:	2001      	movs	r0, #1
 8002976:	f7fe fcf1 	bl	800135c <Key3_State>
 800297a:	4603      	mov	r3, r0
 800297c:	2b01      	cmp	r3, #1
 800297e:	d109      	bne.n	8002994 <Task_Entity_KEY+0x78>
		{
			LED2_Switch = !LED2_Switch;
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <Task_Entity_KEY+0x84>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <Task_Entity_KEY+0x84>)
 8002992:	601a      	str	r2, [r3, #0]
		}
		vTaskDelay(pdMS_TO_TICKS(100));
 8002994:	2064      	movs	r0, #100	@ 0x64
 8002996:	f007 f8ab 	bl	8009af0 <vTaskDelay>
		if(Key1_State(1) == KEY_PRESS)
 800299a:	e7c1      	b.n	8002920 <Task_Entity_KEY+0x4>
 800299c:	200004a4 	.word	0x200004a4
 80029a0:	200004a8 	.word	0x200004a8

080029a4 <Task_Entity_PS2>:
	}
}

void Task_Entity_PS2(void)// Controller entity function
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
	while(1)
	{
		User_PS2_Control();
 80029a8:	f7ff f944 	bl	8001c34 <User_PS2_Control>
		vTaskDelay(pdMS_TO_TICKS(20));
 80029ac:	2014      	movs	r0, #20
 80029ae:	f007 f89f 	bl	8009af0 <vTaskDelay>
		User_PS2_Control();
 80029b2:	bf00      	nop
 80029b4:	e7f8      	b.n	80029a8 <Task_Entity_PS2+0x4>

080029b6 <Task_Entity_OLED>:
	}
}

void Task_Entity_OLED(void)// OLED entity function
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
	uint32_t firstPad = PSB_PAD_UP;
 80029bc:	2305      	movs	r3, #5
 80029be:	60bb      	str	r3, [r7, #8]
	uint32_t secondPad;
	BaseType_t result;

	while(1){
		xTaskNotifyWait(0x00, 0x00, &firstPad, portMAX_DELAY);
 80029c0:	f107 0208 	add.w	r2, r7, #8
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	2100      	movs	r1, #0
 80029ca:	2000      	movs	r0, #0
 80029cc:	f007 fdbe 	bl	800a54c <xTaskNotifyWait>
		result = xTaskNotifyWait(0, 0xFFFFFFFF, &secondPad, pdMS_TO_TICKS(1000));
 80029d0:	1d3a      	adds	r2, r7, #4
 80029d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029d6:	f04f 31ff 	mov.w	r1, #4294967295
 80029da:	2000      	movs	r0, #0
 80029dc:	f007 fdb6 	bl	800a54c <xTaskNotifyWait>
 80029e0:	60f8      	str	r0, [r7, #12]
			if (result == pdTRUE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <Task_Entity_OLED+0x40>
            {
				// QuickChat
				OLED_QuickChat(firstPad, secondPad);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe ffc8 	bl	8001984 <OLED_QuickChat>
 80029f4:	e7e4      	b.n	80029c0 <Task_Entity_OLED+0xa>
            }
			else{
				//Clear if no button was press
				OLED_Clear();
 80029f6:	f7fe ff66 	bl	80018c6 <OLED_Clear>
				OLED_Refresh();
 80029fa:	f7fe ff6b 	bl	80018d4 <OLED_Refresh>
		xTaskNotifyWait(0x00, 0x00, &firstPad, portMAX_DELAY);
 80029fe:	e7df      	b.n	80029c0 <Task_Entity_OLED+0xa>

08002a00 <Task_Entity_USRanging>:
			}
	}

}

void Task_Entity_USRanging(){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
	float distance = 0;
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
	char line2[20] = {'\0'};
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
	while(1){
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	2001      	movs	r0, #1
 8002a22:	f007 fd4b 	bl	800a4bc <ulTaskNotifyTake>
		distance = Get_distance();
 8002a26:	f001 fb99 	bl	800415c <Get_distance>
 8002a2a:	6178      	str	r0, [r7, #20]

		sprintf(line2, "Distance = %.3f   ", distance);
 8002a2c:	6978      	ldr	r0, [r7, #20]
 8002a2e:	f7fd fd6b 	bl	8000508 <__aeabi_f2d>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4638      	mov	r0, r7
 8002a38:	4905      	ldr	r1, [pc, #20]	@ (8002a50 <Task_Entity_USRanging+0x50>)
 8002a3a:	f008 ffbb 	bl	800b9b4 <siprintf>
		OLED_Draw_Line(line2, 2, false, true);
 8002a3e:	4638      	mov	r0, r7
 8002a40:	2301      	movs	r3, #1
 8002a42:	2200      	movs	r2, #0
 8002a44:	2102      	movs	r1, #2
 8002a46:	f7fe ff75 	bl	8001934 <OLED_Draw_Line>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002a4a:	bf00      	nop
 8002a4c:	e7e6      	b.n	8002a1c <Task_Entity_USRanging+0x1c>
 8002a4e:	bf00      	nop
 8002a50:	0800dd18 	.word	0x0800dd18

08002a54 <Task_Entity_Encoder>:
	}
}


void Task_Entity_Encoder(void){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	while(1){
		Encoder_Update_Count();//10ms
 8002a58:	f000 f99c 	bl	8002d94 <Encoder_Update_Count>
		Motion_Handle();
 8002a5c:	f000 fea6 	bl	80037ac <Motion_Handle>
		vTaskDelay(pdMS_TO_TICKS(10));
 8002a60:	200a      	movs	r0, #10
 8002a62:	f007 f845 	bl	8009af0 <vTaskDelay>
		Encoder_Update_Count();//10ms
 8002a66:	bf00      	nop
 8002a68:	e7f6      	b.n	8002a58 <Task_Entity_Encoder+0x4>
	...

08002a6c <Task_Entity_Motor>:
	}
}


void Task_Entity_Motor(void){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
	while(1){
		MotorCommand_t motorCmd;

		while (1)
		{
			if (xQueueReceive(myQueue_controlMotor, &motorCmd, 20) == pdPASS) {
 8002a72:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <Task_Entity_Motor+0x2c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4639      	mov	r1, r7
 8002a78:	2214      	movs	r2, #20
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f006 fcae 	bl	80093dc <xQueueReceive>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d104      	bne.n	8002a90 <Task_Entity_Motor+0x24>
	            // Update Motor with Controller
				updateMotorState(motorCmd);
 8002a86:	463b      	mov	r3, r7
 8002a88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a8c:	f000 fec0 	bl	8003810 <updateMotorState>
	        else
	        {
	            // Nothing here, maybe add slow-down function
	            //handleNoCommand(); // optionnel
	        }
	        vTaskDelay(pdMS_TO_TICKS(10)); // To avoid flood CPU
 8002a90:	200a      	movs	r0, #10
 8002a92:	f007 f82d 	bl	8009af0 <vTaskDelay>
			if (xQueueReceive(myQueue_controlMotor, &motorCmd, 20) == pdPASS) {
 8002a96:	e7ec      	b.n	8002a72 <Task_Entity_Motor+0x6>
 8002a98:	200004e8 	.word	0x200004e8

08002a9c <Task_Entity_Servo>:
	    }
	}
}

void Task_Entity_Servo(void){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
	uint32_t cmd;
	uint8_t angle; // The Angle is converted to the number of pulses, angle= [0, 180]
	PwmServo_Set_Angle(0, 0);
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f001 fb31 	bl	800410c <PwmServo_Set_Angle>
	while(1){
		xTaskNotifyWait(0x00, 0x00, &cmd, portMAX_DELAY);
 8002aaa:	463a      	mov	r2, r7
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f007 fd4a 	bl	800a54c <xTaskNotifyWait>
		//Do another way if you want more sensibily on servo control
		if (cmd < 125){
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b7c      	cmp	r3, #124	@ 0x7c
 8002abc:	d803      	bhi.n	8002ac6 <Task_Entity_Servo+0x2a>
			angle = angle - 1;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	71fb      	strb	r3, [r7, #7]
 8002ac4:	e002      	b.n	8002acc <Task_Entity_Servo+0x30>
		}
		else{
			angle = angle + 1;
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	71fb      	strb	r3, [r7, #7]
		}
		PwmServo_Set_Angle(0, angle); // S1
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	4619      	mov	r1, r3
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f001 fb1b 	bl	800410c <PwmServo_Set_Angle>
		xTaskNotifyWait(0x00, 0x00, &cmd, portMAX_DELAY);
 8002ad6:	e7e8      	b.n	8002aaa <Task_Entity_Servo+0xe>

08002ad8 <Task_Entity_Temperature>:
	}
}

void Task_Entity_Temperature(void){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	@ 0x30
 8002adc:	af00      	add	r7, sp, #0
	uint16_t g_ADC_Value = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	double Current_Voltage = 0;
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Inter_Temperature = 0;
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	char line3[20] = {'\0'};
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	f107 0308 	add.w	r3, r7, #8
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]

	while(1){
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	2001      	movs	r0, #1
 8002b12:	f007 fcd3 	bl	800a4bc <ulTaskNotifyTake>
		HAL_ADC_Start(&hadc1);
 8002b16:	482c      	ldr	r0, [pc, #176]	@ (8002bc8 <Task_Entity_Temperature+0xf0>)
 8002b18:	f002 fea2 	bl	8005860 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,10);
 8002b1c:	210a      	movs	r1, #10
 8002b1e:	482a      	ldr	r0, [pc, #168]	@ (8002bc8 <Task_Entity_Temperature+0xf0>)
 8002b20:	f002 ff4c 	bl	80059bc <HAL_ADC_PollForConversion>
		g_ADC_Value = HAL_ADC_GetValue(&hadc1);
 8002b24:	4828      	ldr	r0, [pc, #160]	@ (8002bc8 <Task_Entity_Temperature+0xf0>)
 8002b26:	f003 f84f 	bl	8005bc8 <HAL_ADC_GetValue>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		Current_Voltage = g_ADC_Value / 4096.0 * 3.3;
 8002b2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fcd7 	bl	80004e4 <__aeabi_i2d>
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	4b24      	ldr	r3, [pc, #144]	@ (8002bcc <Task_Entity_Temperature+0xf4>)
 8002b3c:	f7fd fe66 	bl	800080c <__aeabi_ddiv>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	a319      	add	r3, pc, #100	@ (adr r3, 8002bb0 <Task_Entity_Temperature+0xd8>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd33 	bl	80005b8 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	e9c7 2308 	strd	r2, r3, [r7, #32]
		Inter_Temperature = (1.43 - Current_Voltage) / 0.0043 + 25.0;
 8002b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b5e:	a116      	add	r1, pc, #88	@ (adr r1, 8002bb8 <Task_Entity_Temperature+0xe0>)
 8002b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b64:	f7fd fb70 	bl	8000248 <__aeabi_dsub>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	a313      	add	r3, pc, #76	@ (adr r3, 8002bc0 <Task_Entity_Temperature+0xe8>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fe49 	bl	800080c <__aeabi_ddiv>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <Task_Entity_Temperature+0xf8>)
 8002b88:	f7fd fb60 	bl	800024c <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	e9c7 2306 	strd	r2, r3, [r7, #24]
		sprintf(line3, "Int Temp : %.2f   ", Inter_Temperature);
 8002b94:	1d38      	adds	r0, r7, #4
 8002b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b9a:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <Task_Entity_Temperature+0xfc>)
 8002b9c:	f008 ff0a 	bl	800b9b4 <siprintf>
		OLED_Draw_Line(line3, 2, false, true);
 8002ba0:	1d38      	adds	r0, r7, #4
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	f7fe fec4 	bl	8001934 <OLED_Draw_Line>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002bac:	bf00      	nop
 8002bae:	e7ad      	b.n	8002b0c <Task_Entity_Temperature+0x34>
 8002bb0:	66666666 	.word	0x66666666
 8002bb4:	400a6666 	.word	0x400a6666
 8002bb8:	ae147ae1 	.word	0xae147ae1
 8002bbc:	3ff6e147 	.word	0x3ff6e147
 8002bc0:	75f6fd22 	.word	0x75f6fd22
 8002bc4:	3f719ce0 	.word	0x3f719ce0
 8002bc8:	20000878 	.word	0x20000878
 8002bcc:	40b00000 	.word	0x40b00000
 8002bd0:	40390000 	.word	0x40390000
 8002bd4:	0800dd2c 	.word	0x0800dd2c

08002bd8 <BSP_Init>:
#include "bsp.h"

//Hardware Initialization
//Parameter:None
void BSP_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	//Temp sensor
	HAL_ADCEx_Calibration_Start(&hadc1);
 8002bdc:	480e      	ldr	r0, [pc, #56]	@ (8002c18 <BSP_Init+0x40>)
 8002bde:	f003 f993 	bl	8005f08 <HAL_ADCEx_Calibration_Start>

	Delay_Init();
 8002be2:	f000 f81d 	bl	8002c20 <Delay_Init>
	PID_Param_Init();// Motor PID initialization
 8002be6:	f000 fed3 	bl	8003990 <PID_Param_Init>
	Bsp_Tim_Init();// Motor related timer initialization
 8002bea:	f001 f9c5 	bl	8003f78 <Bsp_Tim_Init>

	PwmServo_Init(); //Servo Motot init
 8002bee:	f001 fa65 	bl	80040bc <PwmServo_Init>

	OLED_Init();
 8002bf2:	f7fe fc79 	bl	80014e8 <OLED_Init>
	OLED_Draw_Line("oled init success!", 1, true, true);
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4807      	ldr	r0, [pc, #28]	@ (8002c1c <BSP_Init+0x44>)
 8002bfe:	f7fe fe99 	bl	8001934 <OLED_Draw_Line>

	PS2_SetInit();
 8002c02:	f7ff fc21 	bl	8002448 <PS2_SetInit>
	Motion_Set_Speed(0,0,0,0);//Car stop
 8002c06:	2300      	movs	r3, #0
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f000 fadd 	bl	80031cc <Motion_Set_Speed>
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000878 	.word	0x20000878
 8002c1c:	0800dd40 	.word	0x0800dd40

08002c20 <Delay_Init>:
 *
 * This delay is used for PS2 configuration
 * It becomes usable throughout the code, but note that it is blocking.
 */
void Delay_Init(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
    // Activate count DWT
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002c24:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <Delay_Init+0x24>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a06      	ldr	r2, [pc, #24]	@ (8002c44 <Delay_Init+0x24>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <Delay_Init+0x28>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a04      	ldr	r2, [pc, #16]	@ (8002c48 <Delay_Init+0x28>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	e000edf0 	.word	0xe000edf0
 8002c48:	e0001000 	.word	0xe0001000

08002c4c <delay_us>:

/**
 * Timing us with DWT
 */
void delay_us(uint32_t us)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8002c54:	4b0d      	ldr	r3, [pc, #52]	@ (8002c8c <delay_us+0x40>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);  // cycles pour us
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <delay_us+0x44>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <delay_us+0x48>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9a      	lsrs	r2, r3, #18
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks);
 8002c6e:	bf00      	nop
 8002c70:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <delay_us+0x40>)
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d8f8      	bhi.n	8002c70 <delay_us+0x24>
}
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e0001000 	.word	0xe0001000
 8002c90:	2000005c 	.word	0x2000005c
 8002c94:	431bde83 	.word	0x431bde83

08002c98 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：:MOTOR_ID_M1
 * @Retval: Returns encoder count data
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d841      	bhi.n	8002d30 <Encoder_Read_CNT+0x98>
 8002cac:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <Encoder_Read_CNT+0x1c>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002cdf 	.word	0x08002cdf
 8002cbc:	08002cfd 	.word	0x08002cfd
 8002cc0:	08002d17 	.word	0x08002d17
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <Encoder_Read_CNT+0xa8>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002cce:	337f      	adds	r3, #127	@ 0x7f
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <Encoder_Read_CNT+0xa8>)
 8002cd6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002cda:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002cdc:	e029      	b.n	8002d32 <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 8002cde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002cea:	337f      	adds	r3, #127	@ 0x7f
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 8002cf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cf4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002cfa:	e01a      	b.n	8002d32 <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <Encoder_Read_CNT+0xac>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002d06:	337f      	adds	r3, #127	@ 0x7f
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <Encoder_Read_CNT+0xac>)
 8002d0e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002d14:	e00d      	b.n	8002d32 <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 8002d16:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <Encoder_Read_CNT+0xb0>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002d20:	337f      	adds	r3, #127	@ 0x7f
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 8002d26:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <Encoder_Read_CNT+0xb0>)
 8002d28:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002d2c:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002d2e:	e000      	b.n	8002d32 <Encoder_Read_CNT+0x9a>
	default:
		break;
 8002d30:	bf00      	nop
	}
	return Encoder_TIM;
 8002d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40000400 	.word	0x40000400

08002d4c <Encoder_Get_ALL>:
}


// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <Encoder_Get_ALL+0x38>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <Encoder_Get_ALL+0x3c>)
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3308      	adds	r3, #8
 8002d6a:	4a08      	ldr	r2, [pc, #32]	@ (8002d8c <Encoder_Get_ALL+0x40>)
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	330c      	adds	r3, #12
 8002d74:	4a06      	ldr	r2, [pc, #24]	@ (8002d90 <Encoder_Get_ALL+0x44>)
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	601a      	str	r2, [r3, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	200004ac 	.word	0x200004ac
 8002d88:	200004b0 	.word	0x200004b0
 8002d8c:	200004b4 	.word	0x200004b4
 8002d90:	200004b8 	.word	0x200004b8

08002d94 <Encoder_Update_Count>:


// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7ff ff7d 	bl	8002c98 <Encoder_Read_CNT>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <Encoder_Update_Count+0x58>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	4a10      	ldr	r2, [pc, #64]	@ (8002dec <Encoder_Update_Count+0x58>)
 8002daa:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7ff ff73 	bl	8002c98 <Encoder_Read_CNT>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <Encoder_Update_Count+0x5c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002df0 <Encoder_Update_Count+0x5c>)
 8002dbe:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7ff ff69 	bl	8002c98 <Encoder_Read_CNT>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <Encoder_Update_Count+0x60>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <Encoder_Update_Count+0x60>)
 8002dd2:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f7ff ff5f 	bl	8002c98 <Encoder_Read_CNT>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b06      	ldr	r3, [pc, #24]	@ (8002df8 <Encoder_Update_Count+0x64>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4413      	add	r3, r2
 8002de4:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <Encoder_Update_Count+0x64>)
 8002de6:	6013      	str	r3, [r2, #0]
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200004ac 	.word	0x200004ac
 8002df0:	200004b0 	.word	0x200004b0
 8002df4:	200004b4 	.word	0x200004b4
 8002df8:	200004b8 	.word	0x200004b8

08002dfc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a06      	ldr	r2, [pc, #24]	@ (8002e24 <vApplicationGetIdleTaskMemory+0x28>)
 8002e0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4a05      	ldr	r2, [pc, #20]	@ (8002e28 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2280      	movs	r2, #128	@ 0x80
 8002e18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	200004f0 	.word	0x200004f0
 8002e28:	20000544 	.word	0x20000544

08002e2c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af02      	add	r7, sp, #8
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	myQueue_controlMotor = xQueueCreate(10, sizeof(MotorCommand_t));
 8002e32:	2200      	movs	r2, #0
 8002e34:	2106      	movs	r1, #6
 8002e36:	200a      	movs	r0, #10
 8002e38:	f006 f974 	bl	8009124 <xQueueGenericCreate>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f3c <MX_FREERTOS_Init+0x110>)
 8002e40:	6013      	str	r3, [r2, #0]
	myQueue_controlBeep = xQueueCreate(4, sizeof(BeepCommand_t));;
 8002e42:	2200      	movs	r2, #0
 8002e44:	2101      	movs	r1, #1
 8002e46:	2004      	movs	r0, #4
 8002e48:	f006 f96c 	bl	8009124 <xQueueGenericCreate>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f40 <MX_FREERTOS_Init+0x114>)
 8002e50:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of myTask_PS2 */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(StartTask_PS2,         "PS2",      1024, NULL, tskIDLE_PRIORITY + 3, &myTask_PS2Handle);
 8002e52:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <MX_FREERTOS_Init+0x118>)
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2303      	movs	r3, #3
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e60:	4939      	ldr	r1, [pc, #228]	@ (8002f48 <MX_FREERTOS_Init+0x11c>)
 8002e62:	483a      	ldr	r0, [pc, #232]	@ (8002f4c <MX_FREERTOS_Init+0x120>)
 8002e64:	f006 fd0c 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_RGB,         "RGB",       128, NULL, tskIDLE_PRIORITY, &myTask_RGBHandle);
 8002e68:	4b39      	ldr	r3, [pc, #228]	@ (8002f50 <MX_FREERTOS_Init+0x124>)
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2300      	movs	r3, #0
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	4937      	ldr	r1, [pc, #220]	@ (8002f54 <MX_FREERTOS_Init+0x128>)
 8002e76:	4838      	ldr	r0, [pc, #224]	@ (8002f58 <MX_FREERTOS_Init+0x12c>)
 8002e78:	f006 fd02 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_KEY,         "KEY",       128, NULL, tskIDLE_PRIORITY + 1, &myTask_KEYHandle);
 8002e7c:	4b37      	ldr	r3, [pc, #220]	@ (8002f5c <MX_FREERTOS_Init+0x130>)
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	2301      	movs	r3, #1
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2300      	movs	r3, #0
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	4935      	ldr	r1, [pc, #212]	@ (8002f60 <MX_FREERTOS_Init+0x134>)
 8002e8a:	4836      	ldr	r0, [pc, #216]	@ (8002f64 <MX_FREERTOS_Init+0x138>)
 8002e8c:	f006 fcf8 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_LED,         "LED",       128, NULL, tskIDLE_PRIORITY, &myTask_LEDHandle);
 8002e90:	4b35      	ldr	r3, [pc, #212]	@ (8002f68 <MX_FREERTOS_Init+0x13c>)
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	2300      	movs	r3, #0
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2280      	movs	r2, #128	@ 0x80
 8002e9c:	4933      	ldr	r1, [pc, #204]	@ (8002f6c <MX_FREERTOS_Init+0x140>)
 8002e9e:	4834      	ldr	r0, [pc, #208]	@ (8002f70 <MX_FREERTOS_Init+0x144>)
 8002ea0:	f006 fcee 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_Buzzer,      "BUZZER",    128, NULL, tskIDLE_PRIORITY, &myTask_BuzzerHandle);
 8002ea4:	4b33      	ldr	r3, [pc, #204]	@ (8002f74 <MX_FREERTOS_Init+0x148>)
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2300      	movs	r3, #0
 8002eae:	2280      	movs	r2, #128	@ 0x80
 8002eb0:	4931      	ldr	r1, [pc, #196]	@ (8002f78 <MX_FREERTOS_Init+0x14c>)
 8002eb2:	4832      	ldr	r0, [pc, #200]	@ (8002f7c <MX_FREERTOS_Init+0x150>)
 8002eb4:	f006 fce4 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_USRanging,  "USRanging", 256, NULL, tskIDLE_PRIORITY + 2, &myTask_USRanginHandle);
 8002eb8:	4b31      	ldr	r3, [pc, #196]	@ (8002f80 <MX_FREERTOS_Init+0x154>)
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ec6:	492f      	ldr	r1, [pc, #188]	@ (8002f84 <MX_FREERTOS_Init+0x158>)
 8002ec8:	482f      	ldr	r0, [pc, #188]	@ (8002f88 <MX_FREERTOS_Init+0x15c>)
 8002eca:	f006 fcd9 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_QuickChat,   "OLED",      256, NULL, tskIDLE_PRIORITY + 1, &myTask_OLEDHandle);
 8002ece:	4b2f      	ldr	r3, [pc, #188]	@ (8002f8c <MX_FREERTOS_Init+0x160>)
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002edc:	492c      	ldr	r1, [pc, #176]	@ (8002f90 <MX_FREERTOS_Init+0x164>)
 8002ede:	482d      	ldr	r0, [pc, #180]	@ (8002f94 <MX_FREERTOS_Init+0x168>)
 8002ee0:	f006 fcce 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_Encoder,     "ENCODER",   128, NULL, tskIDLE_PRIORITY + 3, &myTask_EncoderHandle);
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f98 <MX_FREERTOS_Init+0x16c>)
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2303      	movs	r3, #3
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2300      	movs	r3, #0
 8002eee:	2280      	movs	r2, #128	@ 0x80
 8002ef0:	492a      	ldr	r1, [pc, #168]	@ (8002f9c <MX_FREERTOS_Init+0x170>)
 8002ef2:	482b      	ldr	r0, [pc, #172]	@ (8002fa0 <MX_FREERTOS_Init+0x174>)
 8002ef4:	f006 fcc4 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_Motor,       "MOTOR",     512, NULL, tskIDLE_PRIORITY + 2, &myTask_MotorHandle);
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa4 <MX_FREERTOS_Init+0x178>)
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	2302      	movs	r3, #2
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2300      	movs	r3, #0
 8002f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f06:	4928      	ldr	r1, [pc, #160]	@ (8002fa8 <MX_FREERTOS_Init+0x17c>)
 8002f08:	4828      	ldr	r0, [pc, #160]	@ (8002fac <MX_FREERTOS_Init+0x180>)
 8002f0a:	f006 fcb9 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_Servo,       "SERVO",     128, NULL, tskIDLE_PRIORITY + 1, &myTask_ServoHandle);
 8002f0e:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <MX_FREERTOS_Init+0x184>)
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	2301      	movs	r3, #1
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2300      	movs	r3, #0
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	4926      	ldr	r1, [pc, #152]	@ (8002fb4 <MX_FREERTOS_Init+0x188>)
 8002f1c:	4826      	ldr	r0, [pc, #152]	@ (8002fb8 <MX_FREERTOS_Init+0x18c>)
 8002f1e:	f006 fcaf 	bl	8009880 <xTaskCreate>
  xTaskCreate(StartTask_Temperature,       "TEMP",     128, NULL, tskIDLE_PRIORITY, &myTask_TempHandle);
 8002f22:	4b26      	ldr	r3, [pc, #152]	@ (8002fbc <MX_FREERTOS_Init+0x190>)
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2280      	movs	r2, #128	@ 0x80
 8002f2e:	4924      	ldr	r1, [pc, #144]	@ (8002fc0 <MX_FREERTOS_Init+0x194>)
 8002f30:	4824      	ldr	r0, [pc, #144]	@ (8002fc4 <MX_FREERTOS_Init+0x198>)
 8002f32:	f006 fca5 	bl	8009880 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200004e8 	.word	0x200004e8
 8002f40:	200004ec 	.word	0x200004ec
 8002f44:	200004bc 	.word	0x200004bc
 8002f48:	0800dd54 	.word	0x0800dd54
 8002f4c:	08003005 	.word	0x08003005
 8002f50:	200004c0 	.word	0x200004c0
 8002f54:	0800dd58 	.word	0x0800dd58
 8002f58:	08002fc9 	.word	0x08002fc9
 8002f5c:	200004c4 	.word	0x200004c4
 8002f60:	0800dd5c 	.word	0x0800dd5c
 8002f64:	08002fdd 	.word	0x08002fdd
 8002f68:	200004c8 	.word	0x200004c8
 8002f6c:	0800dd60 	.word	0x0800dd60
 8002f70:	08002ff1 	.word	0x08002ff1
 8002f74:	200004cc 	.word	0x200004cc
 8002f78:	0800dd64 	.word	0x0800dd64
 8002f7c:	08003019 	.word	0x08003019
 8002f80:	200004d0 	.word	0x200004d0
 8002f84:	0800dd6c 	.word	0x0800dd6c
 8002f88:	0800302d 	.word	0x0800302d
 8002f8c:	200004d4 	.word	0x200004d4
 8002f90:	0800dd78 	.word	0x0800dd78
 8002f94:	08003041 	.word	0x08003041
 8002f98:	200004d8 	.word	0x200004d8
 8002f9c:	0800dd80 	.word	0x0800dd80
 8002fa0:	08003055 	.word	0x08003055
 8002fa4:	200004dc 	.word	0x200004dc
 8002fa8:	0800dd88 	.word	0x0800dd88
 8002fac:	08003069 	.word	0x08003069
 8002fb0:	200004e0 	.word	0x200004e0
 8002fb4:	0800dd90 	.word	0x0800dd90
 8002fb8:	0800307d 	.word	0x0800307d
 8002fbc:	200004e4 	.word	0x200004e4
 8002fc0:	0800dd98 	.word	0x0800dd98
 8002fc4:	08003091 	.word	0x08003091

08002fc8 <StartTask_RGB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_RGB */
void StartTask_RGB(void * argument)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_RGB */
	/* Infinite loop */
	Task_Entity_RGB();
 8002fd0:	f7ff fbda 	bl	8002788 <Task_Entity_RGB>
  /* USER CODE END StartTask_RGB */
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <StartTask_KEY>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_KEY */
void StartTask_KEY(void * argument)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_KEY */
	/* Infinite loop */
	Task_Entity_KEY();
 8002fe4:	f7ff fc9a 	bl	800291c <Task_Entity_KEY>
  /* USER CODE END StartTask_KEY */
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <StartTask_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_LED */
void StartTask_LED(void * argument)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_LED */
	/* Infinite loop */
	Task_Entity_LED();
 8002ff8:	f7ff fc68 	bl	80028cc <Task_Entity_LED>
  /* USER CODE END StartTask_LED */
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <StartTask_PS2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_PS2 */
void StartTask_PS2(void * argument)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_PS2 */
  /* Infinite loop */
	Task_Entity_PS2();
 800300c:	f7ff fcca 	bl	80029a4 <Task_Entity_PS2>
  /* USER CODE END StartTask_PS2 */
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <StartTask_Buzzer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Buzzer */
void StartTask_Buzzer(void * argument)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Buzzer */
  /* Infinite loop */
	Task_Entity_BEEP();
 8003020:	f7ff fbf2 	bl	8002808 <Task_Entity_BEEP>
  /* USER CODE END StartTask_Buzzer */
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <StartTask_USRanging>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_USRanging */
void StartTask_USRanging(void * argument)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_USRanging */
  /* Infinite loop */
	Task_Entity_USRanging();
 8003034:	f7ff fce4 	bl	8002a00 <Task_Entity_USRanging>
  /* USER CODE END StartTask_USRanging */
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <StartTask_QuickChat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_QuickChat */
void StartTask_QuickChat(void * argument)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_QuickChat */
  /* Infinite loop */
	Task_Entity_OLED();
 8003048:	f7ff fcb5 	bl	80029b6 <Task_Entity_OLED>
  /* USER CODE END StartTask_QuickChat */
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <StartTask_Encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Encoder */
void StartTask_Encoder(void * argument)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Encoder */
  /* Infinite loop */
  Task_Entity_Encoder();
 800305c:	f7ff fcfa 	bl	8002a54 <Task_Entity_Encoder>
  /* USER CODE END StartTask_Encoder */
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <StartTask_Motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_Motor */
void StartTask_Motor(void * argument)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Motor */
  /* Infinite loop */
	  Task_Entity_Motor();
 8003070:	f7ff fcfc 	bl	8002a6c <Task_Entity_Motor>
  /* USER CODE END StartTask_Motor */
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <StartTask_Servo>:

void StartTask_Servo(void * argument)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Motor */
  /* Infinite loop */
	  Task_Entity_Servo();
 8003084:	f7ff fd0a 	bl	8002a9c <Task_Entity_Servo>
  /* USER CODE END StartTask_Motor */
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <StartTask_Temperature>:

void StartTask_Temperature(void * argument)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_Motor */
  /* Infinite loop */
	  Task_Entity_Temperature();
 8003098:	f7ff fd1e 	bl	8002ad8 <Task_Entity_Temperature>
  /* USER CODE END StartTask_Motor */
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <Motion_Get_Circle_Pulse>:

BeepCommand_t beepCmdMotor = {1};
int8_t Beep_Trigger_State_Motor = 0;

static float Motion_Get_Circle_Pulse(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 80030a8:	4b02      	ldr	r3, [pc, #8]	@ (80030b4 <Motion_Get_Circle_Pulse+0x10>)
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	44820000 	.word	0x44820000

080030b8 <Motion_Set_Yaw_Adjust>:
    }
}

//Set the yaw angle status, and if enabled, refresh the target target angle.
void Motion_Set_Yaw_Adjust(uint8_t adjust)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
    if (adjust == 0)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <Motion_Set_Yaw_Adjust+0x18>
    {
        g_yaw_adjust = 0;
 80030c8:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <Motion_Set_Yaw_Adjust+0x28>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e002      	b.n	80030d6 <Motion_Set_Yaw_Adjust+0x1e>
    }
    else
    {
        g_yaw_adjust = 1;
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <Motion_Set_Yaw_Adjust+0x28>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
    }
    if (g_yaw_adjust)
    {
        // PID_Yaw_Reset
    }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	200007c8 	.word	0x200007c8

080030e4 <Motion_Set_Pwm>:
    return g_yaw_adjust;
}

//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4604      	mov	r4, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	461a      	mov	r2, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	80fb      	strh	r3, [r7, #6]
 80030f6:	4603      	mov	r3, r0
 80030f8:	80bb      	strh	r3, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	807b      	strh	r3, [r7, #2]
 80030fe:	4613      	mov	r3, r2
 8003100:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 8003102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003106:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800310a:	db0a      	blt.n	8003122 <Motion_Set_Pwm+0x3e>
 800310c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003110:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003114:	dc05      	bgt.n	8003122 <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 8003116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800311a:	4619      	mov	r1, r3
 800311c:	2000      	movs	r0, #0
 800311e:	f000 fe97 	bl	8003e50 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 8003122:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003126:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800312a:	db0a      	blt.n	8003142 <Motion_Set_Pwm+0x5e>
 800312c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003130:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003134:	dc05      	bgt.n	8003142 <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 8003136:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800313a:	4619      	mov	r1, r3
 800313c:	2001      	movs	r0, #1
 800313e:	f000 fe87 	bl	8003e50 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 8003142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003146:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800314a:	db0a      	blt.n	8003162 <Motion_Set_Pwm+0x7e>
 800314c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003150:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003154:	dc05      	bgt.n	8003162 <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8003156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800315a:	4619      	mov	r1, r3
 800315c:	2002      	movs	r0, #2
 800315e:	f000 fe77 	bl	8003e50 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 8003162:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003166:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800316a:	db0a      	blt.n	8003182 <Motion_Set_Pwm+0x9e>
 800316c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003170:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003174:	dc05      	bgt.n	8003182 <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8003176:	f9b7 3000 	ldrsh.w	r3, [r7]
 800317a:	4619      	mov	r1, r3
 800317c:	2003      	movs	r0, #3
 800317e:	f000 fe67 	bl	8003e50 <Motor_Set_Pwm>
    }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}
	...

0800318c <Motion_Stop>:

// Car Stop
void Motion_Stop(uint8_t brake)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 8003196:	2300      	movs	r3, #0
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2000      	movs	r0, #0
 800319e:	f000 f815 	bl	80031cc <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 80031a2:	2004      	movs	r0, #4
 80031a4:	f000 fd2c 	bl	8003c00 <PID_Clear_Motor>
    g_start_ctrl = 0;
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <Motion_Stop+0x38>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <Motion_Stop+0x3c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fdfe 	bl	8003db8 <Motor_Stop>
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000794 	.word	0x20000794
 80031c8:	200007c8 	.word	0x200007c8

080031cc <Motion_Set_Speed>:

//speed_mX=[-1000,1000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4604      	mov	r4, r0
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	4623      	mov	r3, r4
 80031dc:	80fb      	strh	r3, [r7, #6]
 80031de:	4603      	mov	r3, r0
 80031e0:	80bb      	strh	r3, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	807b      	strh	r3, [r7, #2]
 80031e6:	4613      	mov	r3, r2
 80031e8:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 80031ea:	4b18      	ldr	r3, [pc, #96]	@ (800324c <Motion_Set_Speed+0x80>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 80031f0:	4a17      	ldr	r2, [pc, #92]	@ (8003250 <Motion_Set_Speed+0x84>)
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 80031f6:	4a16      	ldr	r2, [pc, #88]	@ (8003250 <Motion_Set_Speed+0x84>)
 80031f8:	88bb      	ldrh	r3, [r7, #4]
 80031fa:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 80031fc:	4a14      	ldr	r2, [pc, #80]	@ (8003250 <Motion_Set_Speed+0x84>)
 80031fe:	887b      	ldrh	r3, [r7, #2]
 8003200:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 8003202:	4a13      	ldr	r2, [pc, #76]	@ (8003250 <Motion_Set_Speed+0x84>)
 8003204:	883b      	ldrh	r3, [r7, #0]
 8003206:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e016      	b.n	800323c <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	4a0f      	ldr	r2, [pc, #60]	@ (8003250 <Motion_Set_Speed+0x84>)
 8003212:	3310      	adds	r3, #16
 8003214:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f963 	bl	80004e4 <__aeabi_i2d>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f7fd fc9f 	bl	8000b68 <__aeabi_d2f>
 800322a:	4602      	mov	r2, r0
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fd71 	bl	8003d18 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	3301      	adds	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d9e5      	bls.n	800320e <Motion_Set_Speed+0x42>
    }
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	20000794 	.word	0x20000794
 8003250:	200007a0 	.word	0x200007a0

08003254 <Motion_Get_Speed>:
    Motion_Set_Speed(speed_L1, speed_L2, speed_R1, speed_R2);
}

//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    int i = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 8003260:	f107 0308 	add.w	r3, r7, #8
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 800326e:	f000 f8d3 	bl	8003418 <Motion_Get_Circle_MM>
 8003272:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 8003274:	f7ff ff16 	bl	80030a4 <Motion_Get_Circle_Pulse>
 8003278:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 800327a:	f000 f8c3 	bl	8003404 <Motion_Get_APB>
 800327e:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 8003280:	f000 f8d4 	bl	800342c <Motion_Get_Encoder>

    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	@ 0x24
 8003288:	e01e      	b.n	80032c8 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 800328a:	4a5a      	ldr	r2, [pc, #360]	@ (80033f4 <Motion_Get_Speed+0x1a0>)
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	2264      	movs	r2, #100	@ 0x64
 8003294:	fb02 f303 	mul.w	r3, r2, r3
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd fd6f 	bl	8000d7c <__aeabi_i2f>
 800329e:	4603      	mov	r3, r0
 80032a0:	6a39      	ldr	r1, [r7, #32]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fdbe 	bl	8000e24 <__aeabi_fmul>
 80032a8:	4603      	mov	r3, r0
 80032aa:	69f9      	ldr	r1, [r7, #28]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fe6d 	bl	8000f8c <__aeabi_fdiv>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3328      	adds	r3, #40	@ 0x28
 80032bc:	443b      	add	r3, r7
 80032be:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	dddd      	ble.n	800328a <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd fc9d 	bl	8000c14 <__addsf3>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f7fd fc96 	bl	8000c14 <__addsf3>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f7fd fc8f 	bl	8000c14 <__addsf3>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd fe45 	bl	8000f8c <__aeabi_fdiv>
 8003302:	4603      	mov	r3, r0
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd ff53 	bl	80011b0 <__aeabi_f2iz>
 800330a:	4603      	mov	r3, r0
 800330c:	b21a      	sxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fc79 	bl	8000c10 <__aeabi_fsub>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fd fc72 	bl	8000c10 <__aeabi_fsub>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f7fd fc6d 	bl	8000c14 <__addsf3>
 800333a:	4603      	mov	r3, r0
 800333c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003340:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fe21 	bl	8000f8c <__aeabi_fdiv>
 800334a:	4603      	mov	r3, r0
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd ff2f 	bl	80011b0 <__aeabi_f2iz>
 8003352:	4603      	mov	r3, r0
 8003354:	b21a      	sxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fc57 	bl	8000c14 <__addsf3>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f7fd fc4e 	bl	8000c10 <__aeabi_fsub>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fd fc47 	bl	8000c10 <__aeabi_fsub>
 8003382:	4603      	mov	r3, r0
 8003384:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003388:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fdfd 	bl	8000f8c <__aeabi_fdiv>
 8003392:	4603      	mov	r3, r0
 8003394:	69b9      	ldr	r1, [r7, #24]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fdf8 	bl	8000f8c <__aeabi_fdiv>
 800339c:	4603      	mov	r3, r0
 800339e:	4916      	ldr	r1, [pc, #88]	@ (80033f8 <Motion_Get_Speed+0x1a4>)
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd fd3f 	bl	8000e24 <__aeabi_fmul>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd ff01 	bl	80011b0 <__aeabi_f2iz>
 80033ae:	4603      	mov	r3, r0
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <Motion_Get_Speed+0x1a8>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c2:	e00c      	b.n	80033de <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	3328      	adds	r3, #40	@ 0x28
 80033ca:	443b      	add	r3, r7
 80033cc:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80033d0:	490b      	ldr	r1, [pc, #44]	@ (8003400 <Motion_Get_Speed+0x1ac>)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	3301      	adds	r3, #1
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	ddef      	ble.n	80033c4 <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 80033e4:	4806      	ldr	r0, [pc, #24]	@ (8003400 <Motion_Get_Speed+0x1ac>)
 80033e6:	f000 fbe3 	bl	8003bb0 <PID_Calc_Motor>
    }
}
 80033ea:	bf00      	nop
 80033ec:	3728      	adds	r7, #40	@ 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000784 	.word	0x20000784
 80033f8:	447a0000 	.word	0x447a0000
 80033fc:	20000794 	.word	0x20000794
 8003400:	200007a0 	.word	0x200007a0

08003404 <Motion_Get_APB>:

//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 8003408:	4b02      	ldr	r3, [pc, #8]	@ (8003414 <Motion_Get_APB+0x10>)
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	431f0000 	.word	0x431f0000

08003418 <Motion_Get_Circle_MM>:

//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 800341c:	4b02      	ldr	r3, [pc, #8]	@ (8003428 <Motion_Get_Circle_MM+0x10>)
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	434c33f8 	.word	0x434c33f8

0800342c <Motion_Get_Encoder>:

//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8003432:	4813      	ldr	r0, [pc, #76]	@ (8003480 <Motion_Get_Encoder+0x54>)
 8003434:	f7ff fc8a 	bl	8002d4c <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	71fb      	strb	r3, [r7, #7]
 800343c:	e017      	b.n	800346e <Motion_Get_Encoder+0x42>
    {
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	4a0f      	ldr	r2, [pc, #60]	@ (8003480 <Motion_Get_Encoder+0x54>)
 8003442:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	4a0e      	ldr	r2, [pc, #56]	@ (8003484 <Motion_Get_Encoder+0x58>)
 800344a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	1a8a      	subs	r2, r1, r2
 8003452:	490d      	ldr	r1, [pc, #52]	@ (8003488 <Motion_Get_Encoder+0x5c>)
 8003454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8003458:	79fa      	ldrb	r2, [r7, #7]
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	4908      	ldr	r1, [pc, #32]	@ (8003480 <Motion_Get_Encoder+0x54>)
 800345e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003462:	4908      	ldr	r1, [pc, #32]	@ (8003484 <Motion_Get_Encoder+0x58>)
 8003464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	3301      	adds	r3, #1
 800346c:	71fb      	strb	r3, [r7, #7]
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	2b03      	cmp	r3, #3
 8003472:	d9e4      	bls.n	800343e <Motion_Get_Encoder+0x12>
    }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000764 	.word	0x20000764
 8003484:	20000774 	.word	0x20000774
 8003488:	20000784 	.word	0x20000784

0800348c <wheel_State>:
}

//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, int16_t speed)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	460a      	mov	r2, r1
 8003496:	71fb      	strb	r3, [r7, #7]
 8003498:	4613      	mov	r3, r2
 800349a:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 800349c:	4a41      	ldr	r2, [pc, #260]	@ (80035a4 <wheel_State+0x118>)
 800349e:	88bb      	ldrh	r3, [r7, #4]
 80034a0:	8013      	strh	r3, [r2, #0]
    switch (state)
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	2b07      	cmp	r3, #7
 80034a6:	d878      	bhi.n	800359a <wheel_State+0x10e>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <wheel_State+0x24>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034d1 	.word	0x080034d1
 80034b4:	080034ed 	.word	0x080034ed
 80034b8:	080034fd 	.word	0x080034fd
 80034bc:	08003511 	.word	0x08003511
 80034c0:	08003535 	.word	0x08003535
 80034c4:	08003553 	.word	0x08003553
 80034c8:	08003571 	.word	0x08003571
 80034cc:	08003593 	.word	0x08003593
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 80034d0:	4b34      	ldr	r3, [pc, #208]	@ (80035a4 <wheel_State+0x118>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 80034d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fe51 	bl	800318c <Motion_Stop>
        break;
 80034ea:	e057      	b.n	800359c <wheel_State+0x110>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 80034ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f857 	bl	80035a8 <wheel_Ctrl>
        break;
 80034fa:	e04f      	b.n	800359c <wheel_State+0x110>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 80034fc:	88bb      	ldrh	r3, [r7, #4]
 80034fe:	425b      	negs	r3, r3
 8003500:	b29b      	uxth	r3, r3
 8003502:	b21b      	sxth	r3, r3
 8003504:	2200      	movs	r2, #0
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f84d 	bl	80035a8 <wheel_Ctrl>
        break;
 800350e:	e045      	b.n	800359c <wheel_State+0x110>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8003510:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003514:	0fda      	lsrs	r2, r3, #31
 8003516:	4413      	add	r3, r2
 8003518:	105b      	asrs	r3, r3, #1
 800351a:	b218      	sxth	r0, r3
 800351c:	88bb      	ldrh	r3, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	03d2      	lsls	r2, r2, #15
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	b29b      	uxth	r3, r3
 8003528:	b21b      	sxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	2100      	movs	r1, #0
 800352e:	f000 f83b 	bl	80035a8 <wheel_Ctrl>
        break;
 8003532:	e033      	b.n	800359c <wheel_State+0x110>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 8003534:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003538:	0fda      	lsrs	r2, r3, #31
 800353a:	4413      	add	r3, r2
 800353c:	105b      	asrs	r3, r3, #1
 800353e:	b218      	sxth	r0, r3
 8003540:	88bb      	ldrh	r3, [r7, #4]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	b21b      	sxth	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	2100      	movs	r1, #0
 800354c:	f000 f82c 	bl	80035a8 <wheel_Ctrl>

        break;
 8003550:	e024      	b.n	800359c <wheel_State+0x110>
    case MOTION_SPIN_LEFT:
        Motion_Set_Yaw_Adjust(0);
 8003552:	2000      	movs	r0, #0
 8003554:	f7ff fdb0 	bl	80030b8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 8003558:	88bb      	ldrh	r3, [r7, #4]
 800355a:	461a      	mov	r2, r3
 800355c:	0092      	lsls	r2, r2, #2
 800355e:	4413      	add	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	b21b      	sxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	2100      	movs	r1, #0
 8003568:	2000      	movs	r0, #0
 800356a:	f000 f81d 	bl	80035a8 <wheel_Ctrl>
        break;
 800356e:	e015      	b.n	800359c <wheel_State+0x110>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8003570:	2000      	movs	r0, #0
 8003572:	f7ff fda1 	bl	80030b8 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 8003576:	88bb      	ldrh	r3, [r7, #4]
 8003578:	461a      	mov	r2, r3
 800357a:	0392      	lsls	r2, r2, #14
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	b21b      	sxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	2100      	movs	r1, #0
 800358a:	2000      	movs	r0, #0
 800358c:	f000 f80c 	bl	80035a8 <wheel_Ctrl>
        break;
 8003590:	e004      	b.n	800359c <wheel_State+0x110>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 8003592:	2001      	movs	r0, #1
 8003594:	f7ff fdfa 	bl	800318c <Motion_Stop>
        break;
 8003598:	e000      	b.n	800359c <wheel_State+0x110>
    default:
        break;
 800359a:	bf00      	nop
    }
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000760 	.word	0x20000760

080035a8 <wheel_Ctrl>:


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	80fb      	strh	r3, [r7, #6]
 80035b2:	460b      	mov	r3, r1
 80035b4:	80bb      	strh	r3, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 80035ba:	f7ff ff23 	bl	8003404 <Motion_Get_APB>
 80035be:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 80035c0:	4b71      	ldr	r3, [pc, #452]	@ (8003788 <wheel_Ctrl+0x1e0>)
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 80035c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fd fbd5 	bl	8000d7c <__aeabi_i2f>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4a6d      	ldr	r2, [pc, #436]	@ (800378c <wheel_Ctrl+0x1e4>)
 80035d6:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 80035d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fbcd 	bl	8000d7c <__aeabi_i2f>
 80035e2:	4603      	mov	r3, r0
 80035e4:	496a      	ldr	r1, [pc, #424]	@ (8003790 <wheel_Ctrl+0x1e8>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fcd0 	bl	8000f8c <__aeabi_fdiv>
 80035ec:	4603      	mov	r3, r0
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd fc17 	bl	8000e24 <__aeabi_fmul>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b66      	ldr	r3, [pc, #408]	@ (8003794 <wheel_Ctrl+0x1ec>)
 80035fc:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 80035fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <wheel_Ctrl+0x76>
 8003606:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <wheel_Ctrl+0x76>
 800360e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8003616:	2001      	movs	r0, #1
 8003618:	f7ff fdb8 	bl	800318c <Motion_Stop>
        return;
 800361c:	e0b1      	b.n	8003782 <wheel_Ctrl+0x1da>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 800361e:	4b5b      	ldr	r3, [pc, #364]	@ (800378c <wheel_Ctrl+0x1e4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a59      	ldr	r2, [pc, #356]	@ (8003788 <wheel_Ctrl+0x1e0>)
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	4611      	mov	r1, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd faf3 	bl	8000c14 <__addsf3>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <wheel_Ctrl+0x1ec>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f7fd faeb 	bl	8000c14 <__addsf3>
 800363e:	4603      	mov	r3, r0
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd fdb5 	bl	80011b0 <__aeabi_f2iz>
 8003646:	4603      	mov	r3, r0
 8003648:	4a53      	ldr	r2, [pc, #332]	@ (8003798 <wheel_Ctrl+0x1f0>)
 800364a:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 800364c:	4b4f      	ldr	r3, [pc, #316]	@ (800378c <wheel_Ctrl+0x1e4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a4d      	ldr	r2, [pc, #308]	@ (8003788 <wheel_Ctrl+0x1e0>)
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fada 	bl	8000c10 <__aeabi_fsub>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4b4c      	ldr	r3, [pc, #304]	@ (8003794 <wheel_Ctrl+0x1ec>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fd fad4 	bl	8000c14 <__addsf3>
 800366c:	4603      	mov	r3, r0
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fd9e 	bl	80011b0 <__aeabi_f2iz>
 8003674:	4603      	mov	r3, r0
 8003676:	4a49      	ldr	r2, [pc, #292]	@ (800379c <wheel_Ctrl+0x1f4>)
 8003678:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 800367a:	4b44      	ldr	r3, [pc, #272]	@ (800378c <wheel_Ctrl+0x1e4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a42      	ldr	r2, [pc, #264]	@ (8003788 <wheel_Ctrl+0x1e0>)
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7fd fac3 	bl	8000c10 <__aeabi_fsub>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	4b41      	ldr	r3, [pc, #260]	@ (8003794 <wheel_Ctrl+0x1ec>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7fd fabb 	bl	8000c10 <__aeabi_fsub>
 800369a:	4603      	mov	r3, r0
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fd87 	bl	80011b0 <__aeabi_f2iz>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4a3e      	ldr	r2, [pc, #248]	@ (80037a0 <wheel_Ctrl+0x1f8>)
 80036a6:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 80036a8:	4b38      	ldr	r3, [pc, #224]	@ (800378c <wheel_Ctrl+0x1e4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a36      	ldr	r2, [pc, #216]	@ (8003788 <wheel_Ctrl+0x1e0>)
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd faae 	bl	8000c14 <__addsf3>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b35      	ldr	r3, [pc, #212]	@ (8003794 <wheel_Ctrl+0x1ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7fd faa4 	bl	8000c10 <__aeabi_fsub>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fd70 	bl	80011b0 <__aeabi_f2iz>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <wheel_Ctrl+0x1fc>)
 80036d4:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 80036d6:	4b30      	ldr	r3, [pc, #192]	@ (8003798 <wheel_Ctrl+0x1f0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036de:	dd04      	ble.n	80036ea <wheel_Ctrl+0x142>
        speed_L1_setup = 1000;
 80036e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <wheel_Ctrl+0x1f0>)
 80036e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e007      	b.n	80036fa <wheel_Ctrl+0x152>
    else if (speed_L1_setup < -1000)
 80036ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <wheel_Ctrl+0x1f0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80036f2:	da02      	bge.n	80036fa <wheel_Ctrl+0x152>
        speed_L1_setup = -1000;
 80036f4:	4b28      	ldr	r3, [pc, #160]	@ (8003798 <wheel_Ctrl+0x1f0>)
 80036f6:	4a2c      	ldr	r2, [pc, #176]	@ (80037a8 <wheel_Ctrl+0x200>)
 80036f8:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 80036fa:	4b28      	ldr	r3, [pc, #160]	@ (800379c <wheel_Ctrl+0x1f4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003702:	dd04      	ble.n	800370e <wheel_Ctrl+0x166>
        speed_L2_setup = 1000;
 8003704:	4b25      	ldr	r3, [pc, #148]	@ (800379c <wheel_Ctrl+0x1f4>)
 8003706:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e007      	b.n	800371e <wheel_Ctrl+0x176>
    else if (speed_L2_setup < -1000)
 800370e:	4b23      	ldr	r3, [pc, #140]	@ (800379c <wheel_Ctrl+0x1f4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003716:	da02      	bge.n	800371e <wheel_Ctrl+0x176>
        speed_L2_setup = -1000;
 8003718:	4b20      	ldr	r3, [pc, #128]	@ (800379c <wheel_Ctrl+0x1f4>)
 800371a:	4a23      	ldr	r2, [pc, #140]	@ (80037a8 <wheel_Ctrl+0x200>)
 800371c:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 800371e:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <wheel_Ctrl+0x1f8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003726:	dd04      	ble.n	8003732 <wheel_Ctrl+0x18a>
        speed_R1_setup = 1000;
 8003728:	4b1d      	ldr	r3, [pc, #116]	@ (80037a0 <wheel_Ctrl+0x1f8>)
 800372a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e007      	b.n	8003742 <wheel_Ctrl+0x19a>
    else if (speed_R1_setup < -1000)
 8003732:	4b1b      	ldr	r3, [pc, #108]	@ (80037a0 <wheel_Ctrl+0x1f8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800373a:	da02      	bge.n	8003742 <wheel_Ctrl+0x19a>
        speed_R1_setup = -1000;
 800373c:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <wheel_Ctrl+0x1f8>)
 800373e:	4a1a      	ldr	r2, [pc, #104]	@ (80037a8 <wheel_Ctrl+0x200>)
 8003740:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 8003742:	4b18      	ldr	r3, [pc, #96]	@ (80037a4 <wheel_Ctrl+0x1fc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800374a:	dd04      	ble.n	8003756 <wheel_Ctrl+0x1ae>
        speed_R2_setup = 1000;
 800374c:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <wheel_Ctrl+0x1fc>)
 800374e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e007      	b.n	8003766 <wheel_Ctrl+0x1be>
    else if (speed_R2_setup < -1000)
 8003756:	4b13      	ldr	r3, [pc, #76]	@ (80037a4 <wheel_Ctrl+0x1fc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800375e:	da02      	bge.n	8003766 <wheel_Ctrl+0x1be>
        speed_R2_setup = -1000;
 8003760:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <wheel_Ctrl+0x1fc>)
 8003762:	4a11      	ldr	r2, [pc, #68]	@ (80037a8 <wheel_Ctrl+0x200>)
 8003764:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 8003766:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <wheel_Ctrl+0x1f0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b218      	sxth	r0, r3
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <wheel_Ctrl+0x1f4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	b219      	sxth	r1, r3
 8003772:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <wheel_Ctrl+0x1f8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b21a      	sxth	r2, r3
 8003778:	4b0a      	ldr	r3, [pc, #40]	@ (80037a4 <wheel_Ctrl+0x1fc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b21b      	sxth	r3, r3
 800377e:	f7ff fd25 	bl	80031cc <Motion_Set_Speed>
}
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000744 	.word	0x20000744
 800378c:	20000748 	.word	0x20000748
 8003790:	447a0000 	.word	0x447a0000
 8003794:	2000074c 	.word	0x2000074c
 8003798:	20000750 	.word	0x20000750
 800379c:	20000754 	.word	0x20000754
 80037a0:	20000758 	.word	0x20000758
 80037a4:	2000075c 	.word	0x2000075c
 80037a8:	fffffc18 	.word	0xfffffc18

080037ac <Motion_Handle>:

//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 80037b0:	4814      	ldr	r0, [pc, #80]	@ (8003804 <Motion_Handle+0x58>)
 80037b2:	f7ff fd4f 	bl	8003254 <Motion_Get_Speed>

    if (g_start_ctrl)
 80037b6:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <Motion_Handle+0x5c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d020      	beq.n	8003800 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 80037be:	4b13      	ldr	r3, [pc, #76]	@ (800380c <Motion_Handle+0x60>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fcf4 	bl	80011b0 <__aeabi_f2iz>
 80037c8:	4603      	mov	r3, r0
 80037ca:	b21c      	sxth	r4, r3
 80037cc:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <Motion_Handle+0x60>)
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fd fced 	bl	80011b0 <__aeabi_f2iz>
 80037d6:	4603      	mov	r3, r0
 80037d8:	b21d      	sxth	r5, r3
 80037da:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <Motion_Handle+0x60>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fce6 	bl	80011b0 <__aeabi_f2iz>
 80037e4:	4603      	mov	r3, r0
 80037e6:	b21e      	sxth	r6, r3
 80037e8:	4b08      	ldr	r3, [pc, #32]	@ (800380c <Motion_Handle+0x60>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fd fcdf 	bl	80011b0 <__aeabi_f2iz>
 80037f2:	4603      	mov	r3, r0
 80037f4:	b21b      	sxth	r3, r3
 80037f6:	4632      	mov	r2, r6
 80037f8:	4629      	mov	r1, r5
 80037fa:	4620      	mov	r0, r4
 80037fc:	f7ff fc72 	bl	80030e4 <Motion_Set_Pwm>
    }
}
 8003800:	bf00      	nop
 8003802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003804:	20000798 	.word	0x20000798
 8003808:	20000794 	.word	0x20000794
 800380c:	200007a0 	.word	0x200007a0

08003810 <updateMotorState>:

void updateMotorState(MotorCommand_t motorCmd){
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	463b      	mov	r3, r7
 8003818:	e883 0003 	stmia.w	r3, {r0, r1}

	if(motorCmd.L2_pressed == motorCmd.R2_pressed){
 800381c:	793a      	ldrb	r2, [r7, #4]
 800381e:	78bb      	ldrb	r3, [r7, #2]
 8003820:	429a      	cmp	r2, r3
 8003822:	d10a      	bne.n	800383a <updateMotorState+0x2a>
		g_car_speed = 0;
 8003824:	4b54      	ldr	r3, [pc, #336]	@ (8003978 <updateMotorState+0x168>)
 8003826:	2200      	movs	r2, #0
 8003828:	801a      	strh	r2, [r3, #0]
		wheel_State(MOTION_STOP, g_car_speed);
 800382a:	4b53      	ldr	r3, [pc, #332]	@ (8003978 <updateMotorState+0x168>)
 800382c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003830:	4619      	mov	r1, r3
 8003832:	2000      	movs	r0, #0
 8003834:	f7ff fe2a 	bl	800348c <wheel_State>
 8003838:	e070      	b.n	800391c <updateMotorState+0x10c>
	}
	else{
		//Gestion de la vitesse
		if (motorCmd.R2_pressed == 1){ 		      // Forward
 800383a:	78bb      	ldrb	r3, [r7, #2]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d11f      	bne.n	8003880 <updateMotorState+0x70>
			if (g_car_speed < 200)
 8003840:	4b4d      	ldr	r3, [pc, #308]	@ (8003978 <updateMotorState+0x168>)
 8003842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003846:	2bc7      	cmp	r3, #199	@ 0xc7
 8003848:	dc03      	bgt.n	8003852 <updateMotorState+0x42>
				g_car_speed = 200;
 800384a:	4b4b      	ldr	r3, [pc, #300]	@ (8003978 <updateMotorState+0x168>)
 800384c:	22c8      	movs	r2, #200	@ 0xc8
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	e031      	b.n	80038b6 <updateMotorState+0xa6>
			else
			{
				if (motorCmd.R1_pressed == 1)     //Boost Only Forward
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <updateMotorState+0x54>
					step = g_car_boost;
 8003858:	4b48      	ldr	r3, [pc, #288]	@ (800397c <updateMotorState+0x16c>)
 800385a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385e:	b25a      	sxtb	r2, r3
 8003860:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <updateMotorState+0x170>)
 8003862:	701a      	strb	r2, [r3, #0]
				g_car_speed = g_car_speed + step;
 8003864:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <updateMotorState+0x170>)
 8003866:	f993 3000 	ldrsb.w	r3, [r3]
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b42      	ldr	r3, [pc, #264]	@ (8003978 <updateMotorState+0x168>)
 800386e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4413      	add	r3, r2
 8003876:	b29b      	uxth	r3, r3
 8003878:	b21a      	sxth	r2, r3
 800387a:	4b3f      	ldr	r3, [pc, #252]	@ (8003978 <updateMotorState+0x168>)
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	e01a      	b.n	80038b6 <updateMotorState+0xa6>
			}
		}

		else if (motorCmd.L2_pressed == 1){       // Backward
 8003880:	793b      	ldrb	r3, [r7, #4]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d117      	bne.n	80038b6 <updateMotorState+0xa6>
			if (g_car_speed > -200)
 8003886:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <updateMotorState+0x168>)
 8003888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388c:	f113 0fc7 	cmn.w	r3, #199	@ 0xc7
 8003890:	db04      	blt.n	800389c <updateMotorState+0x8c>
				g_car_speed = -200;
 8003892:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <updateMotorState+0x168>)
 8003894:	f64f 7238 	movw	r2, #65336	@ 0xff38
 8003898:	801a      	strh	r2, [r3, #0]
 800389a:	e00c      	b.n	80038b6 <updateMotorState+0xa6>
			else
				g_car_speed = g_car_speed - step;
 800389c:	4b36      	ldr	r3, [pc, #216]	@ (8003978 <updateMotorState+0x168>)
 800389e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	4b36      	ldr	r3, [pc, #216]	@ (8003980 <updateMotorState+0x170>)
 80038a6:	f993 3000 	ldrsb.w	r3, [r3]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	b21a      	sxth	r2, r3
 80038b2:	4b31      	ldr	r3, [pc, #196]	@ (8003978 <updateMotorState+0x168>)
 80038b4:	801a      	strh	r2, [r3, #0]
		}
		//Gestion des commandes
		if (motorCmd.joystickX < 125){
 80038b6:	883b      	ldrh	r3, [r7, #0]
 80038b8:	2b7c      	cmp	r3, #124	@ 0x7c
 80038ba:	d812      	bhi.n	80038e2 <updateMotorState+0xd2>
			if (motorCmd.L1_pressed == 1)
 80038bc:	797b      	ldrb	r3, [r7, #5]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <updateMotorState+0xc2>
				wheel_State(MOTION_SPIN_RIGHT, g_car_speed); //Right and Left are inverse here, bc it's more natural
 80038c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003978 <updateMotorState+0x168>)
 80038c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c8:	4619      	mov	r1, r3
 80038ca:	2006      	movs	r0, #6
 80038cc:	f7ff fdde 	bl	800348c <wheel_State>
 80038d0:	e024      	b.n	800391c <updateMotorState+0x10c>
			else
				wheel_State(MOTION_LEFT, g_car_speed);		//Left
 80038d2:	4b29      	ldr	r3, [pc, #164]	@ (8003978 <updateMotorState+0x168>)
 80038d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d8:	4619      	mov	r1, r3
 80038da:	2003      	movs	r0, #3
 80038dc:	f7ff fdd6 	bl	800348c <wheel_State>
 80038e0:	e01c      	b.n	800391c <updateMotorState+0x10c>
		}
		else if (motorCmd.joystickX > 150){
 80038e2:	883b      	ldrh	r3, [r7, #0]
 80038e4:	2b96      	cmp	r3, #150	@ 0x96
 80038e6:	d912      	bls.n	800390e <updateMotorState+0xfe>
			if (motorCmd.L1_pressed == 1){
 80038e8:	797b      	ldrb	r3, [r7, #5]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <updateMotorState+0xee>
				wheel_State(MOTION_SPIN_LEFT, g_car_speed);  //Right and Left are inverse here, bc it's more natural
 80038ee:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <updateMotorState+0x168>)
 80038f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f4:	4619      	mov	r1, r3
 80038f6:	2005      	movs	r0, #5
 80038f8:	f7ff fdc8 	bl	800348c <wheel_State>
 80038fc:	e00e      	b.n	800391c <updateMotorState+0x10c>
			}
			else{
				wheel_State(MOTION_RIGHT, g_car_speed);		//Right
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <updateMotorState+0x168>)
 8003900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003904:	4619      	mov	r1, r3
 8003906:	2004      	movs	r0, #4
 8003908:	f7ff fdc0 	bl	800348c <wheel_State>
 800390c:	e006      	b.n	800391c <updateMotorState+0x10c>
			}
		}
		else { //Forward or Backward
			wheel_State(MOTION_RUN, g_car_speed);
 800390e:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <updateMotorState+0x168>)
 8003910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003914:	4619      	mov	r1, r3
 8003916:	2001      	movs	r0, #1
 8003918:	f7ff fdb8 	bl	800348c <wheel_State>
		}
	}
	// Need to be fix :
	// If L2 pressed and hold then green pressed and green release do not stop Beep
	// Maybe need to be fix in task.c
	if( (g_car_speed < 0 && Beep_Trigger_State_Motor == 0 && motorCmd.L1_pressed == 0)
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <updateMotorState+0x168>)
 800391e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003922:	2b00      	cmp	r3, #0
 8003924:	da07      	bge.n	8003936 <updateMotorState+0x126>
 8003926:	4b17      	ldr	r3, [pc, #92]	@ (8003984 <updateMotorState+0x174>)
 8003928:	f993 3000 	ldrsb.w	r3, [r3]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <updateMotorState+0x126>
 8003930:	797b      	ldrb	r3, [r7, #5]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <updateMotorState+0x13c>
		|| ((motorCmd.L2_pressed == 0 || motorCmd.L1_pressed == 1) && Beep_Trigger_State_Motor == 1))
 8003936:	793b      	ldrb	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <updateMotorState+0x132>
 800393c:	797b      	ldrb	r3, [r7, #5]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d116      	bne.n	8003970 <updateMotorState+0x160>
 8003942:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <updateMotorState+0x174>)
 8003944:	f993 3000 	ldrsb.w	r3, [r3]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d111      	bne.n	8003970 <updateMotorState+0x160>
	{
		xQueueSend(myQueue_controlMotor, &beepCmdMotor, 0);
 800394c:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <updateMotorState+0x178>)
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	2300      	movs	r3, #0
 8003952:	2200      	movs	r2, #0
 8003954:	490d      	ldr	r1, [pc, #52]	@ (800398c <updateMotorState+0x17c>)
 8003956:	f005 fc3f 	bl	80091d8 <xQueueGenericSend>
		Beep_Trigger_State_Motor = !Beep_Trigger_State_Motor;
 800395a:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <updateMotorState+0x174>)
 800395c:	f993 3000 	ldrsb.w	r3, [r3]
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	b25a      	sxtb	r2, r3
 800396c:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <updateMotorState+0x174>)
 800396e:	701a      	strb	r2, [r3, #0]

	}

}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	2000002c 	.word	0x2000002c
 800397c:	20000030 	.word	0x20000030
 8003980:	2000002e 	.word	0x2000002e
 8003984:	200007c9 	.word	0x200007c9
 8003988:	200004e8 	.word	0x200004e8
 800398c:	20000034 	.word	0x20000034

08003990 <PID_Param_Init>:
//YAW yaw angle
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

//Initialize PID parameters
void PID_Param_Init(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	e062      	b.n	8003a62 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 800399c:	493a      	ldr	r1, [pc, #232]	@ (8003a88 <PID_Param_Init+0xf8>)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 80039b0:	4935      	ldr	r1, [pc, #212]	@ (8003a88 <PID_Param_Init+0xf8>)
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	3308      	adds	r3, #8
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 80039c6:	4930      	ldr	r1, [pc, #192]	@ (8003a88 <PID_Param_Init+0xf8>)
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	440b      	add	r3, r1
 80039d4:	3318      	adds	r3, #24
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 80039dc:	492a      	ldr	r1, [pc, #168]	@ (8003a88 <PID_Param_Init+0xf8>)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	331c      	adds	r3, #28
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 80039f2:	4925      	ldr	r1, [pc, #148]	@ (8003a88 <PID_Param_Init+0xf8>)
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	440b      	add	r3, r1
 8003a00:	3320      	adds	r3, #32
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8003a08:	491f      	ldr	r1, [pc, #124]	@ (8003a88 <PID_Param_Init+0xf8>)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	440b      	add	r3, r1
 8003a16:	3324      	adds	r3, #36	@ 0x24
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8003a1e:	491a      	ldr	r1, [pc, #104]	@ (8003a88 <PID_Param_Init+0xf8>)
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	440b      	add	r3, r1
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <PID_Param_Init+0xfc>)
 8003a30:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8003a32:	4915      	ldr	r1, [pc, #84]	@ (8003a88 <PID_Param_Init+0xf8>)
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	3310      	adds	r3, #16
 8003a42:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <PID_Param_Init+0x100>)
 8003a44:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8003a46:	4910      	ldr	r1, [pc, #64]	@ (8003a88 <PID_Param_Init+0xf8>)
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	440b      	add	r3, r1
 8003a54:	3314      	adds	r3, #20
 8003a56:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003a5a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	dd99      	ble.n	800399c <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8003a68:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <PID_Param_Init+0x104>)
 8003a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8003a98 <PID_Param_Init+0x108>)
 8003a6c:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 8003a6e:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <PID_Param_Init+0x104>)
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8003a76:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <PID_Param_Init+0x104>)
 8003a78:	4a08      	ldr	r2, [pc, #32]	@ (8003a9c <PID_Param_Init+0x10c>)
 8003a7a:	60da      	str	r2, [r3, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	200007cc 	.word	0x200007cc
 8003a8c:	3f4ccccd 	.word	0x3f4ccccd
 8003a90:	3d75c28f 	.word	0x3d75c28f
 8003a94:	20000038 	.word	0x20000038
 8003a98:	3ecccccd 	.word	0x3ecccccd
 8003a9c:	3dcccccd 	.word	0x3dcccccd

08003aa0 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value
}

// Incremental PID calculation formula
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 8003aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6839      	ldr	r1, [r7, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd f8ac 	bl	8000c10 <__aeabi_fsub>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689c      	ldr	r4, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68dd      	ldr	r5, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f7fd f89c 	bl	8000c10 <__aeabi_fsub>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4619      	mov	r1, r3
 8003adc:	4628      	mov	r0, r5
 8003ade:	f7fd f9a1 	bl	8000e24 <__aeabi_fmul>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461d      	mov	r5, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fd f997 	bl	8000e24 <__aeabi_fmul>
 8003af6:	4603      	mov	r3, r0
 8003af8:	4619      	mov	r1, r3
 8003afa:	4628      	mov	r0, r5
 8003afc:	f7fd f88a 	bl	8000c14 <__addsf3>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4698      	mov	r8, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695d      	ldr	r5, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699e      	ldr	r6, [r3, #24]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4619      	mov	r1, r3
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd f87e 	bl	8000c14 <__addsf3>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f7fd f877 	bl	8000c10 <__aeabi_fsub>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	f7fd f871 	bl	8000c14 <__addsf3>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4619      	mov	r1, r3
 8003b36:	4628      	mov	r0, r5
 8003b38:	f7fd f974 	bl	8000e24 <__aeabi_fmul>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4640      	mov	r0, r8
 8003b42:	f7fd f867 	bl	8000c14 <__addsf3>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f7fd f862 	bl	8000c14 <__addsf3>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
    //transmission error
    pid->err_last = pid->err_next;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	621a      	str	r2, [r3, #32]

    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	490e      	ldr	r1, [pc, #56]	@ (8003ba8 <PID_Incre_Calc+0x108>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fb14 	bl	800119c <__aeabi_fcmpgt>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba8 <PID_Incre_Calc+0x108>)
 8003b7e:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4909      	ldr	r1, [pc, #36]	@ (8003bac <PID_Incre_Calc+0x10c>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd faea 	bl	8001160 <__aeabi_fcmplt>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a05      	ldr	r2, [pc, #20]	@ (8003bac <PID_Incre_Calc+0x10c>)
 8003b96:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ba6:	bf00      	nop
 8003ba8:	44c80000 	.word	0x44c80000
 8003bac:	c4c80000 	.word	0xc4c80000

08003bb0 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	e016      	b.n	8003bec <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bfc <PID_Calc_Motor+0x4c>)
 8003bca:	1898      	adds	r0, r3, r2
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f7ff ff63 	bl	8003aa0 <PID_Incre_Calc>
 8003bda:	4601      	mov	r1, r0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	3204      	adds	r2, #4
 8003be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3301      	adds	r3, #1
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	dde5      	ble.n	8003bbe <PID_Calc_Motor+0xe>
    }
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200007cc 	.word	0x200007cc

08003c00 <PID_Clear_Motor>:
    }
}

//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d87b      	bhi.n	8003d08 <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d140      	bne.n	8003c98 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e039      	b.n	8003c90 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 8003c1c:	493d      	ldr	r1, [pc, #244]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	440b      	add	r3, r1
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8003c32:	4938      	ldr	r1, [pc, #224]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	440b      	add	r3, r1
 8003c40:	3318      	adds	r3, #24
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8003c48:	4932      	ldr	r1, [pc, #200]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	440b      	add	r3, r1
 8003c56:	331c      	adds	r3, #28
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 8003c5e:	492d      	ldr	r1, [pc, #180]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3320      	adds	r3, #32
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8003c74:	4927      	ldr	r1, [pc, #156]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	440b      	add	r3, r1
 8003c82:	3324      	adds	r3, #36	@ 0x24
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	ddc2      	ble.n	8003c1c <PID_Clear_Motor+0x1c>
 8003c96:	e038      	b.n	8003d0a <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8003c98:	79fa      	ldrb	r2, [r7, #7]
 8003c9a:	491e      	ldr	r1, [pc, #120]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 8003cae:	79fa      	ldrb	r2, [r7, #7]
 8003cb0:	4918      	ldr	r1, [pc, #96]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 8003cc4:	79fa      	ldrb	r2, [r7, #7]
 8003cc6:	4913      	ldr	r1, [pc, #76]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	331c      	adds	r3, #28
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 8003cda:	79fa      	ldrb	r2, [r7, #7]
 8003cdc:	490d      	ldr	r1, [pc, #52]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3320      	adds	r3, #32
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 8003cf0:	79fa      	ldrb	r2, [r7, #7]
 8003cf2:	4908      	ldr	r1, [pc, #32]	@ (8003d14 <PID_Clear_Motor+0x114>)
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3324      	adds	r3, #36	@ 0x24
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	e000      	b.n	8003d0a <PID_Clear_Motor+0x10a>
        return;
 8003d08:	bf00      	nop
    }
}
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200007cc 	.word	0x200007cc

08003d18 <PID_Set_Motor_Target>:

//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	6039      	str	r1, [r7, #0]
 8003d22:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d81f      	bhi.n	8003d6a <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d112      	bne.n	8003d56 <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e00b      	b.n	8003d4e <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8003d36:	490f      	ldr	r1, [pc, #60]	@ (8003d74 <PID_Set_Motor_Target+0x5c>)
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	440b      	add	r3, r1
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	ddf0      	ble.n	8003d36 <PID_Set_Motor_Target+0x1e>
 8003d54:	e00a      	b.n	8003d6c <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8003d56:	79fa      	ldrb	r2, [r7, #7]
 8003d58:	4906      	ldr	r1, [pc, #24]	@ (8003d74 <PID_Set_Motor_Target+0x5c>)
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	440b      	add	r3, r1
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e000      	b.n	8003d6c <PID_Set_Motor_Target+0x54>
        return;
 8003d6a:	bf00      	nop
    }
}
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	200007cc 	.word	0x200007cc

08003d78 <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 8003d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	dd05      	ble.n	8003d96 <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	e00a      	b.n	8003dac <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 8003d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da05      	bge.n	8003daa <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	b21b      	sxth	r3, r3
 8003da8:	e000      	b.n	8003dac <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
	...

08003db8 <Motor_Stop>:

// All motors stopped
void Motor_Stop(uint8_t brake)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <Motor_Stop+0x14>
        brake = 1;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003dd2:	fb03 f202 	mul.w	r2, r3, r2
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <Motor_Stop+0x90>)
 8003dd8:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003de0:	fb03 f202 	mul.w	r2, r3, r2
 8003de4:	4b18      	ldr	r3, [pc, #96]	@ (8003e48 <Motor_Stop+0x90>)
 8003de6:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003dee:	fb03 f202 	mul.w	r2, r3, r2
 8003df2:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <Motor_Stop+0x90>)
 8003df4:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003dfc:	fb03 f202 	mul.w	r2, r3, r2
 8003e00:	4b11      	ldr	r3, [pc, #68]	@ (8003e48 <Motor_Stop+0x90>)
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003e0a:	fb03 f202 	mul.w	r2, r3, r2
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e4c <Motor_Stop+0x94>)
 8003e10:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003e18:	fb03 f202 	mul.w	r2, r3, r2
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <Motor_Stop+0x94>)
 8003e1e:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003e26:	fb03 f202 	mul.w	r2, r3, r2
 8003e2a:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <Motor_Stop+0x94>)
 8003e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003e34:	fb03 f202 	mul.w	r2, r3, r2
 8003e38:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <Motor_Stop+0x94>)
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40013400 	.word	0x40013400
 8003e4c:	40012c00 	.word	0x40012c00

08003e50 <Motor_Set_Pwm>:

// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	460a      	mov	r2, r1
 8003e5a:	71fb      	strb	r3, [r7, #7]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8003e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff87 	bl	8003d78 <Motor_Ignore_Dead_Zone>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	81fb      	strh	r3, [r7, #14]
    // Limit input
    if (pulse >= MOTOR_MAX_PULSE)
 8003e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e72:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003e76:	db02      	blt.n	8003e7e <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8003e78:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003e7c:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 8003e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e82:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8003e86:	dc02      	bgt.n	8003e8e <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8003e88:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 8003e8c:	81fb      	strh	r3, [r7, #14]

    switch (id)
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d867      	bhi.n	8003f64 <Motor_Set_Pwm+0x114>
 8003e94:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <Motor_Set_Pwm+0x4c>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003edf 	.word	0x08003edf
 8003ea4:	08003f11 	.word	0x08003f11
 8003ea8:	08003f3b 	.word	0x08003f3b
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 8003eac:	89fb      	ldrh	r3, [r7, #14]
 8003eae:	425b      	negs	r3, r3
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8003eb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	db07      	blt.n	8003ecc <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ec2:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 8003eca:	e04c      	b.n	8003f66 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 8003ecc:	4b28      	ldr	r3, [pc, #160]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 8003ed2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ed6:	425a      	negs	r2, r3
 8003ed8:	4b25      	ldr	r3, [pc, #148]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003edc:	e043      	b.n	8003f66 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 8003ede:	89fb      	ldrh	r3, [r7, #14]
 8003ee0:	425b      	negs	r3, r3
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 8003ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db07      	blt.n	8003efe <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 8003eee:	4a20      	ldr	r2, [pc, #128]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ef4:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 8003efc:	e033      	b.n	8003f66 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 8003efe:	4b1c      	ldr	r3, [pc, #112]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8003f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f08:	425a      	negs	r2, r3
 8003f0a:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <Motor_Set_Pwm+0x120>)
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8003f0e:	e02a      	b.n	8003f66 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 8003f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	db07      	blt.n	8003f28 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8003f18:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f1e:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 8003f20:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8003f26:	e01e      	b.n	8003f66 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8003f28:	4b12      	ldr	r3, [pc, #72]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 8003f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f32:	425a      	negs	r2, r3
 8003f34:	4b0f      	ldr	r3, [pc, #60]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003f38:	e015      	b.n	8003f66 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 8003f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	db07      	blt.n	8003f52 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8003f42:	4a0c      	ldr	r2, [pc, #48]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f48:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8003f50:	e009      	b.n	8003f66 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8003f52:	4b08      	ldr	r3, [pc, #32]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 8003f58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f5c:	425a      	negs	r2, r3
 8003f5e:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <Motor_Set_Pwm+0x124>)
 8003f60:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8003f62:	e000      	b.n	8003f66 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8003f64:	bf00      	nop
    }
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40012c00 	.word	0x40012c00

08003f78 <Bsp_Tim_Init>:
/*
 *  Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	// Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4822      	ldr	r0, [pc, #136]	@ (8004008 <Bsp_Tim_Init+0x90>)
 8003f80:	f003 fa02 	bl	8007388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003f84:	2104      	movs	r1, #4
 8003f86:	4820      	ldr	r0, [pc, #128]	@ (8004008 <Bsp_Tim_Init+0x90>)
 8003f88:	f003 f9fe 	bl	8007388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	481e      	ldr	r0, [pc, #120]	@ (8004008 <Bsp_Tim_Init+0x90>)
 8003f90:	f003 f9fa 	bl	8007388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003f94:	210c      	movs	r1, #12
 8003f96:	481c      	ldr	r0, [pc, #112]	@ (8004008 <Bsp_Tim_Init+0x90>)
 8003f98:	f003 f9f6 	bl	8007388 <HAL_TIM_PWM_Start>

	// Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	481b      	ldr	r0, [pc, #108]	@ (800400c <Bsp_Tim_Init+0x94>)
 8003fa0:	f003 f9f2 	bl	8007388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	4819      	ldr	r0, [pc, #100]	@ (800400c <Bsp_Tim_Init+0x94>)
 8003fa8:	f003 f9ee 	bl	8007388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003fac:	2108      	movs	r1, #8
 8003fae:	4817      	ldr	r0, [pc, #92]	@ (800400c <Bsp_Tim_Init+0x94>)
 8003fb0:	f003 f9ea 	bl	8007388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8003fb4:	210c      	movs	r1, #12
 8003fb6:	4815      	ldr	r0, [pc, #84]	@ (800400c <Bsp_Tim_Init+0x94>)
 8003fb8:	f003 f9e6 	bl	8007388 <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 8003fbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003fc0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24
	// Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003fc6:	2104      	movs	r1, #4
 8003fc8:	4811      	ldr	r0, [pc, #68]	@ (8004010 <Bsp_Tim_Init+0x98>)
 8003fca:	f003 fb88 	bl	80076de <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 8003fce:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <Bsp_Tim_Init+0x9c>)
 8003fd0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24
	// Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	480f      	ldr	r0, [pc, #60]	@ (8004018 <Bsp_Tim_Init+0xa0>)
 8003fda:	f003 fb80 	bl	80076de <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 8003fde:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <Bsp_Tim_Init+0xa4>)
 8003fe0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003fe4:	625a      	str	r2, [r3, #36]	@ 0x24
	// Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003fe6:	2104      	movs	r1, #4
 8003fe8:	480d      	ldr	r0, [pc, #52]	@ (8004020 <Bsp_Tim_Init+0xa8>)
 8003fea:	f003 fb78 	bl	80076de <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 8003fee:	4b0d      	ldr	r3, [pc, #52]	@ (8004024 <Bsp_Tim_Init+0xac>)
 8003ff0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003ff4:	625a      	str	r2, [r3, #36]	@ 0x24
	// Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	480b      	ldr	r0, [pc, #44]	@ (8004028 <Bsp_Tim_Init+0xb0>)
 8003ffa:	f003 fb70 	bl	80076de <HAL_TIM_Encoder_Start>

	//Servo Motor
	// This interrupt handler generates excessive CPU load.
	// Consider using an external PWM generator module that communicates via I2C to offload the task.
	HAL_TIM_Base_Start_IT(&htim7);
 8003ffe:	480b      	ldr	r0, [pc, #44]	@ (800402c <Bsp_Tim_Init+0xb4>)
 8004000:	f003 f90a 	bl	8007218 <HAL_TIM_Base_Start_IT>

}
 8004004:	bf00      	nop
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200008f4 	.word	0x200008f4
 800400c:	20000aa4 	.word	0x20000aa4
 8004010:	2000093c 	.word	0x2000093c
 8004014:	40000400 	.word	0x40000400
 8004018:	20000984 	.word	0x20000984
 800401c:	40000800 	.word	0x40000800
 8004020:	200009cc 	.word	0x200009cc
 8004024:	40000c00 	.word	0x40000c00
 8004028:	20000a14 	.word	0x20000a14
 800402c:	20000a5c 	.word	0x20000a5c

08004030 <PwmServo_Angle_To_Pulse>:
uint8_t g_pwm_angle[MAX_PWM_SERVO] = {90};
uint16_t g_angle_num[MAX_PWM_SERVO] = {149};

// The Angle is converted to the number of pulses, angle= [0, 180]
static uint16_t PwmServo_Angle_To_Pulse(uint8_t angle)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = (angle * 11 + 500) / 10;
 800403a:	79fa      	ldrb	r2, [r7, #7]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800404a:	4a06      	ldr	r2, [pc, #24]	@ (8004064 <PwmServo_Angle_To_Pulse+0x34>)
 800404c:	fb82 1203 	smull	r1, r2, r2, r3
 8004050:	1092      	asrs	r2, r2, #2
 8004052:	17db      	asrs	r3, r3, #31
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	81fb      	strh	r3, [r7, #14]
	return pulse;
 8004058:	89fb      	ldrh	r3, [r7, #14]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	66666667 	.word	0x66666667

08004068 <PwmServo_Handle>:

// PWM steering gear control, in the timer call, analog output PWM signal
void PwmServo_Handle(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
	g_pwm_pulse++;
 800406c:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <PwmServo_Handle+0x48>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <PwmServo_Handle+0x48>)
 8004076:	801a      	strh	r2, [r3, #0]

	if (g_pwm_pulse <= g_angle_num[0])
 8004078:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <PwmServo_Handle+0x4c>)
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <PwmServo_Handle+0x48>)
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d305      	bcc.n	8004090 <PwmServo_Handle+0x28>
		SERVO_1_HIGH();
 8004084:	2201      	movs	r2, #1
 8004086:	2101      	movs	r1, #1
 8004088:	480b      	ldr	r0, [pc, #44]	@ (80040b8 <PwmServo_Handle+0x50>)
 800408a:	f002 fa76 	bl	800657a <HAL_GPIO_WritePin>
 800408e:	e004      	b.n	800409a <PwmServo_Handle+0x32>
	else
		SERVO_1_LOW();
 8004090:	2200      	movs	r2, #0
 8004092:	2101      	movs	r1, #1
 8004094:	4808      	ldr	r0, [pc, #32]	@ (80040b8 <PwmServo_Handle+0x50>)
 8004096:	f002 fa70 	bl	800657a <HAL_GPIO_WritePin>

	if (g_pwm_pulse >= 2000)
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <PwmServo_Handle+0x48>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80040a2:	d302      	bcc.n	80040aa <PwmServo_Handle+0x42>
		g_pwm_pulse = 0;
 80040a4:	4b02      	ldr	r3, [pc, #8]	@ (80040b0 <PwmServo_Handle+0x48>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	801a      	strh	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	2000086c 	.word	0x2000086c
 80040b4:	20000058 	.word	0x20000058
 80040b8:	40010c00 	.word	0x40010c00

080040bc <PwmServo_Init>:

// Initialize the steering gear
void PwmServo_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	e014      	b.n	80040f2 <PwmServo_Init+0x36>
	{
		g_pwm_angle[i] = 90;
 80040c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004104 <PwmServo_Init+0x48>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	225a      	movs	r2, #90	@ 0x5a
 80040d0:	701a      	strb	r2, [r3, #0]
		g_angle_num[i] = PwmServo_Angle_To_Pulse(g_pwm_angle[i]);
 80040d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004104 <PwmServo_Init+0x48>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ffa8 	bl	8004030 <PwmServo_Angle_To_Pulse>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4619      	mov	r1, r3
 80040e4:	4a08      	ldr	r2, [pc, #32]	@ (8004108 <PwmServo_Init+0x4c>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < MAX_PWM_SERVO; i++)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3301      	adds	r3, #1
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dde7      	ble.n	80040c8 <PwmServo_Init+0xc>
	}
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000054 	.word	0x20000054
 8004108:	20000058 	.word	0x20000058

0800410c <PwmServo_Set_Angle>:

// Set the PWM servo Angle, index=0~MAX_PWM_SERVO, Angle to 0-180
void PwmServo_Set_Angle(uint8_t index, uint8_t angle)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	460a      	mov	r2, r1
 8004116:	71fb      	strb	r3, [r7, #7]
 8004118:	4613      	mov	r3, r2
 800411a:	71bb      	strb	r3, [r7, #6]
	if (index >= MAX_PWM_SERVO)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d111      	bne.n	8004146 <PwmServo_Set_Angle+0x3a>
		return;
	if (angle > 180)
 8004122:	79bb      	ldrb	r3, [r7, #6]
 8004124:	2bb4      	cmp	r3, #180	@ 0xb4
 8004126:	d810      	bhi.n	800414a <PwmServo_Set_Angle+0x3e>
		return;
	g_pwm_angle[index] = angle;
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	490a      	ldr	r1, [pc, #40]	@ (8004154 <PwmServo_Set_Angle+0x48>)
 800412c:	79ba      	ldrb	r2, [r7, #6]
 800412e:	54ca      	strb	r2, [r1, r3]
	g_angle_num[index] = PwmServo_Angle_To_Pulse(angle);
 8004130:	79fc      	ldrb	r4, [r7, #7]
 8004132:	79bb      	ldrb	r3, [r7, #6]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff7b 	bl	8004030 <PwmServo_Angle_To_Pulse>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <PwmServo_Set_Angle+0x4c>)
 8004140:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8004144:	e002      	b.n	800414c <PwmServo_Set_Angle+0x40>
		return;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <PwmServo_Set_Angle+0x40>
		return;
 800414a:	bf00      	nop
}
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bd90      	pop	{r4, r7, pc}
 8004152:	bf00      	nop
 8004154:	20000054 	.word	0x20000054
 8004158:	20000058 	.word	0x20000058

0800415c <Get_distance>:

/*
 * Get the average of 5 measurements
 * */
float Get_distance(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	return Get_distance_default(5);
 8004160:	2005      	movs	r0, #5
 8004162:	f000 f803 	bl	800416c <Get_distance_default>
 8004166:	4603      	mov	r3, r0
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}

0800416c <Get_distance_default>:

float Get_distance_default(int nbOccur){
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	if (nbOccur >= 5 || nbOccur <= 0)  //more than 5 is useless here and below or equal to 0 is not possible
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b04      	cmp	r3, #4
 8004178:	dc02      	bgt.n	8004180 <Get_distance_default+0x14>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	dc02      	bgt.n	8004186 <Get_distance_default+0x1a>
		return 0;
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e079      	b.n	800427a <Get_distance_default+0x10e>

	float distance = 0, aveg = 0;
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
	uint16_t tim, count;
	uint8_t i = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	74fb      	strb	r3, [r7, #19]

	while (i != nbOccur)
 8004196:	e061      	b.n	800425c <Get_distance_default+0xf0>
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8004198:	2201      	movs	r2, #1
 800419a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800419e:	4839      	ldr	r0, [pc, #228]	@ (8004284 <Get_distance_default+0x118>)
 80041a0:	f002 f9eb 	bl	800657a <HAL_GPIO_WritePin>
		osDelay(20);
 80041a4:	2014      	movs	r0, #20
 80041a6:	f004 fe90 	bl	8008eca <osDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80041aa:	2200      	movs	r2, #0
 80041ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80041b0:	4834      	ldr	r0, [pc, #208]	@ (8004284 <Get_distance_default+0x118>)
 80041b2:	f002 f9e2 	bl	800657a <HAL_GPIO_WritePin>

		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET)
 80041b6:	bf00      	nop
 80041b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041bc:	4831      	ldr	r0, [pc, #196]	@ (8004284 <Get_distance_default+0x118>)
 80041be:	f002 f9c5 	bl	800654c <HAL_GPIO_ReadPin>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f7      	beq.n	80041b8 <Get_distance_default+0x4c>
			;
		ultrasonic_flag = 1;
 80041c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <Get_distance_default+0x11c>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]

		i += 1;
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	3301      	adds	r3, #1
 80041d2:	74fb      	strb	r3, [r7, #19]
		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80041d4:	e010      	b.n	80041f8 <Get_distance_default+0x8c>
		{
			count = ultrasonic_num;
 80041d6:	4b2d      	ldr	r3, [pc, #180]	@ (800428c <Get_distance_default+0x120>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	813b      	strh	r3, [r7, #8]
			if (count >= 10000)
 80041dc:	893b      	ldrh	r3, [r7, #8]
 80041de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d908      	bls.n	80041f8 <Get_distance_default+0x8c>
			{
				ultrasonic_flag = 0;
 80041e6:	4b28      	ldr	r3, [pc, #160]	@ (8004288 <Get_distance_default+0x11c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
				ultrasonic_num = 0;
 80041ec:	4b27      	ldr	r3, [pc, #156]	@ (800428c <Get_distance_default+0x120>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
				return 0;
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e040      	b.n	800427a <Get_distance_default+0x10e>
		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80041f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80041fc:	4821      	ldr	r0, [pc, #132]	@ (8004284 <Get_distance_default+0x118>)
 80041fe:	f002 f9a5 	bl	800654c <HAL_GPIO_ReadPin>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d0e6      	beq.n	80041d6 <Get_distance_default+0x6a>
			}
		}

		ultrasonic_flag = 0;
 8004208:	4b1f      	ldr	r3, [pc, #124]	@ (8004288 <Get_distance_default+0x11c>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
		tim = TIM7->CNT;
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <Get_distance_default+0x124>)
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	817b      	strh	r3, [r7, #10]
		distance = (tim + ultrasonic_num * 10) / 58.5;
 8004214:	8979      	ldrh	r1, [r7, #10]
 8004216:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <Get_distance_default+0x120>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	440b      	add	r3, r1
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc f94d 	bl	80004c4 <__aeabi_ui2d>
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <Get_distance_default+0x128>)
 8004230:	f7fc faec 	bl	800080c <__aeabi_ddiv>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4610      	mov	r0, r2
 800423a:	4619      	mov	r1, r3
 800423c:	f7fc fc94 	bl	8000b68 <__aeabi_d2f>
 8004240:	4603      	mov	r3, r0
 8004242:	60fb      	str	r3, [r7, #12]
		aveg = distance + aveg;
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7fc fce4 	bl	8000c14 <__addsf3>
 800424c:	4603      	mov	r3, r0
 800424e:	617b      	str	r3, [r7, #20]
		ultrasonic_num = 0;
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <Get_distance_default+0x120>)
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
		osDelay(10);
 8004256:	200a      	movs	r0, #10
 8004258:	f004 fe37 	bl	8008eca <osDelay>
	while (i != nbOccur)
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d199      	bne.n	8004198 <Get_distance_default+0x2c>
	}
	distance = aveg / nbOccur;
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fc fd89 	bl	8000d7c <__aeabi_i2f>
 800426a:	4603      	mov	r3, r0
 800426c:	4619      	mov	r1, r3
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7fc fe8c 	bl	8000f8c <__aeabi_fdiv>
 8004274:	4603      	mov	r3, r0
 8004276:	60fb      	str	r3, [r7, #12]
	return distance;
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40011c00 	.word	0x40011c00
 8004288:	20000874 	.word	0x20000874
 800428c:	20000870 	.word	0x20000870
 8004290:	40001400 	.word	0x40001400
 8004294:	404d4000 	.word	0x404d4000

08004298 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80042a8:	4b18      	ldr	r3, [pc, #96]	@ (800430c <MX_ADC1_Init+0x74>)
 80042aa:	4a19      	ldr	r2, [pc, #100]	@ (8004310 <MX_ADC1_Init+0x78>)
 80042ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80042ae:	4b17      	ldr	r3, [pc, #92]	@ (800430c <MX_ADC1_Init+0x74>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80042b4:	4b15      	ldr	r3, [pc, #84]	@ (800430c <MX_ADC1_Init+0x74>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042ba:	4b14      	ldr	r3, [pc, #80]	@ (800430c <MX_ADC1_Init+0x74>)
 80042bc:	2200      	movs	r2, #0
 80042be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042c0:	4b12      	ldr	r3, [pc, #72]	@ (800430c <MX_ADC1_Init+0x74>)
 80042c2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80042c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042c8:	4b10      	ldr	r3, [pc, #64]	@ (800430c <MX_ADC1_Init+0x74>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80042ce:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <MX_ADC1_Init+0x74>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042d4:	480d      	ldr	r0, [pc, #52]	@ (800430c <MX_ADC1_Init+0x74>)
 80042d6:	f001 f9d9 	bl	800568c <HAL_ADC_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80042e0:	f000 fa96 	bl	8004810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80042e4:	2310      	movs	r3, #16
 80042e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042e8:	2301      	movs	r3, #1
 80042ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	4619      	mov	r1, r3
 80042f4:	4805      	ldr	r0, [pc, #20]	@ (800430c <MX_ADC1_Init+0x74>)
 80042f6:	f001 fc73 	bl	8005be0 <HAL_ADC_ConfigChannel>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8004300:	f000 fa86 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000878 	.word	0x20000878
 8004310:	40012400 	.word	0x40012400

08004314 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a09      	ldr	r2, [pc, #36]	@ (8004348 <HAL_ADC_MspInit+0x34>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10b      	bne.n	800433e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004326:	4b09      	ldr	r3, [pc, #36]	@ (800434c <HAL_ADC_MspInit+0x38>)
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	4a08      	ldr	r2, [pc, #32]	@ (800434c <HAL_ADC_MspInit+0x38>)
 800432c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004330:	6193      	str	r3, [r2, #24]
 8004332:	4b06      	ldr	r3, [pc, #24]	@ (800434c <HAL_ADC_MspInit+0x38>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	40012400 	.word	0x40012400
 800434c:	40021000 	.word	0x40021000

08004350 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	@ 0x30
 8004354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004356:	f107 0320 	add.w	r3, r7, #32
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	605a      	str	r2, [r3, #4]
 8004360:	609a      	str	r2, [r3, #8]
 8004362:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004364:	4b6f      	ldr	r3, [pc, #444]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	4a6e      	ldr	r2, [pc, #440]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 800436a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800436e:	6193      	str	r3, [r2, #24]
 8004370:	4b6c      	ldr	r3, [pc, #432]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	4b69      	ldr	r3, [pc, #420]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	4a68      	ldr	r2, [pc, #416]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	6193      	str	r3, [r2, #24]
 8004388:	4b66      	ldr	r3, [pc, #408]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004394:	4b63      	ldr	r3, [pc, #396]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	4a62      	ldr	r2, [pc, #392]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 800439a:	f043 0308 	orr.w	r3, r3, #8
 800439e:	6193      	str	r3, [r2, #24]
 80043a0:	4b60      	ldr	r3, [pc, #384]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043ac:	4b5d      	ldr	r3, [pc, #372]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4a5c      	ldr	r2, [pc, #368]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b6:	6193      	str	r3, [r2, #24]
 80043b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043c4:	4b57      	ldr	r3, [pc, #348]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4a56      	ldr	r2, [pc, #344]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ce:	6193      	str	r3, [r2, #24]
 80043d0:	4b54      	ldr	r3, [pc, #336]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043dc:	4b51      	ldr	r3, [pc, #324]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	4a50      	ldr	r2, [pc, #320]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043e2:	f043 0320 	orr.w	r3, r3, #32
 80043e6:	6193      	str	r3, [r2, #24]
 80043e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 80043fa:	f043 0310 	orr.w	r3, r3, #16
 80043fe:	6193      	str	r3, [r2, #24]
 8004400:	4b48      	ldr	r3, [pc, #288]	@ (8004524 <MX_GPIO_Init+0x1d4>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin, GPIO_PIN_RESET);
 800440c:	2200      	movs	r2, #0
 800440e:	219c      	movs	r1, #156	@ 0x9c
 8004410:	4845      	ldr	r0, [pc, #276]	@ (8004528 <MX_GPIO_Init+0x1d8>)
 8004412:	f002 f8b2 	bl	800657a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PS2_CS_Pin|PS2_CLK_Pin|PS2_DO_Pin, GPIO_PIN_RESET);
 8004416:	2200      	movs	r2, #0
 8004418:	21b0      	movs	r1, #176	@ 0xb0
 800441a:	4844      	ldr	r0, [pc, #272]	@ (800452c <MX_GPIO_Init+0x1dc>)
 800441c:	f002 f8ad 	bl	800657a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, GPIO_PIN_RESET);
 8004420:	2200      	movs	r2, #0
 8004422:	2101      	movs	r1, #1
 8004424:	4842      	ldr	r0, [pc, #264]	@ (8004530 <MX_GPIO_Init+0x1e0>)
 8004426:	f002 f8a8 	bl	800657a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800442a:	2201      	movs	r2, #1
 800442c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004430:	4840      	ldr	r0, [pc, #256]	@ (8004534 <MX_GPIO_Init+0x1e4>)
 8004432:	f002 f8a2 	bl	800657a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LRGB_R_Pin|LRGB_B_Pin|Buzzer_Pin|LED1_Pin
 8004436:	2200      	movs	r2, #0
 8004438:	f24d 0106 	movw	r1, #53254	@ 0xd006
 800443c:	483e      	ldr	r0, [pc, #248]	@ (8004538 <MX_GPIO_Init+0x1e8>)
 800443e:	f002 f89c 	bl	800657a <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin;
 8004442:	239c      	movs	r3, #156	@ 0x9c
 8004444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004446:	2301      	movs	r3, #1
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444e:	2302      	movs	r3, #2
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004452:	f107 0320 	add.w	r3, r7, #32
 8004456:	4619      	mov	r1, r3
 8004458:	4833      	ldr	r0, [pc, #204]	@ (8004528 <MX_GPIO_Init+0x1d8>)
 800445a:	f001 fee3 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS2_CS_Pin|PS2_CLK_Pin|PS2_DO_Pin;
 800445e:	23b0      	movs	r3, #176	@ 0xb0
 8004460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004462:	2301      	movs	r3, #1
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	2300      	movs	r3, #0
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800446a:	2301      	movs	r3, #1
 800446c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446e:	f107 0320 	add.w	r3, r7, #32
 8004472:	4619      	mov	r1, r3
 8004474:	482d      	ldr	r0, [pc, #180]	@ (800452c <MX_GPIO_Init+0x1dc>)
 8004476:	f001 fed5 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DI_Pin;
 800447a:	2340      	movs	r3, #64	@ 0x40
 800447c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PS2_DI_GPIO_Port, &GPIO_InitStruct);
 8004486:	f107 0320 	add.w	r3, r7, #32
 800448a:	4619      	mov	r1, r3
 800448c:	4827      	ldr	r0, [pc, #156]	@ (800452c <MX_GPIO_Init+0x1dc>)
 800448e:	f001 fec9 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S1_Pin;
 8004492:	2301      	movs	r3, #1
 8004494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004496:	2301      	movs	r3, #1
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	2302      	movs	r3, #2
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80044a2:	f107 0320 	add.w	r3, r7, #32
 80044a6:	4619      	mov	r1, r3
 80044a8:	4821      	ldr	r0, [pc, #132]	@ (8004530 <MX_GPIO_Init+0x1e0>)
 80044aa:	f001 febb 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80044ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b4:	2301      	movs	r3, #1
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044bc:	2303      	movs	r3, #3
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80044c0:	f107 0320 	add.w	r3, r7, #32
 80044c4:	4619      	mov	r1, r3
 80044c6:	481b      	ldr	r0, [pc, #108]	@ (8004534 <MX_GPIO_Init+0x1e4>)
 80044c8:	f001 feac 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80044cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80044da:	f107 0320 	add.w	r3, r7, #32
 80044de:	4619      	mov	r1, r3
 80044e0:	4814      	ldr	r0, [pc, #80]	@ (8004534 <MX_GPIO_Init+0x1e4>)
 80044e2:	f001 fe9f 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = LRGB_R_Pin|LRGB_B_Pin|Buzzer_Pin|LED1_Pin
 80044e6:	f24d 0306 	movw	r3, #53254	@ 0xd006
 80044ea:	623b      	str	r3, [r7, #32]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ec:	2301      	movs	r3, #1
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f4:	2302      	movs	r3, #2
 80044f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044f8:	f107 0320 	add.w	r3, r7, #32
 80044fc:	4619      	mov	r1, r3
 80044fe:	480e      	ldr	r0, [pc, #56]	@ (8004538 <MX_GPIO_Init+0x1e8>)
 8004500:	f001 fe90 	bl	8006224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin|KEY3_Pin;
 8004504:	2338      	movs	r3, #56	@ 0x38
 8004506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004510:	f107 0320 	add.w	r3, r7, #32
 8004514:	4619      	mov	r1, r3
 8004516:	4808      	ldr	r0, [pc, #32]	@ (8004538 <MX_GPIO_Init+0x1e8>)
 8004518:	f001 fe84 	bl	8006224 <HAL_GPIO_Init>

}
 800451c:	bf00      	nop
 800451e:	3730      	adds	r7, #48	@ 0x30
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	40011800 	.word	0x40011800
 800452c:	40010800 	.word	0x40010800
 8004530:	40010c00 	.word	0x40010c00
 8004534:	40011c00 	.word	0x40011c00
 8004538:	40012000 	.word	0x40012000

0800453c <LL_I2C_EnableClockStretching>:
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <LL_I2C_DisableGeneralCall>:
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <LL_I2C_SetOwnAddress2>:
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <LL_I2C_DisableOwnAddress2>:
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f023 0201 	bic.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
	...

080045bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80045c4:	4b08      	ldr	r3, [pc, #32]	@ (80045e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	4907      	ldr	r1, [pc, #28]	@ (80045e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80045d0:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4013      	ands	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000

080045ec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80045f4:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <LL_APB2_GRP1_EnableClock+0x2c>)
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	4907      	ldr	r1, [pc, #28]	@ (8004618 <LL_APB2_GRP1_EnableClock+0x2c>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004600:	4b05      	ldr	r3, [pc, #20]	@ (8004618 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4013      	ands	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800460a:	68fb      	ldr	r3, [r7, #12]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	@ 0x30
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004622:	f107 0318 	add.w	r3, r7, #24
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	609a      	str	r2, [r3, #8]
 800463e:	60da      	str	r2, [r3, #12]
 8004640:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004642:	2008      	movs	r0, #8
 8004644:	f7ff ffd2 	bl	80045ec <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004648:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 800464c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800464e:	2309      	movs	r3, #9
 8004650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004652:	2303      	movs	r3, #3
 8004654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004656:	2304      	movs	r3, #4
 8004658:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	4619      	mov	r1, r3
 800465e:	4816      	ldr	r0, [pc, #88]	@ (80046b8 <MX_I2C1_Init+0x9c>)
 8004660:	f004 f993 	bl	800898a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8004664:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004668:	f7ff ffa8 	bl	80045bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800466c:	4813      	ldr	r0, [pc, #76]	@ (80046bc <MX_I2C1_Init+0xa0>)
 800466e:	f7ff ff95 	bl	800459c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8004672:	4812      	ldr	r0, [pc, #72]	@ (80046bc <MX_I2C1_Init+0xa0>)
 8004674:	f7ff ff71 	bl	800455a <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8004678:	4810      	ldr	r0, [pc, #64]	@ (80046bc <MX_I2C1_Init+0xa0>)
 800467a:	f7ff ff5f 	bl	800453c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8004682:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <MX_I2C1_Init+0xa4>)
 8004684:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8004686:	2300      	movs	r3, #0
 8004688:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800468e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8004694:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800469a:	f107 0318 	add.w	r3, r7, #24
 800469e:	4619      	mov	r1, r3
 80046a0:	4806      	ldr	r0, [pc, #24]	@ (80046bc <MX_I2C1_Init+0xa0>)
 80046a2:	f004 fac7 	bl	8008c34 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80046a6:	2100      	movs	r1, #0
 80046a8:	4804      	ldr	r0, [pc, #16]	@ (80046bc <MX_I2C1_Init+0xa0>)
 80046aa:	f7ff ff65 	bl	8004578 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046ae:	bf00      	nop
 80046b0:	3730      	adds	r7, #48	@ 0x30
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40010c00 	.word	0x40010c00
 80046bc:	40005400 	.word	0x40005400
 80046c0:	000186a0 	.word	0x000186a0

080046c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046c8:	f000 ff8a 	bl	80055e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046cc:	f000 f81c 	bl	8004708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046d0:	f7ff fe3e 	bl	8004350 <MX_GPIO_Init>
  MX_I2C1_Init();
 80046d4:	f7ff ffa2 	bl	800461c <MX_I2C1_Init>
  MX_TIM7_Init();
 80046d8:	f000 fc82 	bl	8004fe0 <MX_TIM7_Init>
  MX_TIM2_Init();
 80046dc:	f000 fb0e 	bl	8004cfc <MX_TIM2_Init>
  MX_TIM3_Init();
 80046e0:	f000 fb82 	bl	8004de8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80046e4:	f000 fbd4 	bl	8004e90 <MX_TIM4_Init>
  MX_TIM5_Init();
 80046e8:	f000 fc26 	bl	8004f38 <MX_TIM5_Init>
  MX_TIM8_Init();
 80046ec:	f000 fcac 	bl	8005048 <MX_TIM8_Init>
  MX_TIM1_Init();
 80046f0:	f000 fa40 	bl	8004b74 <MX_TIM1_Init>
  MX_ADC1_Init();
 80046f4:	f7ff fdd0 	bl	8004298 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 80046f8:	f7fe fa6e 	bl	8002bd8 <BSP_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80046fc:	f7fe fb96 	bl	8002e2c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004700:	f004 fbdc 	bl	8008ebc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <main+0x40>

08004708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b096      	sub	sp, #88	@ 0x58
 800470c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800470e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004712:	2228      	movs	r2, #40	@ 0x28
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f007 f9af 	bl	800ba7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800471c:	f107 031c 	add.w	r3, r7, #28
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	60da      	str	r2, [r3, #12]
 8004738:	611a      	str	r2, [r3, #16]
 800473a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800473c:	2301      	movs	r3, #1
 800473e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004744:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004746:	2300      	movs	r3, #0
 8004748:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800474a:	2301      	movs	r3, #1
 800474c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800474e:	2302      	movs	r3, #2
 8004750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004756:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004758:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800475c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800475e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004762:	4618      	mov	r0, r3
 8004764:	f001 ff3a 	bl	80065dc <HAL_RCC_OscConfig>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800476e:	f000 f84f 	bl	8004810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004772:	230f      	movs	r3, #15
 8004774:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004776:	2302      	movs	r3, #2
 8004778:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800477e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004782:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004784:	2300      	movs	r3, #0
 8004786:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004788:	f107 031c 	add.w	r3, r7, #28
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f002 f9a6 	bl	8006ae0 <HAL_RCC_ClockConfig>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800479a:	f000 f839 	bl	8004810 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800479e:	2302      	movs	r3, #2
 80047a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f002 fb57 	bl	8006e5c <HAL_RCCEx_PeriphCLKConfig>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80047b4:	f000 f82c 	bl	8004810 <Error_Handler>
  }
}
 80047b8:	bf00      	nop
 80047ba:	3758      	adds	r7, #88	@ 0x58
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004800 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80047d2:	f000 ff1b 	bl	800560c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM7)//10us
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a0a      	ldr	r2, [pc, #40]	@ (8004804 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d10a      	bne.n	80047f6 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		if (ultrasonic_flag)
 80047e0:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			ultrasonic_num++;
 80047e8:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	4a07      	ldr	r2, [pc, #28]	@ (800480c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80047f0:	6013      	str	r3, [r2, #0]
		}
		PwmServo_Handle();
 80047f2:	f7ff fc39 	bl	8004068 <PwmServo_Handle>
	}
  /* USER CODE END Callback 1 */
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40001000 	.word	0x40001000
 8004804:	40001400 	.word	0x40001400
 8004808:	20000874 	.word	0x20000874
 800480c:	20000870 	.word	0x20000870

08004810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004814:	b672      	cpsid	i
}
 8004816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <Error_Handler+0x8>

0800481c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004822:	4b18      	ldr	r3, [pc, #96]	@ (8004884 <HAL_MspInit+0x68>)
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	4a17      	ldr	r2, [pc, #92]	@ (8004884 <HAL_MspInit+0x68>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6193      	str	r3, [r2, #24]
 800482e:	4b15      	ldr	r3, [pc, #84]	@ (8004884 <HAL_MspInit+0x68>)
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <HAL_MspInit+0x68>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4a11      	ldr	r2, [pc, #68]	@ (8004884 <HAL_MspInit+0x68>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004844:	61d3      	str	r3, [r2, #28]
 8004846:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <HAL_MspInit+0x68>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	210f      	movs	r1, #15
 8004856:	f06f 0001 	mvn.w	r0, #1
 800485a:	f001 fcb8 	bl	80061ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800485e:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <HAL_MspInit+0x6c>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	4a04      	ldr	r2, [pc, #16]	@ (8004888 <HAL_MspInit+0x6c>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	40010000 	.word	0x40010000

0800488c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	@ 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80048a2:	4b34      	ldr	r3, [pc, #208]	@ (8004974 <HAL_InitTick+0xe8>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4a33      	ldr	r2, [pc, #204]	@ (8004974 <HAL_InitTick+0xe8>)
 80048a8:	f043 0310 	orr.w	r3, r3, #16
 80048ac:	61d3      	str	r3, [r2, #28]
 80048ae:	4b31      	ldr	r3, [pc, #196]	@ (8004974 <HAL_InitTick+0xe8>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048ba:	f107 0210 	add.w	r2, r7, #16
 80048be:	f107 0314 	add.w	r3, r7, #20
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f002 fa7b 	bl	8006dc0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d103      	bne.n	80048dc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80048d4:	f002 fa4c 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 80048d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80048da:	e004      	b.n	80048e6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80048dc:	f002 fa48 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 80048e0:	4603      	mov	r3, r0
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80048e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e8:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <HAL_InitTick+0xec>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	0c9b      	lsrs	r3, r3, #18
 80048f0:	3b01      	subs	r3, #1
 80048f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80048f4:	4b21      	ldr	r3, [pc, #132]	@ (800497c <HAL_InitTick+0xf0>)
 80048f6:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <HAL_InitTick+0xf4>)
 80048f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80048fa:	4b20      	ldr	r3, [pc, #128]	@ (800497c <HAL_InitTick+0xf0>)
 80048fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004900:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004902:	4a1e      	ldr	r2, [pc, #120]	@ (800497c <HAL_InitTick+0xf0>)
 8004904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004906:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004908:	4b1c      	ldr	r3, [pc, #112]	@ (800497c <HAL_InitTick+0xf0>)
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490e:	4b1b      	ldr	r3, [pc, #108]	@ (800497c <HAL_InitTick+0xf0>)
 8004910:	2200      	movs	r2, #0
 8004912:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004914:	4b19      	ldr	r3, [pc, #100]	@ (800497c <HAL_InitTick+0xf0>)
 8004916:	2200      	movs	r2, #0
 8004918:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800491a:	4818      	ldr	r0, [pc, #96]	@ (800497c <HAL_InitTick+0xf0>)
 800491c:	f002 fc2c 	bl	8007178 <HAL_TIM_Base_Init>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004926:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800492a:	2b00      	cmp	r3, #0
 800492c:	d11b      	bne.n	8004966 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800492e:	4813      	ldr	r0, [pc, #76]	@ (800497c <HAL_InitTick+0xf0>)
 8004930:	f002 fc72 	bl	8007218 <HAL_TIM_Base_Start_IT>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800493a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800493e:	2b00      	cmp	r3, #0
 8004940:	d111      	bne.n	8004966 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004942:	2036      	movs	r0, #54	@ 0x36
 8004944:	f001 fc5f 	bl	8006206 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d808      	bhi.n	8004960 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800494e:	2200      	movs	r2, #0
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	2036      	movs	r0, #54	@ 0x36
 8004954:	f001 fc3b 	bl	80061ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004958:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <HAL_InitTick+0xf8>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e002      	b.n	8004966 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004966:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800496a:	4618      	mov	r0, r3
 800496c:	3738      	adds	r7, #56	@ 0x38
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
 8004978:	431bde83 	.word	0x431bde83
 800497c:	200008a8 	.word	0x200008a8
 8004980:	40001000 	.word	0x40001000
 8004984:	20000060 	.word	0x20000060

08004988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <NMI_Handler+0x4>

08004990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <HardFault_Handler+0x4>

08004998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <MemManage_Handler+0x4>

080049a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <BusFault_Handler+0x4>

080049a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <UsageFault_Handler+0x4>

080049b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr

080049bc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80049c0:	4802      	ldr	r0, [pc, #8]	@ (80049cc <TIM6_IRQHandler+0x10>)
 80049c2:	f002 ff1a 	bl	80077fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200008a8 	.word	0x200008a8

080049d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80049d4:	4802      	ldr	r0, [pc, #8]	@ (80049e0 <TIM7_IRQHandler+0x10>)
 80049d6:	f002 ff10 	bl	80077fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000a5c 	.word	0x20000a5c

080049e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return 1;
 80049e8:	2301      	movs	r3, #1
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <_kill>:

int _kill(int pid, int sig)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049fc:	f007 f890 	bl	800bb20 <__errno>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2216      	movs	r2, #22
 8004a04:	601a      	str	r2, [r3, #0]
  return -1;
 8004a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_exit>:

void _exit (int status)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ffe7 	bl	80049f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <_exit+0x12>

08004a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e00a      	b.n	8004a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a3a:	f3af 8000 	nop.w
 8004a3e:	4601      	mov	r1, r0
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	60ba      	str	r2, [r7, #8]
 8004a46:	b2ca      	uxtb	r2, r1
 8004a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	dbf0      	blt.n	8004a3a <_read+0x12>
  }

  return len;
 8004a58:	687b      	ldr	r3, [r7, #4]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e009      	b.n	8004a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	60ba      	str	r2, [r7, #8]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	3301      	adds	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	dbf1      	blt.n	8004a74 <_write+0x12>
  }
  return len;
 8004a90:	687b      	ldr	r3, [r7, #4]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <_close>:

int _close(int file)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bc80      	pop	{r7}
 8004aae:	4770      	bx	lr

08004ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ac0:	605a      	str	r2, [r3, #4]
  return 0;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <_isatty>:

int _isatty(int file)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ad6:	2301      	movs	r3, #1
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b085      	sub	sp, #20
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
	...

08004afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b04:	4a14      	ldr	r2, [pc, #80]	@ (8004b58 <_sbrk+0x5c>)
 8004b06:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <_sbrk+0x60>)
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b10:	4b13      	ldr	r3, [pc, #76]	@ (8004b60 <_sbrk+0x64>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <_sbrk+0x64>)
 8004b1a:	4a12      	ldr	r2, [pc, #72]	@ (8004b64 <_sbrk+0x68>)
 8004b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b1e:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <_sbrk+0x64>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d207      	bcs.n	8004b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b2c:	f006 fff8 	bl	800bb20 <__errno>
 8004b30:	4603      	mov	r3, r0
 8004b32:	220c      	movs	r2, #12
 8004b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	e009      	b.n	8004b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b3c:	4b08      	ldr	r3, [pc, #32]	@ (8004b60 <_sbrk+0x64>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b42:	4b07      	ldr	r3, [pc, #28]	@ (8004b60 <_sbrk+0x64>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	4a05      	ldr	r2, [pc, #20]	@ (8004b60 <_sbrk+0x64>)
 8004b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20010000 	.word	0x20010000
 8004b5c:	00000400 	.word	0x00000400
 8004b60:	200008f0 	.word	0x200008f0
 8004b64:	20005d90 	.word	0x20005d90

08004b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b096      	sub	sp, #88	@ 0x58
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	611a      	str	r2, [r3, #16]
 8004ba2:	615a      	str	r2, [r3, #20]
 8004ba4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ba6:	1d3b      	adds	r3, r7, #4
 8004ba8:	2220      	movs	r2, #32
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f006 ff64 	bl	800ba7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bb2:	4b50      	ldr	r3, [pc, #320]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bb4:	4a50      	ldr	r2, [pc, #320]	@ (8004cf8 <MX_TIM1_Init+0x184>)
 8004bb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bbe:	4b4d      	ldr	r3, [pc, #308]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bc6:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8004bca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bcc:	4b49      	ldr	r3, [pc, #292]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004bd2:	4b48      	ldr	r3, [pc, #288]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bd8:	4b46      	ldr	r3, [pc, #280]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bda:	2280      	movs	r2, #128	@ 0x80
 8004bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004bde:	4845      	ldr	r0, [pc, #276]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004be0:	f002 faca 	bl	8007178 <HAL_TIM_Base_Init>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004bea:	f7ff fe11 	bl	8004810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004bf4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	483e      	ldr	r0, [pc, #248]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004bfc:	f003 f84c 	bl	8007c98 <HAL_TIM_ConfigClockSource>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004c06:	f7ff fe03 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c0a:	483a      	ldr	r0, [pc, #232]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004c0c:	f002 fb64 	bl	80072d8 <HAL_TIM_PWM_Init>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004c16:	f7ff fdfb 	bl	8004810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004c26:	4619      	mov	r1, r3
 8004c28:	4832      	ldr	r0, [pc, #200]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004c2a:	f003 fd27 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004c34:	f7ff fdec 	bl	8004810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c38:	2360      	movs	r3, #96	@ 0x60
 8004c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c40:	2300      	movs	r3, #0
 8004c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c44:	2300      	movs	r3, #0
 8004c46:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c50:	2300      	movs	r3, #0
 8004c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4825      	ldr	r0, [pc, #148]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004c5e:	f002 ff59 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004c68:	f7ff fdd2 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c70:	2204      	movs	r2, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	481f      	ldr	r0, [pc, #124]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004c76:	f002 ff4d 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004c80:	f7ff fdc6 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c88:	2208      	movs	r2, #8
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4819      	ldr	r0, [pc, #100]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004c8e:	f002 ff41 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004c98:	f7ff fdba 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ca0:	220c      	movs	r2, #12
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4813      	ldr	r0, [pc, #76]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004ca6:	f002 ff35 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004cb0:	f7ff fdae 	bl	8004810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ccc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4807      	ldr	r0, [pc, #28]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004cd8:	f003 fd3c 	bl	8008754 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004ce2:	f7ff fd95 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ce6:	4803      	ldr	r0, [pc, #12]	@ (8004cf4 <MX_TIM1_Init+0x180>)
 8004ce8:	f000 fbea 	bl	80054c0 <HAL_TIM_MspPostInit>

}
 8004cec:	bf00      	nop
 8004cee:	3758      	adds	r7, #88	@ 0x58
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200008f4 	.word	0x200008f4
 8004cf8:	40012c00 	.word	0x40012c00

08004cfc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b090      	sub	sp, #64	@ 0x40
 8004d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d02:	f107 031c 	add.w	r3, r7, #28
 8004d06:	2224      	movs	r2, #36	@ 0x24
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f006 feb5 	bl	800ba7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d26:	4b2f      	ldr	r3, [pc, #188]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004d2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d34:	4b2b      	ldr	r3, [pc, #172]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d42:	4b28      	ldr	r3, [pc, #160]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d48:	4b26      	ldr	r3, [pc, #152]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004d4e:	4825      	ldr	r0, [pc, #148]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d50:	f002 fbd4 	bl	80074fc <HAL_TIM_IC_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8004d5a:	f7ff fd59 	bl	8004810 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d62:	2300      	movs	r3, #0
 8004d64:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d66:	2301      	movs	r3, #1
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d72:	2300      	movs	r3, #0
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d76:	2301      	movs	r3, #1
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004d82:	f107 031c 	add.w	r3, r7, #28
 8004d86:	4619      	mov	r1, r3
 8004d88:	4816      	ldr	r0, [pc, #88]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004d8a:	f002 fc06 	bl	800759a <HAL_TIM_Encoder_Init>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004d94:	f7ff fd3c 	bl	8004810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	480f      	ldr	r0, [pc, #60]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004da8:	f003 fc68 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8004db2:	f7ff fd2d 	bl	8004810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	2208      	movs	r2, #8
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4805      	ldr	r0, [pc, #20]	@ (8004de4 <MX_TIM2_Init+0xe8>)
 8004dce:	f002 fe04 	bl	80079da <HAL_TIM_IC_ConfigChannel>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8004dd8:	f7ff fd1a 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ddc:	bf00      	nop
 8004dde:	3740      	adds	r7, #64	@ 0x40
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	2000093c 	.word	0x2000093c

08004de8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08c      	sub	sp, #48	@ 0x30
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004dee:	f107 030c 	add.w	r3, r7, #12
 8004df2:	2224      	movs	r2, #36	@ 0x24
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f006 fe3f 	bl	800ba7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e04:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e06:	4a21      	ldr	r2, [pc, #132]	@ (8004e8c <MX_TIM3_Init+0xa4>)
 8004e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004e16:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e24:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e32:	2301      	movs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e42:	2301      	movs	r3, #1
 8004e44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e46:	2300      	movs	r3, #0
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	4619      	mov	r1, r3
 8004e54:	480c      	ldr	r0, [pc, #48]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e56:	f002 fba0 	bl	800759a <HAL_TIM_Encoder_Init>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004e60:	f7ff fcd6 	bl	8004810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e64:	2300      	movs	r3, #0
 8004e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004e6c:	1d3b      	adds	r3, r7, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4805      	ldr	r0, [pc, #20]	@ (8004e88 <MX_TIM3_Init+0xa0>)
 8004e72:	f003 fc03 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004e7c:	f7ff fcc8 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004e80:	bf00      	nop
 8004e82:	3730      	adds	r7, #48	@ 0x30
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20000984 	.word	0x20000984
 8004e8c:	40000400 	.word	0x40000400

08004e90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	@ 0x30
 8004e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e96:	f107 030c 	add.w	r3, r7, #12
 8004e9a:	2224      	movs	r2, #36	@ 0x24
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f006 fdeb 	bl	800ba7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004eac:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004eae:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <MX_TIM4_Init+0xa4>)
 8004eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ecc:	4b18      	ldr	r3, [pc, #96]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004eda:	2301      	movs	r3, #1
 8004edc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004eea:	2301      	movs	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004ef6:	f107 030c 	add.w	r3, r7, #12
 8004efa:	4619      	mov	r1, r3
 8004efc:	480c      	ldr	r0, [pc, #48]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004efe:	f002 fb4c 	bl	800759a <HAL_TIM_Encoder_Init>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004f08:	f7ff fc82 	bl	8004810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f14:	1d3b      	adds	r3, r7, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4805      	ldr	r0, [pc, #20]	@ (8004f30 <MX_TIM4_Init+0xa0>)
 8004f1a:	f003 fbaf 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004f24:	f7ff fc74 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004f28:	bf00      	nop
 8004f2a:	3730      	adds	r7, #48	@ 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	200009cc 	.word	0x200009cc
 8004f34:	40000800 	.word	0x40000800

08004f38 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	@ 0x30
 8004f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f3e:	f107 030c 	add.w	r3, r7, #12
 8004f42:	2224      	movs	r2, #36	@ 0x24
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f006 fd97 	bl	800ba7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f4c:	1d3b      	adds	r3, r7, #4
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004f54:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004f56:	4a21      	ldr	r2, [pc, #132]	@ (8004fdc <MX_TIM5_Init+0xa4>)
 8004f58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f60:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004f66:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004f68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f74:	4b18      	ldr	r3, [pc, #96]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f82:	2301      	movs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f92:	2301      	movs	r3, #1
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004f9e:	f107 030c 	add.w	r3, r7, #12
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	480c      	ldr	r0, [pc, #48]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004fa6:	f002 faf8 	bl	800759a <HAL_TIM_Encoder_Init>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004fb0:	f7ff fc2e 	bl	8004810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4805      	ldr	r0, [pc, #20]	@ (8004fd8 <MX_TIM5_Init+0xa0>)
 8004fc2:	f003 fb5b 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004fcc:	f7ff fc20 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004fd0:	bf00      	nop
 8004fd2:	3730      	adds	r7, #48	@ 0x30
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20000a14 	.word	0x20000a14
 8004fdc:	40000c00 	.word	0x40000c00

08004fe0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004fee:	4b14      	ldr	r3, [pc, #80]	@ (8005040 <MX_TIM7_Init+0x60>)
 8004ff0:	4a14      	ldr	r2, [pc, #80]	@ (8005044 <MX_TIM7_Init+0x64>)
 8004ff2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8004ff4:	4b12      	ldr	r3, [pc, #72]	@ (8005040 <MX_TIM7_Init+0x60>)
 8004ff6:	2247      	movs	r2, #71	@ 0x47
 8004ff8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ffa:	4b11      	ldr	r3, [pc, #68]	@ (8005040 <MX_TIM7_Init+0x60>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8005000:	4b0f      	ldr	r3, [pc, #60]	@ (8005040 <MX_TIM7_Init+0x60>)
 8005002:	2209      	movs	r2, #9
 8005004:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005006:	4b0e      	ldr	r3, [pc, #56]	@ (8005040 <MX_TIM7_Init+0x60>)
 8005008:	2200      	movs	r2, #0
 800500a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800500c:	480c      	ldr	r0, [pc, #48]	@ (8005040 <MX_TIM7_Init+0x60>)
 800500e:	f002 f8b3 	bl	8007178 <HAL_TIM_Base_Init>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005018:	f7ff fbfa 	bl	8004810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800501c:	2300      	movs	r3, #0
 800501e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005020:	2300      	movs	r3, #0
 8005022:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005024:	463b      	mov	r3, r7
 8005026:	4619      	mov	r1, r3
 8005028:	4805      	ldr	r0, [pc, #20]	@ (8005040 <MX_TIM7_Init+0x60>)
 800502a:	f003 fb27 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005034:	f7ff fbec 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000a5c 	.word	0x20000a5c
 8005044:	40001400 	.word	0x40001400

08005048 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b096      	sub	sp, #88	@ 0x58
 800504c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800504e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	609a      	str	r2, [r3, #8]
 800505a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800505c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
 8005070:	609a      	str	r2, [r3, #8]
 8005072:	60da      	str	r2, [r3, #12]
 8005074:	611a      	str	r2, [r3, #16]
 8005076:	615a      	str	r2, [r3, #20]
 8005078:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	2220      	movs	r2, #32
 800507e:	2100      	movs	r1, #0
 8005080:	4618      	mov	r0, r3
 8005082:	f006 fcfa 	bl	800ba7a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005086:	4b50      	ldr	r3, [pc, #320]	@ (80051c8 <MX_TIM8_Init+0x180>)
 8005088:	4a50      	ldr	r2, [pc, #320]	@ (80051cc <MX_TIM8_Init+0x184>)
 800508a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800508c:	4b4e      	ldr	r3, [pc, #312]	@ (80051c8 <MX_TIM8_Init+0x180>)
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005092:	4b4d      	ldr	r3, [pc, #308]	@ (80051c8 <MX_TIM8_Init+0x180>)
 8005094:	2200      	movs	r2, #0
 8005096:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 8005098:	4b4b      	ldr	r3, [pc, #300]	@ (80051c8 <MX_TIM8_Init+0x180>)
 800509a:	f640 620f 	movw	r2, #3599	@ 0xe0f
 800509e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050a0:	4b49      	ldr	r3, [pc, #292]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80050a6:	4b48      	ldr	r3, [pc, #288]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050ac:	4b46      	ldr	r3, [pc, #280]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80050ae:	2280      	movs	r2, #128	@ 0x80
 80050b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80050b2:	4845      	ldr	r0, [pc, #276]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80050b4:	f002 f860 	bl	8007178 <HAL_TIM_Base_Init>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80050be:	f7ff fba7 	bl	8004810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80050c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80050cc:	4619      	mov	r1, r3
 80050ce:	483e      	ldr	r0, [pc, #248]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80050d0:	f002 fde2 	bl	8007c98 <HAL_TIM_ConfigClockSource>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80050da:	f7ff fb99 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80050de:	483a      	ldr	r0, [pc, #232]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80050e0:	f002 f8fa 	bl	80072d8 <HAL_TIM_PWM_Init>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80050ea:	f7ff fb91 	bl	8004810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80050f6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80050fa:	4619      	mov	r1, r3
 80050fc:	4832      	ldr	r0, [pc, #200]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80050fe:	f003 fabd 	bl	800867c <HAL_TIMEx_MasterConfigSynchronization>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8005108:	f7ff fb82 	bl	8004810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800510c:	2360      	movs	r3, #96	@ 0x60
 800510e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005118:	2300      	movs	r3, #0
 800511a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800511c:	2300      	movs	r3, #0
 800511e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005120:	2300      	movs	r3, #0
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005124:	2300      	movs	r3, #0
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800512c:	2200      	movs	r2, #0
 800512e:	4619      	mov	r1, r3
 8005130:	4825      	ldr	r0, [pc, #148]	@ (80051c8 <MX_TIM8_Init+0x180>)
 8005132:	f002 fcef 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800513c:	f7ff fb68 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005144:	2204      	movs	r2, #4
 8005146:	4619      	mov	r1, r3
 8005148:	481f      	ldr	r0, [pc, #124]	@ (80051c8 <MX_TIM8_Init+0x180>)
 800514a:	f002 fce3 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8005154:	f7ff fb5c 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800515c:	2208      	movs	r2, #8
 800515e:	4619      	mov	r1, r3
 8005160:	4819      	ldr	r0, [pc, #100]	@ (80051c8 <MX_TIM8_Init+0x180>)
 8005162:	f002 fcd7 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800516c:	f7ff fb50 	bl	8004810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005174:	220c      	movs	r2, #12
 8005176:	4619      	mov	r1, r3
 8005178:	4813      	ldr	r0, [pc, #76]	@ (80051c8 <MX_TIM8_Init+0x180>)
 800517a:	f002 fccb 	bl	8007b14 <HAL_TIM_PWM_ConfigChannel>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8005184:	f7ff fb44 	bl	8004810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005188:	2300      	movs	r3, #0
 800518a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800519c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4807      	ldr	r0, [pc, #28]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80051ac:	f003 fad2 	bl	8008754 <HAL_TIMEx_ConfigBreakDeadTime>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80051b6:	f7ff fb2b 	bl	8004810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80051ba:	4803      	ldr	r0, [pc, #12]	@ (80051c8 <MX_TIM8_Init+0x180>)
 80051bc:	f000 f980 	bl	80054c0 <HAL_TIM_MspPostInit>

}
 80051c0:	bf00      	nop
 80051c2:	3758      	adds	r7, #88	@ 0x58
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000aa4 	.word	0x20000aa4
 80051cc:	40013400 	.word	0x40013400

080051d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	@ (800525c <HAL_TIM_Base_MspInit+0x8c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10c      	bne.n	80051fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 80051e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80051ec:	6193      	str	r3, [r2, #24]
 80051ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80051fa:	e02a      	b.n	8005252 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM7)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a18      	ldr	r2, [pc, #96]	@ (8005264 <HAL_TIM_Base_MspInit+0x94>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d114      	bne.n	8005230 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005206:	4b16      	ldr	r3, [pc, #88]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	4a15      	ldr	r2, [pc, #84]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 800520c:	f043 0320 	orr.w	r3, r3, #32
 8005210:	61d3      	str	r3, [r2, #28]
 8005212:	4b13      	ldr	r3, [pc, #76]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	2105      	movs	r1, #5
 8005222:	2037      	movs	r0, #55	@ 0x37
 8005224:	f000 ffd3 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005228:	2037      	movs	r0, #55	@ 0x37
 800522a:	f000 ffec 	bl	8006206 <HAL_NVIC_EnableIRQ>
}
 800522e:	e010      	b.n	8005252 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM8)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a0c      	ldr	r2, [pc, #48]	@ (8005268 <HAL_TIM_Base_MspInit+0x98>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10b      	bne.n	8005252 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800523a:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	4a08      	ldr	r2, [pc, #32]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 8005240:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005244:	6193      	str	r3, [r2, #24]
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <HAL_TIM_Base_MspInit+0x90>)
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	bf00      	nop
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40012c00 	.word	0x40012c00
 8005260:	40021000 	.word	0x40021000
 8005264:	40001400 	.word	0x40001400
 8005268:	40013400 	.word	0x40013400

0800526c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	@ 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005274:	f107 0314 	add.w	r3, r7, #20
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528a:	d14e      	bne.n	800532a <HAL_TIM_IC_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800528c:	4b29      	ldr	r3, [pc, #164]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	4a28      	ldr	r2, [pc, #160]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	61d3      	str	r3, [r2, #28]
 8005298:	4b26      	ldr	r3, [pc, #152]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a4:	4b23      	ldr	r3, [pc, #140]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	4a22      	ldr	r2, [pc, #136]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6193      	str	r3, [r2, #24]
 80052b0:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 80052c2:	f043 0308 	orr.w	r3, r3, #8
 80052c6:	6193      	str	r3, [r2, #24]
 80052c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005334 <HAL_TIM_IC_MspInit+0xc8>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80052d4:	f248 0304 	movw	r3, #32772	@ 0x8004
 80052d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	4619      	mov	r1, r3
 80052e8:	4813      	ldr	r0, [pc, #76]	@ (8005338 <HAL_TIM_IC_MspInit+0xcc>)
 80052ea:	f000 ff9b 	bl	8006224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80052ee:	2308      	movs	r3, #8
 80052f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052fa:	f107 0314 	add.w	r3, r7, #20
 80052fe:	4619      	mov	r1, r3
 8005300:	480e      	ldr	r0, [pc, #56]	@ (800533c <HAL_TIM_IC_MspInit+0xd0>)
 8005302:	f000 ff8f 	bl	8006224 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005306:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <HAL_TIM_IC_MspInit+0xd4>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
 8005324:	4a06      	ldr	r2, [pc, #24]	@ (8005340 <HAL_TIM_IC_MspInit+0xd4>)
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800532a:	bf00      	nop
 800532c:	3728      	adds	r7, #40	@ 0x28
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
 8005338:	40010800 	.word	0x40010800
 800533c:	40010c00 	.word	0x40010c00
 8005340:	40010000 	.word	0x40010000

08005344 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	@ 0x38
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 0320 	add.w	r3, r7, #32
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a50      	ldr	r2, [pc, #320]	@ (80054a0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d136      	bne.n	80053d2 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005364:	4b4f      	ldr	r3, [pc, #316]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4a4e      	ldr	r2, [pc, #312]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 800536a:	f043 0302 	orr.w	r3, r3, #2
 800536e:	61d3      	str	r3, [r2, #28]
 8005370:	4b4c      	ldr	r3, [pc, #304]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800537c:	4b49      	ldr	r3, [pc, #292]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4a48      	ldr	r2, [pc, #288]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005382:	f043 0308 	orr.w	r3, r3, #8
 8005386:	6193      	str	r3, [r2, #24]
 8005388:	4b46      	ldr	r3, [pc, #280]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005394:	2330      	movs	r3, #48	@ 0x30
 8005396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	2300      	movs	r3, #0
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a0:	f107 0320 	add.w	r3, r7, #32
 80053a4:	4619      	mov	r1, r3
 80053a6:	4840      	ldr	r0, [pc, #256]	@ (80054a8 <HAL_TIM_Encoder_MspInit+0x164>)
 80053a8:	f000 ff3c 	bl	8006224 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80053ac:	4b3f      	ldr	r3, [pc, #252]	@ (80054ac <HAL_TIM_Encoder_MspInit+0x168>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80053b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80053c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80053c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ca:	4a38      	ldr	r2, [pc, #224]	@ (80054ac <HAL_TIM_Encoder_MspInit+0x168>)
 80053cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ce:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80053d0:	e061      	b.n	8005496 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a36      	ldr	r2, [pc, #216]	@ (80054b0 <HAL_TIM_Encoder_MspInit+0x16c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d133      	bne.n	8005444 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053dc:	4b31      	ldr	r3, [pc, #196]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	4a30      	ldr	r2, [pc, #192]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 80053e2:	f043 0304 	orr.w	r3, r3, #4
 80053e6:	61d3      	str	r3, [r2, #28]
 80053e8:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053f4:	4b2b      	ldr	r3, [pc, #172]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 80053fa:	f043 0320 	orr.w	r3, r3, #32
 80053fe:	6193      	str	r3, [r2, #24]
 8005400:	4b28      	ldr	r3, [pc, #160]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800540c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005412:	2300      	movs	r3, #0
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005416:	2300      	movs	r3, #0
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800541a:	f107 0320 	add.w	r3, r7, #32
 800541e:	4619      	mov	r1, r3
 8005420:	4824      	ldr	r0, [pc, #144]	@ (80054b4 <HAL_TIM_Encoder_MspInit+0x170>)
 8005422:	f000 feff 	bl	8006224 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8005426:	4b21      	ldr	r3, [pc, #132]	@ (80054ac <HAL_TIM_Encoder_MspInit+0x168>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005432:	637b      	str	r3, [r7, #52]	@ 0x34
 8005434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005436:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34
 800543c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ac <HAL_TIM_Encoder_MspInit+0x168>)
 800543e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005440:	6053      	str	r3, [r2, #4]
}
 8005442:	e028      	b.n	8005496 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1b      	ldr	r2, [pc, #108]	@ (80054b8 <HAL_TIM_Encoder_MspInit+0x174>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d123      	bne.n	8005496 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800544e:	4b15      	ldr	r3, [pc, #84]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4a14      	ldr	r2, [pc, #80]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	61d3      	str	r3, [r2, #28]
 800545a:	4b12      	ldr	r3, [pc, #72]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	4a0e      	ldr	r2, [pc, #56]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 800546c:	f043 0304 	orr.w	r3, r3, #4
 8005470:	6193      	str	r3, [r2, #24]
 8005472:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <HAL_TIM_Encoder_MspInit+0x160>)
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800547e:	2303      	movs	r3, #3
 8005480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005486:	2300      	movs	r3, #0
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800548a:	f107 0320 	add.w	r3, r7, #32
 800548e:	4619      	mov	r1, r3
 8005490:	480a      	ldr	r0, [pc, #40]	@ (80054bc <HAL_TIM_Encoder_MspInit+0x178>)
 8005492:	f000 fec7 	bl	8006224 <HAL_GPIO_Init>
}
 8005496:	bf00      	nop
 8005498:	3738      	adds	r7, #56	@ 0x38
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40010c00 	.word	0x40010c00
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40011400 	.word	0x40011400
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40010800 	.word	0x40010800

080054c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	@ 0x28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a28      	ldr	r2, [pc, #160]	@ (800557c <HAL_TIM_MspPostInit+0xbc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d12b      	bne.n	8005538 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054e0:	4b27      	ldr	r3, [pc, #156]	@ (8005580 <HAL_TIM_MspPostInit+0xc0>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	4a26      	ldr	r2, [pc, #152]	@ (8005580 <HAL_TIM_MspPostInit+0xc0>)
 80054e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054ea:	6193      	str	r3, [r2, #24]
 80054ec:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <HAL_TIM_MspPostInit+0xc0>)
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80054f8:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80054fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fe:	2302      	movs	r3, #2
 8005500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005502:	2302      	movs	r3, #2
 8005504:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005506:	f107 0314 	add.w	r3, r7, #20
 800550a:	4619      	mov	r1, r3
 800550c:	481d      	ldr	r0, [pc, #116]	@ (8005584 <HAL_TIM_MspPostInit+0xc4>)
 800550e:	f000 fe89 	bl	8006224 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8005512:	4b1d      	ldr	r3, [pc, #116]	@ (8005588 <HAL_TIM_MspPostInit+0xc8>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005526:	627b      	str	r3, [r7, #36]	@ 0x24
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005530:	4a15      	ldr	r2, [pc, #84]	@ (8005588 <HAL_TIM_MspPostInit+0xc8>)
 8005532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005534:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005536:	e01d      	b.n	8005574 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a13      	ldr	r2, [pc, #76]	@ (800558c <HAL_TIM_MspPostInit+0xcc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d118      	bne.n	8005574 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005542:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <HAL_TIM_MspPostInit+0xc0>)
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	4a0e      	ldr	r2, [pc, #56]	@ (8005580 <HAL_TIM_MspPostInit+0xc0>)
 8005548:	f043 0310 	orr.w	r3, r3, #16
 800554c:	6193      	str	r3, [r2, #24]
 800554e:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <HAL_TIM_MspPostInit+0xc0>)
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800555a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800555e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005560:	2302      	movs	r3, #2
 8005562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005564:	2302      	movs	r3, #2
 8005566:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005568:	f107 0314 	add.w	r3, r7, #20
 800556c:	4619      	mov	r1, r3
 800556e:	4808      	ldr	r0, [pc, #32]	@ (8005590 <HAL_TIM_MspPostInit+0xd0>)
 8005570:	f000 fe58 	bl	8006224 <HAL_GPIO_Init>
}
 8005574:	bf00      	nop
 8005576:	3728      	adds	r7, #40	@ 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40021000 	.word	0x40021000
 8005584:	40011800 	.word	0x40011800
 8005588:	40010000 	.word	0x40010000
 800558c:	40013400 	.word	0x40013400
 8005590:	40011000 	.word	0x40011000

08005594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005594:	f7ff fae8 	bl	8004b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005598:	480b      	ldr	r0, [pc, #44]	@ (80055c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800559a:	490c      	ldr	r1, [pc, #48]	@ (80055cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800559c:	4a0c      	ldr	r2, [pc, #48]	@ (80055d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800559e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055a0:	e002      	b.n	80055a8 <LoopCopyDataInit>

080055a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055a6:	3304      	adds	r3, #4

080055a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055ac:	d3f9      	bcc.n	80055a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ae:	4a09      	ldr	r2, [pc, #36]	@ (80055d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80055b0:	4c09      	ldr	r4, [pc, #36]	@ (80055d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055b4:	e001      	b.n	80055ba <LoopFillZerobss>

080055b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055b8:	3204      	adds	r2, #4

080055ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055bc:	d3fb      	bcc.n	80055b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055be:	f006 fab5 	bl	800bb2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055c2:	f7ff f87f 	bl	80046c4 <main>
  bx lr
 80055c6:	4770      	bx	lr
  ldr r0, =_sdata
 80055c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055cc:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80055d0:	0800e8d0 	.word	0x0800e8d0
  ldr r2, =_sbss
 80055d4:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 80055d8:	20005d90 	.word	0x20005d90

080055dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055dc:	e7fe      	b.n	80055dc <ADC1_2_IRQHandler>
	...

080055e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055e4:	4b08      	ldr	r3, [pc, #32]	@ (8005608 <HAL_Init+0x28>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a07      	ldr	r2, [pc, #28]	@ (8005608 <HAL_Init+0x28>)
 80055ea:	f043 0310 	orr.w	r3, r3, #16
 80055ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055f0:	2003      	movs	r0, #3
 80055f2:	f000 fde1 	bl	80061b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055f6:	200f      	movs	r0, #15
 80055f8:	f7ff f948 	bl	800488c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055fc:	f7ff f90e 	bl	800481c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40022000 	.word	0x40022000

0800560c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005610:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_IncTick+0x1c>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	4b05      	ldr	r3, [pc, #20]	@ (800562c <HAL_IncTick+0x20>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4413      	add	r3, r2
 800561c:	4a03      	ldr	r2, [pc, #12]	@ (800562c <HAL_IncTick+0x20>)
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20000064 	.word	0x20000064
 800562c:	20000aec 	.word	0x20000aec

08005630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return uwTick;
 8005634:	4b02      	ldr	r3, [pc, #8]	@ (8005640 <HAL_GetTick+0x10>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	20000aec 	.word	0x20000aec

08005644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800564c:	f7ff fff0 	bl	8005630 <HAL_GetTick>
 8005650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d005      	beq.n	800566a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800565e:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <HAL_Delay+0x44>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800566a:	bf00      	nop
 800566c:	f7ff ffe0 	bl	8005630 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d8f7      	bhi.n	800566c <HAL_Delay+0x28>
  {
  }
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000064 	.word	0x20000064

0800568c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e0ce      	b.n	800584c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fe fe22 	bl	8004314 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fbd7 	bl	8005e84 <ADC_ConversionStop_Disable>
 80056d6:	4603      	mov	r3, r0
 80056d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 80a9 	bne.w	800583a <HAL_ADC_Init+0x1ae>
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 80a5 	bne.w	800583a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80056f8:	f023 0302 	bic.w	r3, r3, #2
 80056fc:	f043 0202 	orr.w	r2, r3, #2
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4951      	ldr	r1, [pc, #324]	@ (8005854 <HAL_ADC_Init+0x1c8>)
 800570e:	428b      	cmp	r3, r1
 8005710:	d10a      	bne.n	8005728 <HAL_ADC_Init+0x9c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800571a:	d002      	beq.n	8005722 <HAL_ADC_Init+0x96>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	e004      	b.n	800572c <HAL_ADC_Init+0xa0>
 8005722:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005726:	e001      	b.n	800572c <HAL_ADC_Init+0xa0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800572c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	7b1b      	ldrb	r3, [r3, #12]
 8005732:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005734:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	4313      	orrs	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005744:	d003      	beq.n	800574e <HAL_ADC_Init+0xc2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d102      	bne.n	8005754 <HAL_ADC_Init+0xc8>
 800574e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005752:	e000      	b.n	8005756 <HAL_ADC_Init+0xca>
 8005754:	2300      	movs	r3, #0
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	7d1b      	ldrb	r3, [r3, #20]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d119      	bne.n	8005798 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7b1b      	ldrb	r3, [r3, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	3b01      	subs	r3, #1
 8005772:	035a      	lsls	r2, r3, #13
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	e00b      	b.n	8005798 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	f043 0201 	orr.w	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	4b29      	ldr	r3, [pc, #164]	@ (8005858 <HAL_ADC_Init+0x1cc>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	430b      	orrs	r3, r1
 80057be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c8:	d003      	beq.n	80057d2 <HAL_ADC_Init+0x146>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d104      	bne.n	80057dc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	051b      	lsls	r3, r3, #20
 80057da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	4b19      	ldr	r3, [pc, #100]	@ (800585c <HAL_ADC_Init+0x1d0>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d10b      	bne.n	8005818 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005816:	e018      	b.n	800584a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	f023 0312 	bic.w	r3, r3, #18
 8005820:	f043 0210 	orr.w	r2, r3, #16
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	f043 0201 	orr.w	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005838:	e007      	b.n	800584a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	f043 0210 	orr.w	r2, r3, #16
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40013c00 	.word	0x40013c00
 8005858:	ffe1f7fd 	.word	0xffe1f7fd
 800585c:	ff1f0efe 	.word	0xff1f0efe

08005860 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_ADC_Start+0x1a>
 8005876:	2302      	movs	r3, #2
 8005878:	e098      	b.n	80059ac <HAL_ADC_Start+0x14c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 faa4 	bl	8005dd0 <ADC_Enable>
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 8087 	bne.w	80059a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589c:	f023 0301 	bic.w	r3, r3, #1
 80058a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a41      	ldr	r2, [pc, #260]	@ (80059b4 <HAL_ADC_Start+0x154>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d105      	bne.n	80058be <HAL_ADC_Start+0x5e>
 80058b2:	4b41      	ldr	r3, [pc, #260]	@ (80059b8 <HAL_ADC_Start+0x158>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d115      	bne.n	80058ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d026      	beq.n	8005926 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80058e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058e8:	e01d      	b.n	8005926 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a2f      	ldr	r2, [pc, #188]	@ (80059b8 <HAL_ADC_Start+0x158>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_ADC_Start+0xaa>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a2b      	ldr	r2, [pc, #172]	@ (80059b4 <HAL_ADC_Start+0x154>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10d      	bne.n	8005926 <HAL_ADC_Start+0xc6>
 800590a:	4b2b      	ldr	r3, [pc, #172]	@ (80059b8 <HAL_ADC_Start+0x158>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800591e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005936:	f023 0206 	bic.w	r2, r3, #6
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800593e:	e002      	b.n	8005946 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f06f 0202 	mvn.w	r2, #2
 8005956:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005962:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005966:	d113      	bne.n	8005990 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800596c:	4a11      	ldr	r2, [pc, #68]	@ (80059b4 <HAL_ADC_Start+0x154>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d105      	bne.n	800597e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005972:	4b11      	ldr	r3, [pc, #68]	@ (80059b8 <HAL_ADC_Start+0x158>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800597a:	2b00      	cmp	r3, #0
 800597c:	d108      	bne.n	8005990 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800598c:	609a      	str	r2, [r3, #8]
 800598e:	e00c      	b.n	80059aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	e003      	b.n	80059aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40012800 	.word	0x40012800
 80059b8:	40012400 	.word	0x40012400

080059bc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80059d2:	f7ff fe2d 	bl	8005630 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f043 0220 	orr.w	r2, r3, #32
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e0d3      	b.n	8005ba6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d131      	bne.n	8005a70 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d12a      	bne.n	8005a70 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005a1a:	e021      	b.n	8005a60 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d01d      	beq.n	8005a60 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_ADC_PollForConversion+0x7e>
 8005a2a:	f7ff fe01 	bl	8005630 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d212      	bcs.n	8005a60 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10b      	bne.n	8005a60 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	f043 0204 	orr.w	r2, r3, #4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0a2      	b.n	8005ba6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0d6      	beq.n	8005a1c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005a6e:	e070      	b.n	8005b52 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005a70:	4b4f      	ldr	r3, [pc, #316]	@ (8005bb0 <HAL_ADC_PollForConversion+0x1f4>)
 8005a72:	681c      	ldr	r4, [r3, #0]
 8005a74:	2002      	movs	r0, #2
 8005a76:	f001 faa7 	bl	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6919      	ldr	r1, [r3, #16]
 8005a86:	4b4b      	ldr	r3, [pc, #300]	@ (8005bb4 <HAL_ADC_PollForConversion+0x1f8>)
 8005a88:	400b      	ands	r3, r1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d118      	bne.n	8005ac0 <HAL_ADC_PollForConversion+0x104>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68d9      	ldr	r1, [r3, #12]
 8005a94:	4b48      	ldr	r3, [pc, #288]	@ (8005bb8 <HAL_ADC_PollForConversion+0x1fc>)
 8005a96:	400b      	ands	r3, r1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d111      	bne.n	8005ac0 <HAL_ADC_PollForConversion+0x104>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6919      	ldr	r1, [r3, #16]
 8005aa2:	4b46      	ldr	r3, [pc, #280]	@ (8005bbc <HAL_ADC_PollForConversion+0x200>)
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d108      	bne.n	8005abc <HAL_ADC_PollForConversion+0x100>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68d9      	ldr	r1, [r3, #12]
 8005ab0:	4b43      	ldr	r3, [pc, #268]	@ (8005bc0 <HAL_ADC_PollForConversion+0x204>)
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_ADC_PollForConversion+0x100>
 8005ab8:	2314      	movs	r3, #20
 8005aba:	e020      	b.n	8005afe <HAL_ADC_PollForConversion+0x142>
 8005abc:	2329      	movs	r3, #41	@ 0x29
 8005abe:	e01e      	b.n	8005afe <HAL_ADC_PollForConversion+0x142>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6919      	ldr	r1, [r3, #16]
 8005ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bbc <HAL_ADC_PollForConversion+0x200>)
 8005ac8:	400b      	ands	r3, r1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_ADC_PollForConversion+0x120>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68d9      	ldr	r1, [r3, #12]
 8005ad4:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc0 <HAL_ADC_PollForConversion+0x204>)
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00d      	beq.n	8005af8 <HAL_ADC_PollForConversion+0x13c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6919      	ldr	r1, [r3, #16]
 8005ae2:	4b38      	ldr	r3, [pc, #224]	@ (8005bc4 <HAL_ADC_PollForConversion+0x208>)
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d108      	bne.n	8005afc <HAL_ADC_PollForConversion+0x140>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68d9      	ldr	r1, [r3, #12]
 8005af0:	4b34      	ldr	r3, [pc, #208]	@ (8005bc4 <HAL_ADC_PollForConversion+0x208>)
 8005af2:	400b      	ands	r3, r1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_ADC_PollForConversion+0x140>
 8005af8:	2354      	movs	r3, #84	@ 0x54
 8005afa:	e000      	b.n	8005afe <HAL_ADC_PollForConversion+0x142>
 8005afc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005b04:	e021      	b.n	8005b4a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d01a      	beq.n	8005b44 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <HAL_ADC_PollForConversion+0x168>
 8005b14:	f7ff fd8c 	bl	8005630 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d20f      	bcs.n	8005b44 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d90b      	bls.n	8005b44 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e030      	b.n	8005ba6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d8d9      	bhi.n	8005b06 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0212 	mvn.w	r2, #18
 8005b5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005b72:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8005b76:	d115      	bne.n	8005ba4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d111      	bne.n	8005ba4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd90      	pop	{r4, r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	2000005c 	.word	0x2000005c
 8005bb4:	24924924 	.word	0x24924924
 8005bb8:	00924924 	.word	0x00924924
 8005bbc:	12492492 	.word	0x12492492
 8005bc0:	00492492 	.word	0x00492492
 8005bc4:	00249249 	.word	0x00249249

08005bc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_ADC_ConfigChannel+0x20>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e0dc      	b.n	8005dba <HAL_ADC_ConfigChannel+0x1da>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b06      	cmp	r3, #6
 8005c0e:	d81c      	bhi.n	8005c4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	3b05      	subs	r3, #5
 8005c22:	221f      	movs	r2, #31
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	4019      	ands	r1, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	3b05      	subs	r3, #5
 8005c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c48:	e03c      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b0c      	cmp	r3, #12
 8005c50:	d81c      	bhi.n	8005c8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	3b23      	subs	r3, #35	@ 0x23
 8005c64:	221f      	movs	r2, #31
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	4019      	ands	r1, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3b23      	subs	r3, #35	@ 0x23
 8005c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c8a:	e01b      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3b41      	subs	r3, #65	@ 0x41
 8005c9e:	221f      	movs	r2, #31
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	4019      	ands	r1, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3b41      	subs	r3, #65	@ 0x41
 8005cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b09      	cmp	r3, #9
 8005cca:	d91c      	bls.n	8005d06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68d9      	ldr	r1, [r3, #12]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4413      	add	r3, r2
 8005cdc:	3b1e      	subs	r3, #30
 8005cde:	2207      	movs	r2, #7
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	4019      	ands	r1, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6898      	ldr	r0, [r3, #8]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3b1e      	subs	r3, #30
 8005cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	60da      	str	r2, [r3, #12]
 8005d04:	e019      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6919      	ldr	r1, [r3, #16]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	2207      	movs	r2, #7
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	4019      	ands	r1, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6898      	ldr	r0, [r3, #8]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b10      	cmp	r3, #16
 8005d40:	d003      	beq.n	8005d4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d46:	2b11      	cmp	r3, #17
 8005d48:	d132      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d125      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d126      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005d70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d11a      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d7a:	4b13      	ldr	r3, [pc, #76]	@ (8005dc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a13      	ldr	r2, [pc, #76]	@ (8005dcc <HAL_ADC_ConfigChannel+0x1ec>)
 8005d80:	fba2 2303 	umull	r2, r3, r2, r3
 8005d84:	0c9a      	lsrs	r2, r3, #18
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d90:	e002      	b.n	8005d98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f9      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x1b2>
 8005d9e:	e007      	b.n	8005db0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	40012400 	.word	0x40012400
 8005dc8:	2000005c 	.word	0x2000005c
 8005dcc:	431bde83 	.word	0x431bde83

08005dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d040      	beq.n	8005e70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <ADC_Enable+0xac>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1f      	ldr	r2, [pc, #124]	@ (8005e80 <ADC_Enable+0xb0>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	0c9b      	lsrs	r3, r3, #18
 8005e0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005e0c:	e002      	b.n	8005e14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f9      	bne.n	8005e0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e1a:	f7ff fc09 	bl	8005630 <HAL_GetTick>
 8005e1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e20:	e01f      	b.n	8005e62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005e22:	f7ff fc05 	bl	8005630 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d918      	bls.n	8005e62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d011      	beq.n	8005e62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e42:	f043 0210 	orr.w	r2, r3, #16
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4e:	f043 0201 	orr.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e007      	b.n	8005e72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d1d8      	bne.n	8005e22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	2000005c 	.word	0x2000005c
 8005e80:	431bde83 	.word	0x431bde83

08005e84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d12e      	bne.n	8005efc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eae:	f7ff fbbf 	bl	8005630 <HAL_GetTick>
 8005eb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005eb4:	e01b      	b.n	8005eee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005eb6:	f7ff fbbb 	bl	8005630 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d914      	bls.n	8005eee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d10d      	bne.n	8005eee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	f043 0210 	orr.w	r2, r3, #16
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	f043 0201 	orr.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e007      	b.n	8005efe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d0dc      	beq.n	8005eb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_ADCEx_Calibration_Start+0x1e>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e097      	b.n	8006056 <HAL_ADCEx_Calibration_Start+0x14e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ffa8 	bl	8005e84 <ADC_ConversionStop_Disable>
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff49 	bl	8005dd0 <ADC_Enable>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f040 8081 	bne.w	800604c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005f52:	f023 0302 	bic.w	r3, r3, #2
 8005f56:	f043 0202 	orr.w	r2, r3, #2
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005f5e:	4b40      	ldr	r3, [pc, #256]	@ (8006060 <HAL_ADCEx_Calibration_Start+0x158>)
 8005f60:	681c      	ldr	r4, [r3, #0]
 8005f62:	2002      	movs	r0, #2
 8005f64:	f001 f830 	bl	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005f6e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8005f70:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8005f72:	e002      	b.n	8005f7a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1f9      	bne.n	8005f74 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0208 	orr.w	r2, r2, #8
 8005f8e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005f90:	f7ff fb4e 	bl	8005630 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005f96:	e01b      	b.n	8005fd0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005f98:	f7ff fb4a 	bl	8005630 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b0a      	cmp	r3, #10
 8005fa4:	d914      	bls.n	8005fd0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00d      	beq.n	8005fd0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	f023 0312 	bic.w	r3, r3, #18
 8005fbc:	f043 0210 	orr.w	r2, r3, #16
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e042      	b.n	8006056 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1dc      	bne.n	8005f98 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0204 	orr.w	r2, r2, #4
 8005fec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005fee:	f7ff fb1f 	bl	8005630 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005ff4:	e01b      	b.n	800602e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005ff6:	f7ff fb1b 	bl	8005630 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b0a      	cmp	r3, #10
 8006002:	d914      	bls.n	800602e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006016:	f023 0312 	bic.w	r3, r3, #18
 800601a:	f043 0210 	orr.w	r2, r3, #16
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e013      	b.n	8006056 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1dc      	bne.n	8005ff6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	f023 0303 	bic.w	r3, r3, #3
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	bf00      	nop
 8006060:	2000005c 	.word	0x2000005c

08006064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006074:	4b0c      	ldr	r3, [pc, #48]	@ (80060a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006080:	4013      	ands	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800608c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006096:	4a04      	ldr	r2, [pc, #16]	@ (80060a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	60d3      	str	r3, [r2, #12]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060b0:	4b04      	ldr	r3, [pc, #16]	@ (80060c4 <__NVIC_GetPriorityGrouping+0x18>)
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	0a1b      	lsrs	r3, r3, #8
 80060b6:	f003 0307 	and.w	r3, r3, #7
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	e000ed00 	.word	0xe000ed00

080060c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	4603      	mov	r3, r0
 80060d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	db0b      	blt.n	80060f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	f003 021f 	and.w	r2, r3, #31
 80060e0:	4906      	ldr	r1, [pc, #24]	@ (80060fc <__NVIC_EnableIRQ+0x34>)
 80060e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	2001      	movs	r0, #1
 80060ea:	fa00 f202 	lsl.w	r2, r0, r2
 80060ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr
 80060fc:	e000e100 	.word	0xe000e100

08006100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	6039      	str	r1, [r7, #0]
 800610a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800610c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006110:	2b00      	cmp	r3, #0
 8006112:	db0a      	blt.n	800612a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	490c      	ldr	r1, [pc, #48]	@ (800614c <__NVIC_SetPriority+0x4c>)
 800611a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611e:	0112      	lsls	r2, r2, #4
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	440b      	add	r3, r1
 8006124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006128:	e00a      	b.n	8006140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	b2da      	uxtb	r2, r3
 800612e:	4908      	ldr	r1, [pc, #32]	@ (8006150 <__NVIC_SetPriority+0x50>)
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	f003 030f 	and.w	r3, r3, #15
 8006136:	3b04      	subs	r3, #4
 8006138:	0112      	lsls	r2, r2, #4
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	440b      	add	r3, r1
 800613e:	761a      	strb	r2, [r3, #24]
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	e000e100 	.word	0xe000e100
 8006150:	e000ed00 	.word	0xe000ed00

08006154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	@ 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f1c3 0307 	rsb	r3, r3, #7
 800616e:	2b04      	cmp	r3, #4
 8006170:	bf28      	it	cs
 8006172:	2304      	movcs	r3, #4
 8006174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3304      	adds	r3, #4
 800617a:	2b06      	cmp	r3, #6
 800617c:	d902      	bls.n	8006184 <NVIC_EncodePriority+0x30>
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3b03      	subs	r3, #3
 8006182:	e000      	b.n	8006186 <NVIC_EncodePriority+0x32>
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006188:	f04f 32ff 	mov.w	r2, #4294967295
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43da      	mvns	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	401a      	ands	r2, r3
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800619c:	f04f 31ff 	mov.w	r1, #4294967295
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	fa01 f303 	lsl.w	r3, r1, r3
 80061a6:	43d9      	mvns	r1, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061ac:	4313      	orrs	r3, r2
         );
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3724      	adds	r7, #36	@ 0x24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff4f 	bl	8006064 <__NVIC_SetPriorityGrouping>
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	4603      	mov	r3, r0
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061e0:	f7ff ff64 	bl	80060ac <__NVIC_GetPriorityGrouping>
 80061e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	6978      	ldr	r0, [r7, #20]
 80061ec:	f7ff ffb2 	bl	8006154 <NVIC_EncodePriority>
 80061f0:	4602      	mov	r2, r0
 80061f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f6:	4611      	mov	r1, r2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff ff81 	bl	8006100 <__NVIC_SetPriority>
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	4603      	mov	r3, r0
 800620e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff ff57 	bl	80060c8 <__NVIC_EnableIRQ>
}
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006224:	b480      	push	{r7}
 8006226:	b08b      	sub	sp, #44	@ 0x2c
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800622e:	2300      	movs	r3, #0
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006232:	2300      	movs	r3, #0
 8006234:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006236:	e179      	b.n	800652c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006238:	2201      	movs	r2, #1
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	4013      	ands	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	429a      	cmp	r2, r3
 8006252:	f040 8168 	bne.w	8006526 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	4a96      	ldr	r2, [pc, #600]	@ (80064b4 <HAL_GPIO_Init+0x290>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d05e      	beq.n	800631e <HAL_GPIO_Init+0xfa>
 8006260:	4a94      	ldr	r2, [pc, #592]	@ (80064b4 <HAL_GPIO_Init+0x290>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d875      	bhi.n	8006352 <HAL_GPIO_Init+0x12e>
 8006266:	4a94      	ldr	r2, [pc, #592]	@ (80064b8 <HAL_GPIO_Init+0x294>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d058      	beq.n	800631e <HAL_GPIO_Init+0xfa>
 800626c:	4a92      	ldr	r2, [pc, #584]	@ (80064b8 <HAL_GPIO_Init+0x294>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d86f      	bhi.n	8006352 <HAL_GPIO_Init+0x12e>
 8006272:	4a92      	ldr	r2, [pc, #584]	@ (80064bc <HAL_GPIO_Init+0x298>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d052      	beq.n	800631e <HAL_GPIO_Init+0xfa>
 8006278:	4a90      	ldr	r2, [pc, #576]	@ (80064bc <HAL_GPIO_Init+0x298>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d869      	bhi.n	8006352 <HAL_GPIO_Init+0x12e>
 800627e:	4a90      	ldr	r2, [pc, #576]	@ (80064c0 <HAL_GPIO_Init+0x29c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d04c      	beq.n	800631e <HAL_GPIO_Init+0xfa>
 8006284:	4a8e      	ldr	r2, [pc, #568]	@ (80064c0 <HAL_GPIO_Init+0x29c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d863      	bhi.n	8006352 <HAL_GPIO_Init+0x12e>
 800628a:	4a8e      	ldr	r2, [pc, #568]	@ (80064c4 <HAL_GPIO_Init+0x2a0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d046      	beq.n	800631e <HAL_GPIO_Init+0xfa>
 8006290:	4a8c      	ldr	r2, [pc, #560]	@ (80064c4 <HAL_GPIO_Init+0x2a0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d85d      	bhi.n	8006352 <HAL_GPIO_Init+0x12e>
 8006296:	2b12      	cmp	r3, #18
 8006298:	d82a      	bhi.n	80062f0 <HAL_GPIO_Init+0xcc>
 800629a:	2b12      	cmp	r3, #18
 800629c:	d859      	bhi.n	8006352 <HAL_GPIO_Init+0x12e>
 800629e:	a201      	add	r2, pc, #4	@ (adr r2, 80062a4 <HAL_GPIO_Init+0x80>)
 80062a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a4:	0800631f 	.word	0x0800631f
 80062a8:	080062f9 	.word	0x080062f9
 80062ac:	0800630b 	.word	0x0800630b
 80062b0:	0800634d 	.word	0x0800634d
 80062b4:	08006353 	.word	0x08006353
 80062b8:	08006353 	.word	0x08006353
 80062bc:	08006353 	.word	0x08006353
 80062c0:	08006353 	.word	0x08006353
 80062c4:	08006353 	.word	0x08006353
 80062c8:	08006353 	.word	0x08006353
 80062cc:	08006353 	.word	0x08006353
 80062d0:	08006353 	.word	0x08006353
 80062d4:	08006353 	.word	0x08006353
 80062d8:	08006353 	.word	0x08006353
 80062dc:	08006353 	.word	0x08006353
 80062e0:	08006353 	.word	0x08006353
 80062e4:	08006353 	.word	0x08006353
 80062e8:	08006301 	.word	0x08006301
 80062ec:	08006315 	.word	0x08006315
 80062f0:	4a75      	ldr	r2, [pc, #468]	@ (80064c8 <HAL_GPIO_Init+0x2a4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80062f6:	e02c      	b.n	8006352 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	623b      	str	r3, [r7, #32]
          break;
 80062fe:	e029      	b.n	8006354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	3304      	adds	r3, #4
 8006306:	623b      	str	r3, [r7, #32]
          break;
 8006308:	e024      	b.n	8006354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	3308      	adds	r3, #8
 8006310:	623b      	str	r3, [r7, #32]
          break;
 8006312:	e01f      	b.n	8006354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	330c      	adds	r3, #12
 800631a:	623b      	str	r3, [r7, #32]
          break;
 800631c:	e01a      	b.n	8006354 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006326:	2304      	movs	r3, #4
 8006328:	623b      	str	r3, [r7, #32]
          break;
 800632a:	e013      	b.n	8006354 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d105      	bne.n	8006340 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006334:	2308      	movs	r3, #8
 8006336:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	611a      	str	r2, [r3, #16]
          break;
 800633e:	e009      	b.n	8006354 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006340:	2308      	movs	r3, #8
 8006342:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	615a      	str	r2, [r3, #20]
          break;
 800634a:	e003      	b.n	8006354 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800634c:	2300      	movs	r3, #0
 800634e:	623b      	str	r3, [r7, #32]
          break;
 8006350:	e000      	b.n	8006354 <HAL_GPIO_Init+0x130>
          break;
 8006352:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2bff      	cmp	r3, #255	@ 0xff
 8006358:	d801      	bhi.n	800635e <HAL_GPIO_Init+0x13a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	e001      	b.n	8006362 <HAL_GPIO_Init+0x13e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3304      	adds	r3, #4
 8006362:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2bff      	cmp	r3, #255	@ 0xff
 8006368:	d802      	bhi.n	8006370 <HAL_GPIO_Init+0x14c>
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	e002      	b.n	8006376 <HAL_GPIO_Init+0x152>
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	3b08      	subs	r3, #8
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	210f      	movs	r1, #15
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	fa01 f303 	lsl.w	r3, r1, r3
 8006384:	43db      	mvns	r3, r3
 8006386:	401a      	ands	r2, r3
 8006388:	6a39      	ldr	r1, [r7, #32]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	fa01 f303 	lsl.w	r3, r1, r3
 8006390:	431a      	orrs	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 80c1 	beq.w	8006526 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80063a4:	4b49      	ldr	r3, [pc, #292]	@ (80064cc <HAL_GPIO_Init+0x2a8>)
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	4a48      	ldr	r2, [pc, #288]	@ (80064cc <HAL_GPIO_Init+0x2a8>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6193      	str	r3, [r2, #24]
 80063b0:	4b46      	ldr	r3, [pc, #280]	@ (80064cc <HAL_GPIO_Init+0x2a8>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]
 80063ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80063bc:	4a44      	ldr	r2, [pc, #272]	@ (80064d0 <HAL_GPIO_Init+0x2ac>)
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	089b      	lsrs	r3, r3, #2
 80063c2:	3302      	adds	r3, #2
 80063c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	220f      	movs	r2, #15
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	43db      	mvns	r3, r3
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4013      	ands	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a3c      	ldr	r2, [pc, #240]	@ (80064d4 <HAL_GPIO_Init+0x2b0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d01f      	beq.n	8006428 <HAL_GPIO_Init+0x204>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a3b      	ldr	r2, [pc, #236]	@ (80064d8 <HAL_GPIO_Init+0x2b4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d019      	beq.n	8006424 <HAL_GPIO_Init+0x200>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a3a      	ldr	r2, [pc, #232]	@ (80064dc <HAL_GPIO_Init+0x2b8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <HAL_GPIO_Init+0x1fc>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a39      	ldr	r2, [pc, #228]	@ (80064e0 <HAL_GPIO_Init+0x2bc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00d      	beq.n	800641c <HAL_GPIO_Init+0x1f8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a38      	ldr	r2, [pc, #224]	@ (80064e4 <HAL_GPIO_Init+0x2c0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d007      	beq.n	8006418 <HAL_GPIO_Init+0x1f4>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a37      	ldr	r2, [pc, #220]	@ (80064e8 <HAL_GPIO_Init+0x2c4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d101      	bne.n	8006414 <HAL_GPIO_Init+0x1f0>
 8006410:	2305      	movs	r3, #5
 8006412:	e00a      	b.n	800642a <HAL_GPIO_Init+0x206>
 8006414:	2306      	movs	r3, #6
 8006416:	e008      	b.n	800642a <HAL_GPIO_Init+0x206>
 8006418:	2304      	movs	r3, #4
 800641a:	e006      	b.n	800642a <HAL_GPIO_Init+0x206>
 800641c:	2303      	movs	r3, #3
 800641e:	e004      	b.n	800642a <HAL_GPIO_Init+0x206>
 8006420:	2302      	movs	r3, #2
 8006422:	e002      	b.n	800642a <HAL_GPIO_Init+0x206>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <HAL_GPIO_Init+0x206>
 8006428:	2300      	movs	r3, #0
 800642a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642c:	f002 0203 	and.w	r2, r2, #3
 8006430:	0092      	lsls	r2, r2, #2
 8006432:	4093      	lsls	r3, r2
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800643a:	4925      	ldr	r1, [pc, #148]	@ (80064d0 <HAL_GPIO_Init+0x2ac>)
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	089b      	lsrs	r3, r3, #2
 8006440:	3302      	adds	r3, #2
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d006      	beq.n	8006462 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006454:	4b25      	ldr	r3, [pc, #148]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	4924      	ldr	r1, [pc, #144]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	4313      	orrs	r3, r2
 800645e:	608b      	str	r3, [r1, #8]
 8006460:	e006      	b.n	8006470 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006462:	4b22      	ldr	r3, [pc, #136]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	43db      	mvns	r3, r3
 800646a:	4920      	ldr	r1, [pc, #128]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 800646c:	4013      	ands	r3, r2
 800646e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800647c:	4b1b      	ldr	r3, [pc, #108]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	491a      	ldr	r1, [pc, #104]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	4313      	orrs	r3, r2
 8006486:	60cb      	str	r3, [r1, #12]
 8006488:	e006      	b.n	8006498 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800648a:	4b18      	ldr	r3, [pc, #96]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	43db      	mvns	r3, r3
 8006492:	4916      	ldr	r1, [pc, #88]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 8006494:	4013      	ands	r3, r2
 8006496:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d025      	beq.n	80064f0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80064a4:	4b11      	ldr	r3, [pc, #68]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	4910      	ldr	r1, [pc, #64]	@ (80064ec <HAL_GPIO_Init+0x2c8>)
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	604b      	str	r3, [r1, #4]
 80064b0:	e025      	b.n	80064fe <HAL_GPIO_Init+0x2da>
 80064b2:	bf00      	nop
 80064b4:	10320000 	.word	0x10320000
 80064b8:	10310000 	.word	0x10310000
 80064bc:	10220000 	.word	0x10220000
 80064c0:	10210000 	.word	0x10210000
 80064c4:	10120000 	.word	0x10120000
 80064c8:	10110000 	.word	0x10110000
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40010000 	.word	0x40010000
 80064d4:	40010800 	.word	0x40010800
 80064d8:	40010c00 	.word	0x40010c00
 80064dc:	40011000 	.word	0x40011000
 80064e0:	40011400 	.word	0x40011400
 80064e4:	40011800 	.word	0x40011800
 80064e8:	40011c00 	.word	0x40011c00
 80064ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80064f0:	4b15      	ldr	r3, [pc, #84]	@ (8006548 <HAL_GPIO_Init+0x324>)
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	43db      	mvns	r3, r3
 80064f8:	4913      	ldr	r1, [pc, #76]	@ (8006548 <HAL_GPIO_Init+0x324>)
 80064fa:	4013      	ands	r3, r2
 80064fc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d006      	beq.n	8006518 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800650a:	4b0f      	ldr	r3, [pc, #60]	@ (8006548 <HAL_GPIO_Init+0x324>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	490e      	ldr	r1, [pc, #56]	@ (8006548 <HAL_GPIO_Init+0x324>)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	4313      	orrs	r3, r2
 8006514:	600b      	str	r3, [r1, #0]
 8006516:	e006      	b.n	8006526 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006518:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <HAL_GPIO_Init+0x324>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	43db      	mvns	r3, r3
 8006520:	4909      	ldr	r1, [pc, #36]	@ (8006548 <HAL_GPIO_Init+0x324>)
 8006522:	4013      	ands	r3, r2
 8006524:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	3301      	adds	r3, #1
 800652a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	fa22 f303 	lsr.w	r3, r2, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f ae7e 	bne.w	8006238 <HAL_GPIO_Init+0x14>
  }
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	372c      	adds	r7, #44	@ 0x2c
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	40010400 	.word	0x40010400

0800654c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	887b      	ldrh	r3, [r7, #2]
 800655e:	4013      	ands	r3, r2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	e001      	b.n	800656e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	460b      	mov	r3, r1
 8006584:	807b      	strh	r3, [r7, #2]
 8006586:	4613      	mov	r3, r2
 8006588:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800658a:	787b      	ldrb	r3, [r7, #1]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006590:	887a      	ldrh	r2, [r7, #2]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006596:	e003      	b.n	80065a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006598:	887b      	ldrh	r3, [r7, #2]
 800659a:	041a      	lsls	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	611a      	str	r2, [r3, #16]
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80065bc:	887a      	ldrh	r2, [r7, #2]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4013      	ands	r3, r2
 80065c2:	041a      	lsls	r2, r3, #16
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	43d9      	mvns	r1, r3
 80065c8:	887b      	ldrh	r3, [r7, #2]
 80065ca:	400b      	ands	r3, r1
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	611a      	str	r2, [r3, #16]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr

080065dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e272      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8087 	beq.w	800670a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065fc:	4b92      	ldr	r3, [pc, #584]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 030c 	and.w	r3, r3, #12
 8006604:	2b04      	cmp	r3, #4
 8006606:	d00c      	beq.n	8006622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006608:	4b8f      	ldr	r3, [pc, #572]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f003 030c 	and.w	r3, r3, #12
 8006610:	2b08      	cmp	r3, #8
 8006612:	d112      	bne.n	800663a <HAL_RCC_OscConfig+0x5e>
 8006614:	4b8c      	ldr	r3, [pc, #560]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006620:	d10b      	bne.n	800663a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006622:	4b89      	ldr	r3, [pc, #548]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d06c      	beq.n	8006708 <HAL_RCC_OscConfig+0x12c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d168      	bne.n	8006708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e24c      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x76>
 8006644:	4b80      	ldr	r3, [pc, #512]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7f      	ldr	r2, [pc, #508]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800664a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	e02e      	b.n	80066b0 <HAL_RCC_OscConfig+0xd4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0x98>
 800665a:	4b7b      	ldr	r3, [pc, #492]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7a      	ldr	r2, [pc, #488]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	4b78      	ldr	r3, [pc, #480]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a77      	ldr	r2, [pc, #476]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800666c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e01d      	b.n	80066b0 <HAL_RCC_OscConfig+0xd4>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800667c:	d10c      	bne.n	8006698 <HAL_RCC_OscConfig+0xbc>
 800667e:	4b72      	ldr	r3, [pc, #456]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a71      	ldr	r2, [pc, #452]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	4b6f      	ldr	r3, [pc, #444]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a6e      	ldr	r2, [pc, #440]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e00b      	b.n	80066b0 <HAL_RCC_OscConfig+0xd4>
 8006698:	4b6b      	ldr	r3, [pc, #428]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a6a      	ldr	r2, [pc, #424]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800669e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	4b68      	ldr	r3, [pc, #416]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a67      	ldr	r2, [pc, #412]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d013      	beq.n	80066e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b8:	f7fe ffba 	bl	8005630 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c0:	f7fe ffb6 	bl	8005630 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	@ 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e200      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0xe4>
 80066de:	e014      	b.n	800670a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e0:	f7fe ffa6 	bl	8005630 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e8:	f7fe ffa2 	bl	8005630 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b64      	cmp	r3, #100	@ 0x64
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e1ec      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066fa:	4b53      	ldr	r3, [pc, #332]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x10c>
 8006706:	e000      	b.n	800670a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d063      	beq.n	80067de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006716:	4b4c      	ldr	r3, [pc, #304]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 030c 	and.w	r3, r3, #12
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006722:	4b49      	ldr	r3, [pc, #292]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 030c 	and.w	r3, r3, #12
 800672a:	2b08      	cmp	r3, #8
 800672c:	d11c      	bne.n	8006768 <HAL_RCC_OscConfig+0x18c>
 800672e:	4b46      	ldr	r3, [pc, #280]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d116      	bne.n	8006768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800673a:	4b43      	ldr	r3, [pc, #268]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_RCC_OscConfig+0x176>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d001      	beq.n	8006752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e1c0      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006752:	4b3d      	ldr	r3, [pc, #244]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4939      	ldr	r1, [pc, #228]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006766:	e03a      	b.n	80067de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d020      	beq.n	80067b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006770:	4b36      	ldr	r3, [pc, #216]	@ (800684c <HAL_RCC_OscConfig+0x270>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006776:	f7fe ff5b 	bl	8005630 <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677e:	f7fe ff57 	bl	8005630 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e1a1      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006790:	4b2d      	ldr	r3, [pc, #180]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800679c:	4b2a      	ldr	r3, [pc, #168]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4927      	ldr	r1, [pc, #156]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	600b      	str	r3, [r1, #0]
 80067b0:	e015      	b.n	80067de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067b2:	4b26      	ldr	r3, [pc, #152]	@ (800684c <HAL_RCC_OscConfig+0x270>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fe ff3a 	bl	8005630 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c0:	f7fe ff36 	bl	8005630 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e180      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d03a      	beq.n	8006860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d019      	beq.n	8006826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067f2:	4b17      	ldr	r3, [pc, #92]	@ (8006850 <HAL_RCC_OscConfig+0x274>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f8:	f7fe ff1a 	bl	8005630 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006800:	f7fe ff16 	bl	8005630 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e160      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800681e:	2001      	movs	r0, #1
 8006820:	f000 fafe 	bl	8006e20 <RCC_Delay>
 8006824:	e01c      	b.n	8006860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006826:	4b0a      	ldr	r3, [pc, #40]	@ (8006850 <HAL_RCC_OscConfig+0x274>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682c:	f7fe ff00 	bl	8005630 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006832:	e00f      	b.n	8006854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006834:	f7fe fefc 	bl	8005630 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d908      	bls.n	8006854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e146      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
 8006846:	bf00      	nop
 8006848:	40021000 	.word	0x40021000
 800684c:	42420000 	.word	0x42420000
 8006850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006854:	4b92      	ldr	r3, [pc, #584]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e9      	bne.n	8006834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80a6 	beq.w	80069ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800686e:	2300      	movs	r3, #0
 8006870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006872:	4b8b      	ldr	r3, [pc, #556]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10d      	bne.n	800689a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800687e:	4b88      	ldr	r3, [pc, #544]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4a87      	ldr	r2, [pc, #540]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006888:	61d3      	str	r3, [r2, #28]
 800688a:	4b85      	ldr	r3, [pc, #532]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006892:	60bb      	str	r3, [r7, #8]
 8006894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006896:	2301      	movs	r3, #1
 8006898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800689a:	4b82      	ldr	r3, [pc, #520]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d118      	bne.n	80068d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068a6:	4b7f      	ldr	r3, [pc, #508]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a7e      	ldr	r2, [pc, #504]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 80068ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068b2:	f7fe febd 	bl	8005630 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ba:	f7fe feb9 	bl	8005630 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b64      	cmp	r3, #100	@ 0x64
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e103      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068cc:	4b75      	ldr	r3, [pc, #468]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0f0      	beq.n	80068ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d106      	bne.n	80068ee <HAL_RCC_OscConfig+0x312>
 80068e0:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	4a6e      	ldr	r2, [pc, #440]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	6213      	str	r3, [r2, #32]
 80068ec:	e02d      	b.n	800694a <HAL_RCC_OscConfig+0x36e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <HAL_RCC_OscConfig+0x334>
 80068f6:	4b6a      	ldr	r3, [pc, #424]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	4a69      	ldr	r2, [pc, #420]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	6213      	str	r3, [r2, #32]
 8006902:	4b67      	ldr	r3, [pc, #412]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	4a66      	ldr	r2, [pc, #408]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006908:	f023 0304 	bic.w	r3, r3, #4
 800690c:	6213      	str	r3, [r2, #32]
 800690e:	e01c      	b.n	800694a <HAL_RCC_OscConfig+0x36e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	2b05      	cmp	r3, #5
 8006916:	d10c      	bne.n	8006932 <HAL_RCC_OscConfig+0x356>
 8006918:	4b61      	ldr	r3, [pc, #388]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	4a60      	ldr	r2, [pc, #384]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800691e:	f043 0304 	orr.w	r3, r3, #4
 8006922:	6213      	str	r3, [r2, #32]
 8006924:	4b5e      	ldr	r3, [pc, #376]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	4a5d      	ldr	r2, [pc, #372]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6213      	str	r3, [r2, #32]
 8006930:	e00b      	b.n	800694a <HAL_RCC_OscConfig+0x36e>
 8006932:	4b5b      	ldr	r3, [pc, #364]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	4a5a      	ldr	r2, [pc, #360]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	6213      	str	r3, [r2, #32]
 800693e:	4b58      	ldr	r3, [pc, #352]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	4a57      	ldr	r2, [pc, #348]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006944:	f023 0304 	bic.w	r3, r3, #4
 8006948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d015      	beq.n	800697e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006952:	f7fe fe6d 	bl	8005630 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006958:	e00a      	b.n	8006970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695a:	f7fe fe69 	bl	8005630 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006968:	4293      	cmp	r3, r2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e0b1      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006970:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ee      	beq.n	800695a <HAL_RCC_OscConfig+0x37e>
 800697c:	e014      	b.n	80069a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697e:	f7fe fe57 	bl	8005630 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fe fe53 	bl	8005630 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e09b      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800699c:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1ee      	bne.n	8006986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d105      	bne.n	80069ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ae:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	4a3b      	ldr	r2, [pc, #236]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8087 	beq.w	8006ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069c4:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f003 030c 	and.w	r3, r3, #12
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d061      	beq.n	8006a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d146      	bne.n	8006a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d8:	4b33      	ldr	r3, [pc, #204]	@ (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069de:	f7fe fe27 	bl	8005630 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e6:	f7fe fe23 	bl	8005630 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e06d      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069f8:	4b29      	ldr	r3, [pc, #164]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f0      	bne.n	80069e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0c:	d108      	bne.n	8006a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a0e:	4b24      	ldr	r3, [pc, #144]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	4921      	ldr	r1, [pc, #132]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a20:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a19      	ldr	r1, [r3, #32]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	430b      	orrs	r3, r1
 8006a32:	491b      	ldr	r1, [pc, #108]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a38:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3e:	f7fe fdf7 	bl	8005630 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a46:	f7fe fdf3 	bl	8005630 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e03d      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f0      	beq.n	8006a46 <HAL_RCC_OscConfig+0x46a>
 8006a64:	e035      	b.n	8006ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a66:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6c:	f7fe fde0 	bl	8005630 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a74:	f7fe fddc 	bl	8005630 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e026      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f0      	bne.n	8006a74 <HAL_RCC_OscConfig+0x498>
 8006a92:	e01e      	b.n	8006ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e019      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	40007000 	.word	0x40007000
 8006aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006aac:	4b0b      	ldr	r3, [pc, #44]	@ (8006adc <HAL_RCC_OscConfig+0x500>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d001      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40021000 	.word	0x40021000

08006ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e0d0      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af4:	4b6a      	ldr	r3, [pc, #424]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d910      	bls.n	8006b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b02:	4b67      	ldr	r3, [pc, #412]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 0207 	bic.w	r2, r3, #7
 8006b0a:	4965      	ldr	r1, [pc, #404]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	4b63      	ldr	r3, [pc, #396]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0b8      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d020      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b3c:	4b59      	ldr	r3, [pc, #356]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a58      	ldr	r2, [pc, #352]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b54:	4b53      	ldr	r3, [pc, #332]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4a52      	ldr	r2, [pc, #328]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b60:	4b50      	ldr	r3, [pc, #320]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	494d      	ldr	r1, [pc, #308]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d040      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d107      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b86:	4b47      	ldr	r3, [pc, #284]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d115      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e07f      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d107      	bne.n	8006bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e073      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bae:	4b3d      	ldr	r3, [pc, #244]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e06b      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f023 0203 	bic.w	r2, r3, #3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	4936      	ldr	r1, [pc, #216]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bd0:	f7fe fd2e 	bl	8005630 <HAL_GetTick>
 8006bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd6:	e00a      	b.n	8006bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd8:	f7fe fd2a 	bl	8005630 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e053      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bee:	4b2d      	ldr	r3, [pc, #180]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f003 020c 	and.w	r2, r3, #12
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d1eb      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c00:	4b27      	ldr	r3, [pc, #156]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d210      	bcs.n	8006c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0e:	4b24      	ldr	r3, [pc, #144]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 0207 	bic.w	r2, r3, #7
 8006c16:	4922      	ldr	r1, [pc, #136]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1e:	4b20      	ldr	r3, [pc, #128]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e032      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4916      	ldr	r1, [pc, #88]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	490e      	ldr	r1, [pc, #56]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c6e:	f000 f821 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 8006c72:	4602      	mov	r2, r0
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	091b      	lsrs	r3, r3, #4
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	490a      	ldr	r1, [pc, #40]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c80:	5ccb      	ldrb	r3, [r1, r3]
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	4a09      	ldr	r2, [pc, #36]	@ (8006cac <HAL_RCC_ClockConfig+0x1cc>)
 8006c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c8a:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd fdfc 	bl	800488c <HAL_InitTick>

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40022000 	.word	0x40022000
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	0800e514 	.word	0x0800e514
 8006cac:	2000005c 	.word	0x2000005c
 8006cb0:	20000060 	.word	0x20000060

08006cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cce:	4b1e      	ldr	r3, [pc, #120]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 030c 	and.w	r3, r3, #12
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d002      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x30>
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d003      	beq.n	8006cea <HAL_RCC_GetSysClockFreq+0x36>
 8006ce2:	e027      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ce4:	4b19      	ldr	r3, [pc, #100]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8006ce6:	613b      	str	r3, [r7, #16]
      break;
 8006ce8:	e027      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	0c9b      	lsrs	r3, r3, #18
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	4a17      	ldr	r2, [pc, #92]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cf4:	5cd3      	ldrb	r3, [r2, r3]
 8006cf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d02:	4b11      	ldr	r3, [pc, #68]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	0c5b      	lsrs	r3, r3, #17
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	4a11      	ldr	r2, [pc, #68]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d0e:	5cd3      	ldrb	r3, [r2, r3]
 8006d10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a0d      	ldr	r2, [pc, #52]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8006d16:	fb03 f202 	mul.w	r2, r3, r2
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e004      	b.n	8006d2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a0c      	ldr	r2, [pc, #48]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d28:	fb02 f303 	mul.w	r3, r2, r3
 8006d2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	613b      	str	r3, [r7, #16]
      break;
 8006d32:	e002      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8006d36:	613b      	str	r3, [r7, #16]
      break;
 8006d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d3a:	693b      	ldr	r3, [r7, #16]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	007a1200 	.word	0x007a1200
 8006d50:	0800e52c 	.word	0x0800e52c
 8006d54:	0800e53c 	.word	0x0800e53c
 8006d58:	003d0900 	.word	0x003d0900

08006d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d60:	4b02      	ldr	r3, [pc, #8]	@ (8006d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d62:	681b      	ldr	r3, [r3, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr
 8006d6c:	2000005c 	.word	0x2000005c

08006d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d74:	f7ff fff2 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	0a1b      	lsrs	r3, r3, #8
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4903      	ldr	r1, [pc, #12]	@ (8006d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d86:	5ccb      	ldrb	r3, [r1, r3]
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40021000 	.word	0x40021000
 8006d94:	0800e524 	.word	0x0800e524

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	f7ff ffde 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	0adb      	lsrs	r3, r3, #11
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4903      	ldr	r1, [pc, #12]	@ (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	0800e524 	.word	0x0800e524

08006dc0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	220f      	movs	r2, #15
 8006dce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006dd0:	4b11      	ldr	r3, [pc, #68]	@ (8006e18 <HAL_RCC_GetClockConfig+0x58>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 0203 	and.w	r2, r3, #3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8006e18 <HAL_RCC_GetClockConfig+0x58>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006de8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <HAL_RCC_GetClockConfig+0x58>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006df4:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <HAL_RCC_GetClockConfig+0x58>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	08db      	lsrs	r3, r3, #3
 8006dfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e02:	4b06      	ldr	r3, [pc, #24]	@ (8006e1c <HAL_RCC_GetClockConfig+0x5c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0207 	and.w	r2, r3, #7
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	40022000 	.word	0x40022000

08006e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e28:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <RCC_Delay+0x34>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <RCC_Delay+0x38>)
 8006e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e32:	0a5b      	lsrs	r3, r3, #9
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
 8006e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e3c:	bf00      	nop
  }
  while (Delay --);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	60fa      	str	r2, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f9      	bne.n	8006e3c <RCC_Delay+0x1c>
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	2000005c 	.word	0x2000005c
 8006e58:	10624dd3 	.word	0x10624dd3

08006e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d07d      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10d      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e88:	4b4c      	ldr	r3, [pc, #304]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e92:	61d3      	str	r3, [r2, #28]
 8006e94:	4b49      	ldr	r3, [pc, #292]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea4:	4b46      	ldr	r3, [pc, #280]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d118      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eb0:	4b43      	ldr	r3, [pc, #268]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a42      	ldr	r2, [pc, #264]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ebc:	f7fe fbb8 	bl	8005630 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec4:	f7fe fbb4 	bl	8005630 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	@ 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e06d      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ee2:	4b36      	ldr	r3, [pc, #216]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d02e      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d027      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f00:	4b2e      	ldr	r3, [pc, #184]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f10:	4b2c      	ldr	r3, [pc, #176]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f16:	4a29      	ldr	r2, [pc, #164]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d014      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f26:	f7fe fb83 	bl	8005630 <HAL_GetTick>
 8006f2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2c:	e00a      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f2e:	f7fe fb7f 	bl	8005630 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e036      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f44:	4b1d      	ldr	r3, [pc, #116]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0ee      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f50:	4b1a      	ldr	r3, [pc, #104]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4917      	ldr	r1, [pc, #92]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d105      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f68:	4b14      	ldr	r3, [pc, #80]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	4a13      	ldr	r2, [pc, #76]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f80:	4b0e      	ldr	r3, [pc, #56]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	490b      	ldr	r1, [pc, #44]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d008      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f9e:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	4904      	ldr	r1, [pc, #16]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	40007000 	.word	0x40007000
 8006fc4:	42420440 	.word	0x42420440

08006fc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2b0f      	cmp	r3, #15
 8006fea:	f200 80af 	bhi.w	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	080070cb 	.word	0x080070cb
 8006ff8:	08007131 	.word	0x08007131
 8006ffc:	0800714d 	.word	0x0800714d
 8007000:	080070bb 	.word	0x080070bb
 8007004:	0800714d 	.word	0x0800714d
 8007008:	0800714d 	.word	0x0800714d
 800700c:	0800714d 	.word	0x0800714d
 8007010:	080070c3 	.word	0x080070c3
 8007014:	0800714d 	.word	0x0800714d
 8007018:	0800714d 	.word	0x0800714d
 800701c:	0800714d 	.word	0x0800714d
 8007020:	0800714d 	.word	0x0800714d
 8007024:	0800714d 	.word	0x0800714d
 8007028:	0800714d 	.word	0x0800714d
 800702c:	0800714d 	.word	0x0800714d
 8007030:	08007035 	.word	0x08007035
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007034:	4b4a      	ldr	r3, [pc, #296]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800703a:	4b49      	ldr	r3, [pc, #292]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8084 	beq.w	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	0c9b      	lsrs	r3, r3, #18
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	4a44      	ldr	r2, [pc, #272]	@ (8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007052:	5cd3      	ldrb	r3, [r2, r3]
 8007054:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d015      	beq.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007060:	4b3f      	ldr	r3, [pc, #252]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	0c5b      	lsrs	r3, r3, #17
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	4a3f      	ldr	r2, [pc, #252]	@ (8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800706c:	5cd3      	ldrb	r3, [r2, r3]
 800706e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00d      	beq.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800707a:	4a3c      	ldr	r2, [pc, #240]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	fb02 f303 	mul.w	r3, r2, r3
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	e004      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4a38      	ldr	r2, [pc, #224]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007090:	fb02 f303 	mul.w	r3, r2, r3
 8007094:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007096:	4b32      	ldr	r3, [pc, #200]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800709e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070a2:	d102      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80070a8:	e052      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	4a31      	ldr	r2, [pc, #196]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	085b      	lsrs	r3, r3, #1
 80070b6:	61bb      	str	r3, [r7, #24]
      break;
 80070b8:	e04a      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80070ba:	f7ff fdfb 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 80070be:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80070c0:	e049      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80070c2:	f7ff fdf7 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 80070c6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80070c8:	e045      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80070ca:	4b25      	ldr	r3, [pc, #148]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070da:	d108      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80070e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e01f      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070f8:	d109      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80070fa:	4b19      	ldr	r3, [pc, #100]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007106:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	e00f      	b.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007118:	d11c      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800711a:	4b11      	ldr	r3, [pc, #68]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d016      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007126:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800712a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800712c:	e012      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800712e:	e011      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007130:	f7ff fe32 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 8007134:	4602      	mov	r2, r0
 8007136:	4b0a      	ldr	r3, [pc, #40]	@ (8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	0b9b      	lsrs	r3, r3, #14
 800713c:	f003 0303 	and.w	r3, r3, #3
 8007140:	3301      	adds	r3, #1
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	fbb2 f3f3 	udiv	r3, r2, r3
 8007148:	61bb      	str	r3, [r7, #24]
      break;
 800714a:	e004      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800714c:	bf00      	nop
 800714e:	e002      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007150:	bf00      	nop
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007154:	bf00      	nop
    }
  }
  return (frequency);
 8007156:	69bb      	ldr	r3, [r7, #24]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40021000 	.word	0x40021000
 8007164:	0800e540 	.word	0x0800e540
 8007168:	0800e550 	.word	0x0800e550
 800716c:	007a1200 	.word	0x007a1200
 8007170:	003d0900 	.word	0x003d0900
 8007174:	aaaaaaab 	.word	0xaaaaaaab

08007178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e041      	b.n	800720e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d106      	bne.n	80071a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe f816 	bl	80051d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f000 fe5a 	bl	8007e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b01      	cmp	r3, #1
 800722a:	d001      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e044      	b.n	80072ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0201 	orr.w	r2, r2, #1
 8007246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1d      	ldr	r2, [pc, #116]	@ (80072c4 <HAL_TIM_Base_Start_IT+0xac>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x6c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d013      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x6c>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007264:	d00e      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x6c>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a18      	ldr	r2, [pc, #96]	@ (80072cc <HAL_TIM_Base_Start_IT+0xb4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x6c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a16      	ldr	r2, [pc, #88]	@ (80072d0 <HAL_TIM_Base_Start_IT+0xb8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <HAL_TIM_Base_Start_IT+0x6c>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a15      	ldr	r2, [pc, #84]	@ (80072d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d111      	bne.n	80072a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b06      	cmp	r3, #6
 8007294:	d010      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0201 	orr.w	r2, r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a6:	e007      	b.n	80072b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f042 0201 	orr.w	r2, r2, #1
 80072b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40013400 	.word	0x40013400
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00

080072d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e041      	b.n	800736e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f839 	bl	8007376 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3304      	adds	r3, #4
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f000 fdaa 	bl	8007e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <HAL_TIM_PWM_Start+0x24>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	bf14      	ite	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	2300      	moveq	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	e022      	b.n	80073f2 <HAL_TIM_PWM_Start+0x6a>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d109      	bne.n	80073c6 <HAL_TIM_PWM_Start+0x3e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	bf14      	ite	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	2300      	moveq	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	e015      	b.n	80073f2 <HAL_TIM_PWM_Start+0x6a>
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d109      	bne.n	80073e0 <HAL_TIM_PWM_Start+0x58>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e008      	b.n	80073f2 <HAL_TIM_PWM_Start+0x6a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	bf14      	ite	ne
 80073ec:	2301      	movne	r3, #1
 80073ee:	2300      	moveq	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e072      	b.n	80074e0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <HAL_TIM_PWM_Start+0x82>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007408:	e013      	b.n	8007432 <HAL_TIM_PWM_Start+0xaa>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b04      	cmp	r3, #4
 800740e:	d104      	bne.n	800741a <HAL_TIM_PWM_Start+0x92>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007418:	e00b      	b.n	8007432 <HAL_TIM_PWM_Start+0xaa>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d104      	bne.n	800742a <HAL_TIM_PWM_Start+0xa2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007428:	e003      	b.n	8007432 <HAL_TIM_PWM_Start+0xaa>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2201      	movs	r2, #1
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f001 f8f9 	bl	8008632 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a28      	ldr	r2, [pc, #160]	@ (80074e8 <HAL_TIM_PWM_Start+0x160>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d004      	beq.n	8007454 <HAL_TIM_PWM_Start+0xcc>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a27      	ldr	r2, [pc, #156]	@ (80074ec <HAL_TIM_PWM_Start+0x164>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d101      	bne.n	8007458 <HAL_TIM_PWM_Start+0xd0>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <HAL_TIM_PWM_Start+0xd2>
 8007458:	2300      	movs	r3, #0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800746c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <HAL_TIM_PWM_Start+0x160>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d018      	beq.n	80074aa <HAL_TIM_PWM_Start+0x122>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1b      	ldr	r2, [pc, #108]	@ (80074ec <HAL_TIM_PWM_Start+0x164>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_TIM_PWM_Start+0x122>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800748a:	d00e      	beq.n	80074aa <HAL_TIM_PWM_Start+0x122>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a17      	ldr	r2, [pc, #92]	@ (80074f0 <HAL_TIM_PWM_Start+0x168>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d009      	beq.n	80074aa <HAL_TIM_PWM_Start+0x122>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a16      	ldr	r2, [pc, #88]	@ (80074f4 <HAL_TIM_PWM_Start+0x16c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d004      	beq.n	80074aa <HAL_TIM_PWM_Start+0x122>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a14      	ldr	r2, [pc, #80]	@ (80074f8 <HAL_TIM_PWM_Start+0x170>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d111      	bne.n	80074ce <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	d010      	beq.n	80074de <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074cc:	e007      	b.n	80074de <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f042 0201 	orr.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40013400 	.word	0x40013400
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00

080074fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e041      	b.n	8007592 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fd fea2 	bl	800526c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3304      	adds	r3, #4
 8007538:	4619      	mov	r1, r3
 800753a:	4610      	mov	r0, r2
 800753c:	f000 fc98 	bl	8007e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e093      	b.n	80076d6 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fd febe 	bl	8005344 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f000 fc3e 	bl	8007e70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	4313      	orrs	r3, r2
 8007614:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800761c:	f023 0303 	bic.w	r3, r3, #3
 8007620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	4313      	orrs	r3, r2
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800763a:	f023 030c 	bic.w	r3, r3, #12
 800763e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007646:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800764a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	4313      	orrs	r3, r2
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	011a      	lsls	r2, r3, #4
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	031b      	lsls	r3, r3, #12
 800766a:	4313      	orrs	r3, r2
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007678:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	4313      	orrs	r3, r2
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076fe:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007706:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d110      	bne.n	8007730 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d102      	bne.n	800771a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007714:	7b7b      	ldrb	r3, [r7, #13]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d001      	beq.n	800771e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e069      	b.n	80077f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2202      	movs	r2, #2
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800772e:	e031      	b.n	8007794 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b04      	cmp	r3, #4
 8007734:	d110      	bne.n	8007758 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d102      	bne.n	8007742 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800773c:	7b3b      	ldrb	r3, [r7, #12]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d001      	beq.n	8007746 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e055      	b.n	80077f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007756:	e01d      	b.n	8007794 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d108      	bne.n	8007770 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d105      	bne.n	8007770 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007764:	7b7b      	ldrb	r3, [r7, #13]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d102      	bne.n	8007770 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800776a:	7b3b      	ldrb	r3, [r7, #12]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d001      	beq.n	8007774 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e03e      	b.n	80077f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_TIM_Encoder_Start+0xc4>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b04      	cmp	r3, #4
 800779e:	d008      	beq.n	80077b2 <HAL_TIM_Encoder_Start+0xd4>
 80077a0:	e00f      	b.n	80077c2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2201      	movs	r2, #1
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 ff41 	bl	8008632 <TIM_CCxChannelCmd>
      break;
 80077b0:	e016      	b.n	80077e0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2201      	movs	r2, #1
 80077b8:	2104      	movs	r1, #4
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 ff39 	bl	8008632 <TIM_CCxChannelCmd>
      break;
 80077c0:	e00e      	b.n	80077e0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2201      	movs	r2, #1
 80077c8:	2100      	movs	r1, #0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 ff31 	bl	8008632 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2201      	movs	r2, #1
 80077d6:	2104      	movs	r1, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 ff2a 	bl	8008632 <TIM_CCxChannelCmd>
      break;
 80077de:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d020      	beq.n	800785e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d01b      	beq.n	800785e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0202 	mvn.w	r2, #2
 800782e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 faf7 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 800784a:	e005      	b.n	8007858 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 faea 	bl	8007e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 faf9 	bl	8007e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d020      	beq.n	80078aa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01b      	beq.n	80078aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f06f 0204 	mvn.w	r2, #4
 800787a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fad1 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 8007896:	e005      	b.n	80078a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fac4 	bl	8007e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fad3 	bl	8007e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d020      	beq.n	80078f6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01b      	beq.n	80078f6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f06f 0208 	mvn.w	r2, #8
 80078c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2204      	movs	r2, #4
 80078cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 faab 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 80078e2:	e005      	b.n	80078f0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa9e 	bl	8007e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 faad 	bl	8007e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d020      	beq.n	8007942 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01b      	beq.n	8007942 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f06f 0210 	mvn.w	r2, #16
 8007912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2208      	movs	r2, #8
 8007918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fa85 	bl	8007e38 <HAL_TIM_IC_CaptureCallback>
 800792e:	e005      	b.n	800793c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fa78 	bl	8007e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa87 	bl	8007e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00c      	beq.n	8007966 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f06f 0201 	mvn.w	r2, #1
 800795e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fc ff2d 	bl	80047c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 ff3f 	bl	8008808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00c      	beq.n	80079ae <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa57 	bl	8007e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00c      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f003 0320 	and.w	r3, r3, #32
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f06f 0220 	mvn.w	r2, #32
 80079ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 ff12 	bl	80087f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e088      	b.n	8007b0a <HAL_TIM_IC_ConfigChannel+0x130>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d11b      	bne.n	8007a3e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007a16:	f000 fc5d 	bl	80082d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 020c 	bic.w	r2, r2, #12
 8007a28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6999      	ldr	r1, [r3, #24]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	619a      	str	r2, [r3, #24]
 8007a3c:	e060      	b.n	8007b00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d11c      	bne.n	8007a7e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007a54:	f000 fcd2 	bl	80083fc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007a66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6999      	ldr	r1, [r3, #24]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	619a      	str	r2, [r3, #24]
 8007a7c:	e040      	b.n	8007b00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d11b      	bne.n	8007abc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007a94:	f000 fd1d 	bl	80084d2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69da      	ldr	r2, [r3, #28]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 020c 	bic.w	r2, r2, #12
 8007aa6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69d9      	ldr	r1, [r3, #28]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	61da      	str	r2, [r3, #28]
 8007aba:	e021      	b.n	8007b00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b0c      	cmp	r3, #12
 8007ac0:	d11c      	bne.n	8007afc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007ad2:	f000 fd39 	bl	8008548 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007ae4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69d9      	ldr	r1, [r3, #28]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	021a      	lsls	r2, r3, #8
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	61da      	str	r2, [r3, #28]
 8007afa:	e001      	b.n	8007b00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e0ae      	b.n	8007c90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b0c      	cmp	r3, #12
 8007b3e:	f200 809f 	bhi.w	8007c80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b7d 	.word	0x08007b7d
 8007b4c:	08007c81 	.word	0x08007c81
 8007b50:	08007c81 	.word	0x08007c81
 8007b54:	08007c81 	.word	0x08007c81
 8007b58:	08007bbd 	.word	0x08007bbd
 8007b5c:	08007c81 	.word	0x08007c81
 8007b60:	08007c81 	.word	0x08007c81
 8007b64:	08007c81 	.word	0x08007c81
 8007b68:	08007bff 	.word	0x08007bff
 8007b6c:	08007c81 	.word	0x08007c81
 8007b70:	08007c81 	.word	0x08007c81
 8007b74:	08007c81 	.word	0x08007c81
 8007b78:	08007c3f 	.word	0x08007c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f9fa 	bl	8007f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699a      	ldr	r2, [r3, #24]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0208 	orr.w	r2, r2, #8
 8007b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0204 	bic.w	r2, r2, #4
 8007ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6999      	ldr	r1, [r3, #24]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	619a      	str	r2, [r3, #24]
      break;
 8007bba:	e064      	b.n	8007c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fa4a 	bl	800805c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6999      	ldr	r1, [r3, #24]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	021a      	lsls	r2, r3, #8
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	619a      	str	r2, [r3, #24]
      break;
 8007bfc:	e043      	b.n	8007c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 fa9d 	bl	8008144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0208 	orr.w	r2, r2, #8
 8007c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69da      	ldr	r2, [r3, #28]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0204 	bic.w	r2, r2, #4
 8007c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69d9      	ldr	r1, [r3, #28]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	61da      	str	r2, [r3, #28]
      break;
 8007c3c:	e023      	b.n	8007c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 faf1 	bl	800822c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69d9      	ldr	r1, [r3, #28]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	021a      	lsls	r2, r3, #8
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	61da      	str	r2, [r3, #28]
      break;
 8007c7e:	e002      	b.n	8007c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	75fb      	strb	r3, [r7, #23]
      break;
 8007c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d101      	bne.n	8007cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	e0b4      	b.n	8007e1e <HAL_TIM_ConfigClockSource+0x186>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cec:	d03e      	beq.n	8007d6c <HAL_TIM_ConfigClockSource+0xd4>
 8007cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cf2:	f200 8087 	bhi.w	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cfa:	f000 8086 	beq.w	8007e0a <HAL_TIM_ConfigClockSource+0x172>
 8007cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d02:	d87f      	bhi.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007d04:	2b70      	cmp	r3, #112	@ 0x70
 8007d06:	d01a      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0xa6>
 8007d08:	2b70      	cmp	r3, #112	@ 0x70
 8007d0a:	d87b      	bhi.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007d0c:	2b60      	cmp	r3, #96	@ 0x60
 8007d0e:	d050      	beq.n	8007db2 <HAL_TIM_ConfigClockSource+0x11a>
 8007d10:	2b60      	cmp	r3, #96	@ 0x60
 8007d12:	d877      	bhi.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007d14:	2b50      	cmp	r3, #80	@ 0x50
 8007d16:	d03c      	beq.n	8007d92 <HAL_TIM_ConfigClockSource+0xfa>
 8007d18:	2b50      	cmp	r3, #80	@ 0x50
 8007d1a:	d873      	bhi.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007d1c:	2b40      	cmp	r3, #64	@ 0x40
 8007d1e:	d058      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8007d20:	2b40      	cmp	r3, #64	@ 0x40
 8007d22:	d86f      	bhi.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007d24:	2b30      	cmp	r3, #48	@ 0x30
 8007d26:	d064      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0x15a>
 8007d28:	2b30      	cmp	r3, #48	@ 0x30
 8007d2a:	d86b      	bhi.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d060      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0x15a>
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d867      	bhi.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d05c      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0x15a>
 8007d38:	2b10      	cmp	r3, #16
 8007d3a:	d05a      	beq.n	8007df2 <HAL_TIM_ConfigClockSource+0x15a>
 8007d3c:	e062      	b.n	8007e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d4e:	f000 fc51 	bl	80085f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	609a      	str	r2, [r3, #8]
      break;
 8007d6a:	e04f      	b.n	8007e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d7c:	f000 fc3a 	bl	80085f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d8e:	609a      	str	r2, [r3, #8]
      break;
 8007d90:	e03c      	b.n	8007e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f000 fafe 	bl	80083a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2150      	movs	r1, #80	@ 0x50
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fc08 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 8007db0:	e02c      	b.n	8007e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f000 fb58 	bl	8008474 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2160      	movs	r1, #96	@ 0x60
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fbf8 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 8007dd0:	e01c      	b.n	8007e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dde:	461a      	mov	r2, r3
 8007de0:	f000 fade 	bl	80083a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2140      	movs	r1, #64	@ 0x40
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fbe8 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 8007df0:	e00c      	b.n	8007e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	f000 fbdf 	bl	80085c0 <TIM_ITRx_SetConfig>
      break;
 8007e02:	e003      	b.n	8007e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73fb      	strb	r3, [r7, #15]
      break;
 8007e08:	e000      	b.n	8007e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr

08007e4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bc80      	pop	{r7}
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr
	...

08007e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a39      	ldr	r2, [pc, #228]	@ (8007f68 <TIM_Base_SetConfig+0xf8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d013      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a38      	ldr	r2, [pc, #224]	@ (8007f6c <TIM_Base_SetConfig+0xfc>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e96:	d00b      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a35      	ldr	r2, [pc, #212]	@ (8007f70 <TIM_Base_SetConfig+0x100>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a34      	ldr	r2, [pc, #208]	@ (8007f74 <TIM_Base_SetConfig+0x104>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a33      	ldr	r2, [pc, #204]	@ (8007f78 <TIM_Base_SetConfig+0x108>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d108      	bne.n	8007ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a28      	ldr	r2, [pc, #160]	@ (8007f68 <TIM_Base_SetConfig+0xf8>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <TIM_Base_SetConfig+0x82>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a27      	ldr	r2, [pc, #156]	@ (8007f6c <TIM_Base_SetConfig+0xfc>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d00f      	beq.n	8007ef2 <TIM_Base_SetConfig+0x82>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed8:	d00b      	beq.n	8007ef2 <TIM_Base_SetConfig+0x82>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a24      	ldr	r2, [pc, #144]	@ (8007f70 <TIM_Base_SetConfig+0x100>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d007      	beq.n	8007ef2 <TIM_Base_SetConfig+0x82>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a23      	ldr	r2, [pc, #140]	@ (8007f74 <TIM_Base_SetConfig+0x104>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d003      	beq.n	8007ef2 <TIM_Base_SetConfig+0x82>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a22      	ldr	r2, [pc, #136]	@ (8007f78 <TIM_Base_SetConfig+0x108>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d108      	bne.n	8007f04 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8007f68 <TIM_Base_SetConfig+0xf8>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d003      	beq.n	8007f38 <TIM_Base_SetConfig+0xc8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a0e      	ldr	r2, [pc, #56]	@ (8007f6c <TIM_Base_SetConfig+0xfc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d103      	bne.n	8007f40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d005      	beq.n	8007f5e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f023 0201 	bic.w	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	611a      	str	r2, [r3, #16]
  }
}
 8007f5e:	bf00      	nop
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40013400 	.word	0x40013400
 8007f70:	40000400 	.word	0x40000400
 8007f74:	40000800 	.word	0x40000800
 8007f78:	40000c00 	.word	0x40000c00

08007f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f023 0201 	bic.w	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f023 0302 	bic.w	r3, r3, #2
 8007fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a20      	ldr	r2, [pc, #128]	@ (8008054 <TIM_OC1_SetConfig+0xd8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <TIM_OC1_SetConfig+0x64>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a1f      	ldr	r2, [pc, #124]	@ (8008058 <TIM_OC1_SetConfig+0xdc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10c      	bne.n	8007ffa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f023 0308 	bic.w	r3, r3, #8
 8007fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f023 0304 	bic.w	r3, r3, #4
 8007ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	@ (8008054 <TIM_OC1_SetConfig+0xd8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_OC1_SetConfig+0x8e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a14      	ldr	r2, [pc, #80]	@ (8008058 <TIM_OC1_SetConfig+0xdc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d111      	bne.n	800802e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	4313      	orrs	r3, r2
 800802c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	621a      	str	r2, [r3, #32]
}
 8008048:	bf00      	nop
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40012c00 	.word	0x40012c00
 8008058:	40013400 	.word	0x40013400

0800805c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	f023 0210 	bic.w	r2, r3, #16
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800808a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	021b      	lsls	r3, r3, #8
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4313      	orrs	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f023 0320 	bic.w	r3, r3, #32
 80080a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a21      	ldr	r2, [pc, #132]	@ (800813c <TIM_OC2_SetConfig+0xe0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d003      	beq.n	80080c4 <TIM_OC2_SetConfig+0x68>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a20      	ldr	r2, [pc, #128]	@ (8008140 <TIM_OC2_SetConfig+0xe4>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d10d      	bne.n	80080e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a16      	ldr	r2, [pc, #88]	@ (800813c <TIM_OC2_SetConfig+0xe0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_OC2_SetConfig+0x94>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a15      	ldr	r2, [pc, #84]	@ (8008140 <TIM_OC2_SetConfig+0xe4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d113      	bne.n	8008118 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4313      	orrs	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	621a      	str	r2, [r3, #32]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr
 800813c:	40012c00 	.word	0x40012c00
 8008140:	40013400 	.word	0x40013400

08008144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800818c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a21      	ldr	r2, [pc, #132]	@ (8008224 <TIM_OC3_SetConfig+0xe0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d003      	beq.n	80081aa <TIM_OC3_SetConfig+0x66>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a20      	ldr	r2, [pc, #128]	@ (8008228 <TIM_OC3_SetConfig+0xe4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d10d      	bne.n	80081c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a16      	ldr	r2, [pc, #88]	@ (8008224 <TIM_OC3_SetConfig+0xe0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_OC3_SetConfig+0x92>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a15      	ldr	r2, [pc, #84]	@ (8008228 <TIM_OC3_SetConfig+0xe4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d113      	bne.n	80081fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	621a      	str	r2, [r3, #32]
}
 8008218:	bf00      	nop
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40013400 	.word	0x40013400

0800822c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	031b      	lsls	r3, r3, #12
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a11      	ldr	r2, [pc, #68]	@ (80082cc <TIM_OC4_SetConfig+0xa0>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_OC4_SetConfig+0x68>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a10      	ldr	r2, [pc, #64]	@ (80082d0 <TIM_OC4_SetConfig+0xa4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d109      	bne.n	80082a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800829a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	019b      	lsls	r3, r3, #6
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	621a      	str	r2, [r3, #32]
}
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr
 80082cc:	40012c00 	.word	0x40012c00
 80082d0:	40013400 	.word	0x40013400

080082d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	f023 0201 	bic.w	r2, r3, #1
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4a23      	ldr	r2, [pc, #140]	@ (800838c <TIM_TI1_SetConfig+0xb8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <TIM_TI1_SetConfig+0x56>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4a22      	ldr	r2, [pc, #136]	@ (8008390 <TIM_TI1_SetConfig+0xbc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00f      	beq.n	800832a <TIM_TI1_SetConfig+0x56>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008310:	d00b      	beq.n	800832a <TIM_TI1_SetConfig+0x56>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4a1f      	ldr	r2, [pc, #124]	@ (8008394 <TIM_TI1_SetConfig+0xc0>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d007      	beq.n	800832a <TIM_TI1_SetConfig+0x56>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4a1e      	ldr	r2, [pc, #120]	@ (8008398 <TIM_TI1_SetConfig+0xc4>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d003      	beq.n	800832a <TIM_TI1_SetConfig+0x56>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4a1d      	ldr	r2, [pc, #116]	@ (800839c <TIM_TI1_SetConfig+0xc8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d101      	bne.n	800832e <TIM_TI1_SetConfig+0x5a>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <TIM_TI1_SetConfig+0x5c>
 800832e:	2300      	movs	r3, #0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e003      	b.n	800834e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	b2db      	uxtb	r3, r3
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4313      	orrs	r3, r2
 8008360:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f023 030a 	bic.w	r3, r3, #10
 8008368:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f003 030a 	and.w	r3, r3, #10
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	621a      	str	r2, [r3, #32]
}
 8008382:	bf00      	nop
 8008384:	371c      	adds	r7, #28
 8008386:	46bd      	mov	sp, r7
 8008388:	bc80      	pop	{r7}
 800838a:	4770      	bx	lr
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40013400 	.word	0x40013400
 8008394:	40000400 	.word	0x40000400
 8008398:	40000800 	.word	0x40000800
 800839c:	40000c00 	.word	0x40000c00

080083a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f023 0201 	bic.w	r2, r3, #1
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f023 030a 	bic.w	r3, r3, #10
 80083dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	621a      	str	r2, [r3, #32]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	f023 0210 	bic.w	r2, r3, #16
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	4313      	orrs	r3, r2
 8008432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800843a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	031b      	lsls	r3, r3, #12
 8008440:	b29b      	uxth	r3, r3
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	4313      	orrs	r3, r2
 8008446:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800844e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr

08008474 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	f023 0210 	bic.w	r2, r3, #16
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800849e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	031b      	lsls	r3, r3, #12
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	621a      	str	r2, [r3, #32]
}
 80084c8:	bf00      	nop
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b087      	sub	sp, #28
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f023 0303 	bic.w	r3, r3, #3
 80084fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4313      	orrs	r3, r2
 8008506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800850e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	b2db      	uxtb	r3, r3
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008522:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr

08008548 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008548:	b480      	push	{r7}
 800854a:	b087      	sub	sp, #28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008574:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	4313      	orrs	r3, r2
 800857e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008586:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	031b      	lsls	r3, r3, #12
 800858c:	b29b      	uxth	r3, r3
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	4313      	orrs	r3, r2
 8008592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800859a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	031b      	lsls	r3, r3, #12
 80085a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr

080085c0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	f043 0307 	orr.w	r3, r3, #7
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	609a      	str	r2, [r3, #8]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr

080085f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800860e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	021a      	lsls	r2, r3, #8
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	431a      	orrs	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	4313      	orrs	r3, r2
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	609a      	str	r2, [r3, #8]
}
 8008628:	bf00      	nop
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr

08008632 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f003 031f 	and.w	r3, r3, #31
 8008644:	2201      	movs	r2, #1
 8008646:	fa02 f303 	lsl.w	r3, r2, r3
 800864a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6a1a      	ldr	r2, [r3, #32]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	43db      	mvns	r3, r3
 8008654:	401a      	ands	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a1a      	ldr	r2, [r3, #32]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	fa01 f303 	lsl.w	r3, r1, r3
 800866a:	431a      	orrs	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	621a      	str	r2, [r3, #32]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	bc80      	pop	{r7}
 8008678:	4770      	bx	lr
	...

0800867c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008690:	2302      	movs	r3, #2
 8008692:	e050      	b.n	8008736 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d018      	beq.n	800870a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a19      	ldr	r2, [pc, #100]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d013      	beq.n	800870a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ea:	d00e      	beq.n	800870a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a15      	ldr	r2, [pc, #84]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d009      	beq.n	800870a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a14      	ldr	r2, [pc, #80]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d004      	beq.n	800870a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a12      	ldr	r2, [pc, #72]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d10c      	bne.n	8008724 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	4313      	orrs	r3, r2
 800871a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr
 8008740:	40012c00 	.word	0x40012c00
 8008744:	40013400 	.word	0x40013400
 8008748:	40000400 	.word	0x40000400
 800874c:	40000800 	.word	0x40000800
 8008750:	40000c00 	.word	0x40000c00

08008754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800876c:	2302      	movs	r3, #2
 800876e:	e03d      	b.n	80087ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr

080087f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr

0800881a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800881a:	b490      	push	{r4, r7}
 800881c:	b088      	sub	sp, #32
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	461a      	mov	r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	4413      	add	r3, r2
 8008830:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8008832:	6822      	ldr	r2, [r4, #0]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	fa93 f3a3 	rbit	r3, r3
 800883e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	fab3 f383 	clz	r3, r3
 8008846:	b2db      	uxtb	r3, r3
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	210f      	movs	r1, #15
 800884c:	fa01 f303 	lsl.w	r3, r1, r3
 8008850:	43db      	mvns	r3, r3
 8008852:	401a      	ands	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	fa93 f3a3 	rbit	r3, r3
 800885e:	61bb      	str	r3, [r7, #24]
  return result;
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	fab3 f383 	clz	r3, r3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	fa01 f303 	lsl.w	r3, r1, r3
 8008870:	4313      	orrs	r3, r2
 8008872:	6023      	str	r3, [r4, #0]
}
 8008874:	bf00      	nop
 8008876:	3720      	adds	r7, #32
 8008878:	46bd      	mov	sp, r7
 800887a:	bc90      	pop	{r4, r7}
 800887c:	4770      	bx	lr

0800887e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800887e:	b490      	push	{r4, r7}
 8008880:	b088      	sub	sp, #32
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	461a      	mov	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	0e1b      	lsrs	r3, r3, #24
 8008892:	4413      	add	r3, r2
 8008894:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	fa93 f3a3 	rbit	r3, r3
 80088a2:	613b      	str	r3, [r7, #16]
  return result;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	fab3 f383 	clz	r3, r3
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	2103      	movs	r1, #3
 80088b0:	fa01 f303 	lsl.w	r3, r1, r3
 80088b4:	43db      	mvns	r3, r3
 80088b6:	401a      	ands	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	fa93 f3a3 	rbit	r3, r3
 80088c2:	61bb      	str	r3, [r7, #24]
  return result;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	fab3 f383 	clz	r3, r3
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	6879      	ldr	r1, [r7, #4]
 80088d0:	fa01 f303 	lsl.w	r3, r1, r3
 80088d4:	4313      	orrs	r3, r2
 80088d6:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80088d8:	bf00      	nop
 80088da:	3720      	adds	r7, #32
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc90      	pop	{r4, r7}
 80088e0:	4770      	bx	lr

080088e2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80088e2:	b490      	push	{r4, r7}
 80088e4:	b088      	sub	sp, #32
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	461a      	mov	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	0e1b      	lsrs	r3, r3, #24
 80088f6:	4413      	add	r3, r2
 80088f8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	fa93 f3a3 	rbit	r3, r3
 8008906:	613b      	str	r3, [r7, #16]
  return result;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	fab3 f383 	clz	r3, r3
 800890e:	b2db      	uxtb	r3, r3
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	2104      	movs	r1, #4
 8008914:	fa01 f303 	lsl.w	r3, r1, r3
 8008918:	43db      	mvns	r3, r3
 800891a:	401a      	ands	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	fa93 f3a3 	rbit	r3, r3
 8008926:	61bb      	str	r3, [r7, #24]
  return result;
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	fab3 f383 	clz	r3, r3
 800892e:	b2db      	uxtb	r3, r3
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	fa01 f303 	lsl.w	r3, r1, r3
 8008938:	4313      	orrs	r3, r2
 800893a:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800893c:	bf00      	nop
 800893e:	3720      	adds	r7, #32
 8008940:	46bd      	mov	sp, r7
 8008942:	bc90      	pop	{r4, r7}
 8008944:	4770      	bx	lr

08008946 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	43db      	mvns	r3, r3
 800895c:	401a      	ands	r2, r3
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	0a1b      	lsrs	r3, r3, #8
 8008962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	fa93 f3a3 	rbit	r3, r3
 800896a:	613b      	str	r3, [r7, #16]
  return result;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	fab3 f383 	clz	r3, r3
 8008972:	b2db      	uxtb	r3, r3
 8008974:	4619      	mov	r1, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	408b      	lsls	r3, r1
 800897a:	431a      	orrs	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	60da      	str	r2, [r3, #12]
}
 8008980:	bf00      	nop
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr

0800898a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b088      	sub	sp, #32
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	0c1b      	lsrs	r3, r3, #16
 800899c:	617b      	str	r3, [r7, #20]
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	fa93 f3a3 	rbit	r3, r3
 80089a8:	60fb      	str	r3, [r7, #12]
  return result;
 80089aa:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80089ac:	fab3 f383 	clz	r3, r3
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80089b4:	e044      	b.n	8008a40 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80089b6:	2201      	movs	r2, #1
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	409a      	lsls	r2, r3
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	4013      	ands	r3, r2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d03a      	beq.n	8008a3a <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b07      	cmp	r3, #7
 80089c8:	d806      	bhi.n	80089d8 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80089ca:	f240 1201 	movw	r2, #257	@ 0x101
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	e008      	b.n	80089ea <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3b08      	subs	r3, #8
 80089dc:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80089e0:	fa02 f303 	lsl.w	r3, r2, r3
 80089e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089e8:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b08      	cmp	r3, #8
 80089f0:	d106      	bne.n	8008a00 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	461a      	mov	r2, r3
 80089f8:	69b9      	ldr	r1, [r7, #24]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7ff ffa3 	bl	8008946 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	461a      	mov	r2, r3
 8008a06:	69b9      	ldr	r1, [r7, #24]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ff06 	bl	800881a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d003      	beq.n	8008a1e <LL_GPIO_Init+0x94>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	d10d      	bne.n	8008a3a <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	461a      	mov	r2, r3
 8008a24:	69b9      	ldr	r1, [r7, #24]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff ff29 	bl	800887e <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	461a      	mov	r2, r3
 8008a32:	69b9      	ldr	r1, [r7, #24]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff ff54 	bl	80088e2 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	fa22 f303 	lsr.w	r3, r2, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1b4      	bne.n	80089b6 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <LL_I2C_Enable>:
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f043 0201 	orr.w	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	601a      	str	r2, [r3, #0]
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <LL_I2C_Disable>:
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f023 0201 	bic.w	r2, r3, #1
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	601a      	str	r2, [r3, #0]
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr

08008a92 <LL_I2C_SetOwnAddress1>:
{
 8008a92:	b480      	push	{r7}
 8008a94:	b085      	sub	sp, #20
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008aa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008aaa:	68b9      	ldr	r1, [r7, #8]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	609a      	str	r2, [r3, #8]
}
 8008ab6:	bf00      	nop
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bc80      	pop	{r7}
 8008abe:	4770      	bx	lr

08008ac0 <LL_I2C_ConfigSpeed>:
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a41      	ldr	r2, [pc, #260]	@ (8008be0 <LL_I2C_ConfigSpeed+0x120>)
 8008ada:	fba2 2303 	umull	r2, r3, r2, r3
 8008ade:	0c9b      	lsrs	r3, r3, #18
 8008ae0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4939      	ldr	r1, [pc, #228]	@ (8008be4 <LL_I2C_ConfigSpeed+0x124>)
 8008afe:	428b      	cmp	r3, r1
 8008b00:	d802      	bhi.n	8008b08 <LL_I2C_ConfigSpeed+0x48>
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3301      	adds	r3, #1
 8008b06:	e009      	b.n	8008b1c <LL_I2C_ConfigSpeed+0x5c>
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8008b0e:	fb01 f303 	mul.w	r3, r1, r3
 8008b12:	4935      	ldr	r1, [pc, #212]	@ (8008be8 <LL_I2C_ConfigSpeed+0x128>)
 8008b14:	fba1 1303 	umull	r1, r3, r1, r3
 8008b18:	099b      	lsrs	r3, r3, #6
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a2f      	ldr	r2, [pc, #188]	@ (8008be4 <LL_I2C_ConfigSpeed+0x124>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d939      	bls.n	8008b9e <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d117      	bne.n	8008b60 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	4613      	mov	r3, r2
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	4413      	add	r3, r2
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d009      	beq.n	8008b5a <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	4413      	add	r3, r2
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b58:	e01d      	b.n	8008b96 <LL_I2C_ConfigSpeed+0xd6>
 8008b5a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008b5e:	e01a      	b.n	8008b96 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009a      	lsls	r2, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009a      	lsls	r2, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8008b8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b90:	e001      	b.n	8008b96 <LL_I2C_ConfigSpeed+0xd6>
 8008b92:	f248 0301 	movw	r3, #32769	@ 0x8001
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e011      	b.n	8008bc2 <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ba8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008bac:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbc:	e000      	b.n	8008bc0 <LL_I2C_ConfigSpeed+0x100>
 8008bbe:	2304      	movs	r3, #4
 8008bc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8008bca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	61da      	str	r2, [r3, #28]
}
 8008bd6:	bf00      	nop
 8008bd8:	371c      	adds	r7, #28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bc80      	pop	{r7}
 8008bde:	4770      	bx	lr
 8008be0:	431bde83 	.word	0x431bde83
 8008be4:	000186a0 	.word	0x000186a0
 8008be8:	10624dd3 	.word	0x10624dd3

08008bec <LL_I2C_SetMode>:
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f023 021a 	bic.w	r2, r3, #26
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	601a      	str	r2, [r3, #0]
}
 8008c06:	bf00      	nop
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr

08008c10 <LL_I2C_AcknowledgeNextData>:
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	431a      	orrs	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	601a      	str	r2, [r3, #0]
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr

08008c34 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ff18 	bl	8008a74 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8008c44:	f107 0308 	add.w	r3, r7, #8
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 f87b 	bl	8008d44 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8008c4e:	6939      	ldr	r1, [r7, #16]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ff31 	bl	8008ac0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68d9      	ldr	r1, [r3, #12]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	461a      	mov	r2, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff ff12 	bl	8008a92 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff ffb9 	bl	8008bec <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff feeb 	bl	8008a56 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff ffc2 	bl	8008c10 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008c9c:	4b03      	ldr	r3, [pc, #12]	@ (8008cac <LL_RCC_GetSysClkSource+0x14>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f003 030c 	and.w	r3, r3, #12
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr
 8008cac:	40021000 	.word	0x40021000

08008cb0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008cb4:	4b03      	ldr	r3, [pc, #12]	@ (8008cc4 <LL_RCC_GetAHBPrescaler+0x14>)
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr
 8008cc4:	40021000 	.word	0x40021000

08008cc8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008ccc:	4b03      	ldr	r3, [pc, #12]	@ (8008cdc <LL_RCC_GetAPB1Prescaler+0x14>)
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr
 8008cdc:	40021000 	.word	0x40021000

08008ce0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008ce4:	4b03      	ldr	r3, [pc, #12]	@ (8008cf4 <LL_RCC_GetAPB2Prescaler+0x14>)
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bc80      	pop	{r7}
 8008cf2:	4770      	bx	lr
 8008cf4:	40021000 	.word	0x40021000

08008cf8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8008cfc:	4b03      	ldr	r3, [pc, #12]	@ (8008d0c <LL_RCC_PLL_GetMainSource+0x14>)
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr
 8008d0c:	40021000 	.word	0x40021000

08008d10 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8008d14:	4b03      	ldr	r3, [pc, #12]	@ (8008d24 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr
 8008d24:	40021000 	.word	0x40021000

08008d28 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8008d2c:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <LL_RCC_PLL_GetPrediv+0x18>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	0c5b      	lsrs	r3, r3, #17
 8008d32:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bc80      	pop	{r7}
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	40021000 	.word	0x40021000

08008d44 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8008d4c:	f000 f820 	bl	8008d90 <RCC_GetSystemClockFreq>
 8008d50:	4602      	mov	r2, r0
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f83e 	bl	8008ddc <RCC_GetHCLKClockFreq>
 8008d60:	4602      	mov	r2, r0
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 f84c 	bl	8008e08 <RCC_GetPCLK1ClockFreq>
 8008d70:	4602      	mov	r2, r0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 f858 	bl	8008e30 <RCC_GetPCLK2ClockFreq>
 8008d80:	4602      	mov	r2, r0
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60da      	str	r2, [r3, #12]
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8008d9a:	f7ff ff7d 	bl	8008c98 <LL_RCC_GetSysClkSource>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d00c      	beq.n	8008dbe <RCC_GetSystemClockFreq+0x2e>
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d80e      	bhi.n	8008dc6 <RCC_GetSystemClockFreq+0x36>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <RCC_GetSystemClockFreq+0x22>
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d003      	beq.n	8008db8 <RCC_GetSystemClockFreq+0x28>
 8008db0:	e009      	b.n	8008dc6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8008db2:	4b09      	ldr	r3, [pc, #36]	@ (8008dd8 <RCC_GetSystemClockFreq+0x48>)
 8008db4:	607b      	str	r3, [r7, #4]
      break;
 8008db6:	e009      	b.n	8008dcc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8008db8:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <RCC_GetSystemClockFreq+0x48>)
 8008dba:	607b      	str	r3, [r7, #4]
      break;
 8008dbc:	e006      	b.n	8008dcc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8008dbe:	f000 f84b 	bl	8008e58 <RCC_PLL_GetFreqDomain_SYS>
 8008dc2:	6078      	str	r0, [r7, #4]
      break;
 8008dc4:	e002      	b.n	8008dcc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8008dc6:	4b04      	ldr	r3, [pc, #16]	@ (8008dd8 <RCC_GetSystemClockFreq+0x48>)
 8008dc8:	607b      	str	r3, [r7, #4]
      break;
 8008dca:	bf00      	nop
  }

  return frequency;
 8008dcc:	687b      	ldr	r3, [r7, #4]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	007a1200 	.word	0x007a1200

08008ddc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008de4:	f7ff ff64 	bl	8008cb0 <LL_RCC_GetAHBPrescaler>
 8008de8:	4603      	mov	r3, r0
 8008dea:	091b      	lsrs	r3, r3, #4
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	4a04      	ldr	r2, [pc, #16]	@ (8008e04 <RCC_GetHCLKClockFreq+0x28>)
 8008df2:	5cd3      	ldrb	r3, [r2, r3]
 8008df4:	461a      	mov	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	40d3      	lsrs	r3, r2
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	0800e514 	.word	0x0800e514

08008e08 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8008e10:	f7ff ff5a 	bl	8008cc8 <LL_RCC_GetAPB1Prescaler>
 8008e14:	4603      	mov	r3, r0
 8008e16:	0a1b      	lsrs	r3, r3, #8
 8008e18:	4a04      	ldr	r2, [pc, #16]	@ (8008e2c <RCC_GetPCLK1ClockFreq+0x24>)
 8008e1a:	5cd3      	ldrb	r3, [r2, r3]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	40d3      	lsrs	r3, r2
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	0800e524 	.word	0x0800e524

08008e30 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8008e38:	f7ff ff52 	bl	8008ce0 <LL_RCC_GetAPB2Prescaler>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	0adb      	lsrs	r3, r3, #11
 8008e40:	4a04      	ldr	r2, [pc, #16]	@ (8008e54 <RCC_GetPCLK2ClockFreq+0x24>)
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	461a      	mov	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	40d3      	lsrs	r3, r2
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	0800e524 	.word	0x0800e524

08008e58 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	607b      	str	r3, [r7, #4]
 8008e62:	2300      	movs	r3, #0
 8008e64:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8008e66:	f7ff ff47 	bl	8008cf8 <LL_RCC_PLL_GetMainSource>
 8008e6a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d004      	beq.n	8008e7c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e78:	d003      	beq.n	8008e82 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8008e7a:	e00b      	b.n	8008e94 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8008e7e:	607b      	str	r3, [r7, #4]
      break;
 8008e80:	e00b      	b.n	8008e9a <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8008e82:	f7ff ff51 	bl	8008d28 <LL_RCC_PLL_GetPrediv>
 8008e86:	4603      	mov	r3, r0
 8008e88:	3301      	adds	r3, #1
 8008e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8008eb8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8008e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e90:	607b      	str	r3, [r7, #4]
      break;
 8008e92:	e002      	b.n	8008e9a <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8008e94:	4b07      	ldr	r3, [pc, #28]	@ (8008eb4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8008e96:	607b      	str	r3, [r7, #4]
      break;
 8008e98:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8008e9a:	f7ff ff39 	bl	8008d10 <LL_RCC_PLL_GetMultiplicator>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	0c9b      	lsrs	r3, r3, #18
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	fb02 f303 	mul.w	r3, r2, r3
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	003d0900 	.word	0x003d0900
 8008eb8:	007a1200 	.word	0x007a1200

08008ebc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008ec0:	f000 fe4c 	bl	8009b5c <vTaskStartScheduler>
  
  return osOK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <osDelay+0x16>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	e000      	b.n	8008ee2 <osDelay+0x18>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fe04 	bl	8009af0 <vTaskDelay>
  
  return osOK;
 8008ee8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f103 0208 	add.w	r2, r3, #8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f04f 32ff 	mov.w	r2, #4294967295
 8008f0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f103 0208 	add.w	r2, r3, #8
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f103 0208 	add.w	r2, r3, #8
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f3e:	bf00      	nop
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bc80      	pop	{r7}
 8008f46:	4770      	bx	lr

08008f48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
}
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bc80      	pop	{r7}
 8008f8c:	4770      	bx	lr

08008f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b085      	sub	sp, #20
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa4:	d103      	bne.n	8008fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e00c      	b.n	8008fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	e002      	b.n	8008fbc <vListInsert+0x2e>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d2f6      	bcs.n	8008fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	601a      	str	r2, [r3, #0]
}
 8008ff4:	bf00      	nop
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bc80      	pop	{r7}
 8008ffc:	4770      	bx	lr

08008ffe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6892      	ldr	r2, [r2, #8]
 8009014:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	6852      	ldr	r2, [r2, #4]
 800901e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	429a      	cmp	r2, r3
 8009028:	d103      	bne.n	8009032 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	689a      	ldr	r2, [r3, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr

08009050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10b      	bne.n	800907c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009076:	bf00      	nop
 8009078:	bf00      	nop
 800907a:	e7fd      	b.n	8009078 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800907c:	f001 fcce 	bl	800aa1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800908c:	fb01 f303 	mul.w	r3, r1, r3
 8009090:	441a      	add	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ac:	3b01      	subs	r3, #1
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	441a      	add	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	22ff      	movs	r2, #255	@ 0xff
 80090c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	22ff      	movs	r2, #255	@ 0xff
 80090c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d114      	bne.n	80090fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d01a      	beq.n	8009110 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3310      	adds	r3, #16
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 ff86 	bl	8009ff0 <xTaskRemoveFromEventList>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d012      	beq.n	8009110 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <xQueueGenericReset+0xd0>)
 80090ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	e009      	b.n	8009110 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3310      	adds	r3, #16
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff fef6 	bl	8008ef2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3324      	adds	r3, #36	@ 0x24
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff fef1 	bl	8008ef2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009110:	f001 fcb4 	bl	800aa7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009114:	2301      	movs	r3, #1
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	e000ed04 	.word	0xe000ed04

08009124 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08a      	sub	sp, #40	@ 0x28
 8009128:	af02      	add	r7, sp, #8
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10b      	bne.n	8009150 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	613b      	str	r3, [r7, #16]
}
 800914a:	bf00      	nop
 800914c:	bf00      	nop
 800914e:	e7fd      	b.n	800914c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	fb02 f303 	mul.w	r3, r2, r3
 8009158:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	3348      	adds	r3, #72	@ 0x48
 800915e:	4618      	mov	r0, r3
 8009160:	f001 fd1e 	bl	800aba0 <pvPortMalloc>
 8009164:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d011      	beq.n	8009190 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	3348      	adds	r3, #72	@ 0x48
 8009174:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800917e:	79fa      	ldrb	r2, [r7, #7]
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	4613      	mov	r3, r2
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f805 	bl	800919a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009190:	69bb      	ldr	r3, [r7, #24]
	}
 8009192:	4618      	mov	r0, r3
 8009194:	3720      	adds	r7, #32
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	e002      	b.n	80091bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80091c8:	2101      	movs	r1, #1
 80091ca:	69b8      	ldr	r0, [r7, #24]
 80091cc:	f7ff ff40 	bl	8009050 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80091d0:	bf00      	nop
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b08e      	sub	sp, #56	@ 0x38
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80091e6:	2300      	movs	r3, #0
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10b      	bne.n	800920c <xQueueGenericSend+0x34>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009206:	bf00      	nop
 8009208:	bf00      	nop
 800920a:	e7fd      	b.n	8009208 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d103      	bne.n	800921a <xQueueGenericSend+0x42>
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <xQueueGenericSend+0x46>
 800921a:	2301      	movs	r3, #1
 800921c:	e000      	b.n	8009220 <xQueueGenericSend+0x48>
 800921e:	2300      	movs	r3, #0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10b      	bne.n	800923c <xQueueGenericSend+0x64>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009236:	bf00      	nop
 8009238:	bf00      	nop
 800923a:	e7fd      	b.n	8009238 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d103      	bne.n	800924a <xQueueGenericSend+0x72>
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <xQueueGenericSend+0x76>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericSend+0x78>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10b      	bne.n	800926c <xQueueGenericSend+0x94>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	623b      	str	r3, [r7, #32]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800926c:	f001 f880 	bl	800a370 <xTaskGetSchedulerState>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <xQueueGenericSend+0xa4>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <xQueueGenericSend+0xa8>
 800927c:	2301      	movs	r3, #1
 800927e:	e000      	b.n	8009282 <xQueueGenericSend+0xaa>
 8009280:	2300      	movs	r3, #0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10b      	bne.n	800929e <xQueueGenericSend+0xc6>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	61fb      	str	r3, [r7, #28]
}
 8009298:	bf00      	nop
 800929a:	bf00      	nop
 800929c:	e7fd      	b.n	800929a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800929e:	f001 fbbd 	bl	800aa1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d302      	bcc.n	80092b4 <xQueueGenericSend+0xdc>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d129      	bne.n	8009308 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092ba:	f000 f971 	bl	80095a0 <prvCopyDataToQueue>
 80092be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d010      	beq.n	80092ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ca:	3324      	adds	r3, #36	@ 0x24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fe8f 	bl	8009ff0 <xTaskRemoveFromEventList>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d013      	beq.n	8009300 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80092d8:	4b3f      	ldr	r3, [pc, #252]	@ (80093d8 <xQueueGenericSend+0x200>)
 80092da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	e00a      	b.n	8009300 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80092ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80092f0:	4b39      	ldr	r3, [pc, #228]	@ (80093d8 <xQueueGenericSend+0x200>)
 80092f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009300:	f001 fbbc 	bl	800aa7c <vPortExitCritical>
				return pdPASS;
 8009304:	2301      	movs	r3, #1
 8009306:	e063      	b.n	80093d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d103      	bne.n	8009316 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800930e:	f001 fbb5 	bl	800aa7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009312:	2300      	movs	r3, #0
 8009314:	e05c      	b.n	80093d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009318:	2b00      	cmp	r3, #0
 800931a:	d106      	bne.n	800932a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fec9 	bl	800a0b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009326:	2301      	movs	r3, #1
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800932a:	f001 fba7 	bl	800aa7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800932e:	f000 fc77 	bl	8009c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009332:	f001 fb73 	bl	800aa1c <vPortEnterCritical>
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800933c:	b25b      	sxtb	r3, r3
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009342:	d103      	bne.n	800934c <xQueueGenericSend+0x174>
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009352:	b25b      	sxtb	r3, r3
 8009354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009358:	d103      	bne.n	8009362 <xQueueGenericSend+0x18a>
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009362:	f001 fb8b 	bl	800aa7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009366:	1d3a      	adds	r2, r7, #4
 8009368:	f107 0314 	add.w	r3, r7, #20
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f000 feb8 	bl	800a0e4 <xTaskCheckForTimeOut>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d124      	bne.n	80093c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800937a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800937c:	f000 fa08 	bl	8009790 <prvIsQueueFull>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d018      	beq.n	80093b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009388:	3310      	adds	r3, #16
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fe08 	bl	8009fa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009396:	f000 f993 	bl	80096c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800939a:	f000 fc4f 	bl	8009c3c <xTaskResumeAll>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f47f af7c 	bne.w	800929e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80093a6:	4b0c      	ldr	r3, [pc, #48]	@ (80093d8 <xQueueGenericSend+0x200>)
 80093a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	e772      	b.n	800929e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093ba:	f000 f981 	bl	80096c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093be:	f000 fc3d 	bl	8009c3c <xTaskResumeAll>
 80093c2:	e76c      	b.n	800929e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80093c6:	f000 f97b 	bl	80096c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093ca:	f000 fc37 	bl	8009c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80093ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3738      	adds	r7, #56	@ 0x38
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	e000ed04 	.word	0xe000ed04

080093dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08c      	sub	sp, #48	@ 0x30
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093e8:	2300      	movs	r3, #0
 80093ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <xQueueReceive+0x32>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	623b      	str	r3, [r7, #32]
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d103      	bne.n	800941c <xQueueReceive+0x40>
 8009414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <xQueueReceive+0x44>
 800941c:	2301      	movs	r3, #1
 800941e:	e000      	b.n	8009422 <xQueueReceive+0x46>
 8009420:	2300      	movs	r3, #0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <xQueueReceive+0x62>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	61fb      	str	r3, [r7, #28]
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	e7fd      	b.n	800943a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800943e:	f000 ff97 	bl	800a370 <xTaskGetSchedulerState>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <xQueueReceive+0x72>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <xQueueReceive+0x76>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <xQueueReceive+0x78>
 8009452:	2300      	movs	r3, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <xQueueReceive+0x94>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	61bb      	str	r3, [r7, #24]
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	e7fd      	b.n	800946c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009470:	f001 fad4 	bl	800aa1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01f      	beq.n	80094c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009484:	f000 f8f6 	bl	8009674 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	1e5a      	subs	r2, r3, #1
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00f      	beq.n	80094b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	3310      	adds	r3, #16
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fda7 	bl	8009ff0 <xTaskRemoveFromEventList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d007      	beq.n	80094b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80094a8:	4b3c      	ldr	r3, [pc, #240]	@ (800959c <xQueueReceive+0x1c0>)
 80094aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80094b8:	f001 fae0 	bl	800aa7c <vPortExitCritical>
				return pdPASS;
 80094bc:	2301      	movs	r3, #1
 80094be:	e069      	b.n	8009594 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094c6:	f001 fad9 	bl	800aa7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e062      	b.n	8009594 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094d4:	f107 0310 	add.w	r3, r7, #16
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 fded 	bl	800a0b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094de:	2301      	movs	r3, #1
 80094e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094e2:	f001 facb 	bl	800aa7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094e6:	f000 fb9b 	bl	8009c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ea:	f001 fa97 	bl	800aa1c <vPortEnterCritical>
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094f4:	b25b      	sxtb	r3, r3
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d103      	bne.n	8009504 <xQueueReceive+0x128>
 80094fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800950a:	b25b      	sxtb	r3, r3
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d103      	bne.n	800951a <xQueueReceive+0x13e>
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800951a:	f001 faaf 	bl	800aa7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800951e:	1d3a      	adds	r2, r7, #4
 8009520:	f107 0310 	add.w	r3, r7, #16
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fddc 	bl	800a0e4 <xTaskCheckForTimeOut>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d123      	bne.n	800957a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009534:	f000 f916 	bl	8009764 <prvIsQueueEmpty>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d017      	beq.n	800956e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800953e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009540:	3324      	adds	r3, #36	@ 0x24
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fd2c 	bl	8009fa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800954c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800954e:	f000 f8b7 	bl	80096c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009552:	f000 fb73 	bl	8009c3c <xTaskResumeAll>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d189      	bne.n	8009470 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800955c:	4b0f      	ldr	r3, [pc, #60]	@ (800959c <xQueueReceive+0x1c0>)
 800955e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	e780      	b.n	8009470 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800956e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009570:	f000 f8a6 	bl	80096c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009574:	f000 fb62 	bl	8009c3c <xTaskResumeAll>
 8009578:	e77a      	b.n	8009470 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800957a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800957c:	f000 f8a0 	bl	80096c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009580:	f000 fb5c 	bl	8009c3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009584:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009586:	f000 f8ed 	bl	8009764 <prvIsQueueEmpty>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	f43f af6f 	beq.w	8009470 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009592:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009594:	4618      	mov	r0, r3
 8009596:	3730      	adds	r7, #48	@ 0x30
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	e000ed04 	.word	0xe000ed04

080095a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10d      	bne.n	80095da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d14d      	bne.n	8009662 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 feee 	bl	800a3ac <xTaskPriorityDisinherit>
 80095d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	609a      	str	r2, [r3, #8]
 80095d8:	e043      	b.n	8009662 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d119      	bne.n	8009614 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6858      	ldr	r0, [r3, #4]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e8:	461a      	mov	r2, r3
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	f002 fad3 	bl	800bb96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f8:	441a      	add	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	429a      	cmp	r2, r3
 8009608:	d32b      	bcc.n	8009662 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	e026      	b.n	8009662 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	68d8      	ldr	r0, [r3, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961c:	461a      	mov	r2, r3
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	f002 fab9 	bl	800bb96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962c:	425b      	negs	r3, r3
 800962e:	441a      	add	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d207      	bcs.n	8009650 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009648:	425b      	negs	r3, r3
 800964a:	441a      	add	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d105      	bne.n	8009662 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	3b01      	subs	r3, #1
 8009660:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800966a:	697b      	ldr	r3, [r7, #20]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009682:	2b00      	cmp	r3, #0
 8009684:	d018      	beq.n	80096b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968e:	441a      	add	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	d303      	bcc.n	80096a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68d9      	ldr	r1, [r3, #12]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b0:	461a      	mov	r2, r3
 80096b2:	6838      	ldr	r0, [r7, #0]
 80096b4:	f002 fa6f 	bl	800bb96 <memcpy>
	}
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096c8:	f001 f9a8 	bl	800aa1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096d4:	e011      	b.n	80096fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d012      	beq.n	8009704 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3324      	adds	r3, #36	@ 0x24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fc84 	bl	8009ff0 <xTaskRemoveFromEventList>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096ee:	f000 fd5d 	bl	800a1ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	3b01      	subs	r3, #1
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dce9      	bgt.n	80096d6 <prvUnlockQueue+0x16>
 8009702:	e000      	b.n	8009706 <prvUnlockQueue+0x46>
					break;
 8009704:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	22ff      	movs	r2, #255	@ 0xff
 800970a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800970e:	f001 f9b5 	bl	800aa7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009712:	f001 f983 	bl	800aa1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800971c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800971e:	e011      	b.n	8009744 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d012      	beq.n	800974e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3310      	adds	r3, #16
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fc5f 	bl	8009ff0 <xTaskRemoveFromEventList>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009738:	f000 fd38 	bl	800a1ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	3b01      	subs	r3, #1
 8009740:	b2db      	uxtb	r3, r3
 8009742:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009748:	2b00      	cmp	r3, #0
 800974a:	dce9      	bgt.n	8009720 <prvUnlockQueue+0x60>
 800974c:	e000      	b.n	8009750 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800974e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	22ff      	movs	r2, #255	@ 0xff
 8009754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009758:	f001 f990 	bl	800aa7c <vPortExitCritical>
}
 800975c:	bf00      	nop
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800976c:	f001 f956 	bl	800aa1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009778:	2301      	movs	r3, #1
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	e001      	b.n	8009782 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009782:	f001 f97b 	bl	800aa7c <vPortExitCritical>

	return xReturn;
 8009786:	68fb      	ldr	r3, [r7, #12]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009798:	f001 f940 	bl	800aa1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d102      	bne.n	80097ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	e001      	b.n	80097b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097b2:	f001 f963 	bl	800aa7c <vPortExitCritical>

	return xReturn;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	@ 0x38
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	623b      	str	r3, [r7, #32]
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <xTaskCreateStatic+0x4a>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	61fb      	str	r3, [r7, #28]
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800980a:	2354      	movs	r3, #84	@ 0x54
 800980c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b54      	cmp	r3, #84	@ 0x54
 8009812:	d00b      	beq.n	800982c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	61bb      	str	r3, [r7, #24]
}
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	e7fd      	b.n	8009828 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800982c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009830:	2b00      	cmp	r3, #0
 8009832:	d01e      	beq.n	8009872 <xTaskCreateStatic+0xb2>
 8009834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01b      	beq.n	8009872 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800983e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009840:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009842:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009846:	2202      	movs	r2, #2
 8009848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800984c:	2300      	movs	r3, #0
 800984e:	9303      	str	r3, [sp, #12]
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	9302      	str	r3, [sp, #8]
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	68b9      	ldr	r1, [r7, #8]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f850 	bl	800990a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800986a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800986c:	f000 f8d6 	bl	8009a1c <prvAddNewTaskToReadyList>
 8009870:	e001      	b.n	8009876 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009876:	697b      	ldr	r3, [r7, #20]
	}
 8009878:	4618      	mov	r0, r3
 800987a:	3728      	adds	r7, #40	@ 0x28
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	@ 0x30
 8009884:	af04      	add	r7, sp, #16
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009890:	88fb      	ldrh	r3, [r7, #6]
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4618      	mov	r0, r3
 8009896:	f001 f983 	bl	800aba0 <pvPortMalloc>
 800989a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00e      	beq.n	80098c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098a2:	2054      	movs	r0, #84	@ 0x54
 80098a4:	f001 f97c 	bl	800aba0 <pvPortMalloc>
 80098a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d003      	beq.n	80098b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80098b6:	e005      	b.n	80098c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098b8:	6978      	ldr	r0, [r7, #20]
 80098ba:	f001 fa3f 	bl	800ad3c <vPortFree>
 80098be:	e001      	b.n	80098c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d017      	beq.n	80098fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098d2:	88fa      	ldrh	r2, [r7, #6]
 80098d4:	2300      	movs	r3, #0
 80098d6:	9303      	str	r3, [sp, #12]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	9302      	str	r3, [sp, #8]
 80098dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f80e 	bl	800990a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098ee:	69f8      	ldr	r0, [r7, #28]
 80098f0:	f000 f894 	bl	8009a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098f4:	2301      	movs	r3, #1
 80098f6:	61bb      	str	r3, [r7, #24]
 80098f8:	e002      	b.n	8009900 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098fa:	f04f 33ff 	mov.w	r3, #4294967295
 80098fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009900:	69bb      	ldr	r3, [r7, #24]
	}
 8009902:	4618      	mov	r0, r3
 8009904:	3720      	adds	r7, #32
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b088      	sub	sp, #32
 800990e:	af00      	add	r7, sp, #0
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	607a      	str	r2, [r7, #4]
 8009916:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009922:	3b01      	subs	r3, #1
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4413      	add	r3, r2
 8009928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	f023 0307 	bic.w	r3, r3, #7
 8009930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	617b      	str	r3, [r7, #20]
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	e7fd      	b.n	8009950 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01f      	beq.n	800999a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e012      	b.n	8009986 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	7819      	ldrb	r1, [r3, #0]
 8009968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	3334      	adds	r3, #52	@ 0x34
 8009970:	460a      	mov	r2, r1
 8009972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	3301      	adds	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	2b0f      	cmp	r3, #15
 800998a:	d9e9      	bls.n	8009960 <prvInitialiseNewTask+0x56>
 800998c:	e000      	b.n	8009990 <prvInitialiseNewTask+0x86>
			{
				break;
 800998e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009998:	e003      	b.n	80099a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a4:	2b06      	cmp	r3, #6
 80099a6:	d901      	bls.n	80099ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099a8:	2306      	movs	r3, #6
 80099aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	2200      	movs	r2, #0
 80099bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fab4 	bl	8008f30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	3318      	adds	r3, #24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff faaf 	bl	8008f30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	f1c3 0207 	rsb	r2, r3, #7
 80099de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	2200      	movs	r2, #0
 80099ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	68f9      	ldr	r1, [r7, #12]
 80099fa:	69b8      	ldr	r0, [r7, #24]
 80099fc:	f000 ff1e 	bl	800a83c <pxPortInitialiseStack>
 8009a00:	4602      	mov	r2, r0
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a12:	bf00      	nop
 8009a14:	3720      	adds	r7, #32
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a24:	f000 fffa 	bl	800aa1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a28:	4b2a      	ldr	r3, [pc, #168]	@ (8009ad4 <prvAddNewTaskToReadyList+0xb8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	4a29      	ldr	r2, [pc, #164]	@ (8009ad4 <prvAddNewTaskToReadyList+0xb8>)
 8009a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a32:	4b29      	ldr	r3, [pc, #164]	@ (8009ad8 <prvAddNewTaskToReadyList+0xbc>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a3a:	4a27      	ldr	r2, [pc, #156]	@ (8009ad8 <prvAddNewTaskToReadyList+0xbc>)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a40:	4b24      	ldr	r3, [pc, #144]	@ (8009ad4 <prvAddNewTaskToReadyList+0xb8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d110      	bne.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a48:	f000 fbd4 	bl	800a1f4 <prvInitialiseTaskLists>
 8009a4c:	e00d      	b.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a4e:	4b23      	ldr	r3, [pc, #140]	@ (8009adc <prvAddNewTaskToReadyList+0xc0>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a56:	4b20      	ldr	r3, [pc, #128]	@ (8009ad8 <prvAddNewTaskToReadyList+0xbc>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d802      	bhi.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a64:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad8 <prvAddNewTaskToReadyList+0xbc>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8009ae0 <prvAddNewTaskToReadyList+0xc4>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	4a1b      	ldr	r2, [pc, #108]	@ (8009ae0 <prvAddNewTaskToReadyList+0xc4>)
 8009a72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	2201      	movs	r2, #1
 8009a7a:	409a      	lsls	r2, r3
 8009a7c:	4b19      	ldr	r3, [pc, #100]	@ (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	4a18      	ldr	r2, [pc, #96]	@ (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4a15      	ldr	r2, [pc, #84]	@ (8009ae8 <prvAddNewTaskToReadyList+0xcc>)
 8009a94:	441a      	add	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	f7ff fa53 	bl	8008f48 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aa2:	f000 ffeb 	bl	800aa7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8009adc <prvAddNewTaskToReadyList+0xc0>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00e      	beq.n	8009acc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009aae:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad8 <prvAddNewTaskToReadyList+0xbc>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d207      	bcs.n	8009acc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009abc:	4b0b      	ldr	r3, [pc, #44]	@ (8009aec <prvAddNewTaskToReadyList+0xd0>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20000bf0 	.word	0x20000bf0
 8009ad8:	20000af0 	.word	0x20000af0
 8009adc:	20000bfc 	.word	0x20000bfc
 8009ae0:	20000c0c 	.word	0x20000c0c
 8009ae4:	20000bf8 	.word	0x20000bf8
 8009ae8:	20000af4 	.word	0x20000af4
 8009aec:	e000ed04 	.word	0xe000ed04

08009af0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d018      	beq.n	8009b34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b02:	4b14      	ldr	r3, [pc, #80]	@ (8009b54 <vTaskDelay+0x64>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00b      	beq.n	8009b22 <vTaskDelay+0x32>
	__asm volatile
 8009b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	60bb      	str	r3, [r7, #8]
}
 8009b1c:	bf00      	nop
 8009b1e:	bf00      	nop
 8009b20:	e7fd      	b.n	8009b1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b22:	f000 f87d 	bl	8009c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b26:	2100      	movs	r1, #0
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fe21 	bl	800a770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b2e:	f000 f885 	bl	8009c3c <xTaskResumeAll>
 8009b32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d107      	bne.n	8009b4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009b3a:	4b07      	ldr	r3, [pc, #28]	@ (8009b58 <vTaskDelay+0x68>)
 8009b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b4a:	bf00      	nop
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000c18 	.word	0x20000c18
 8009b58:	e000ed04 	.word	0xe000ed04

08009b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08a      	sub	sp, #40	@ 0x28
 8009b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b6a:	463a      	mov	r2, r7
 8009b6c:	1d39      	adds	r1, r7, #4
 8009b6e:	f107 0308 	add.w	r3, r7, #8
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f9 f942 	bl	8002dfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b78:	6839      	ldr	r1, [r7, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	9202      	str	r2, [sp, #8]
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	2300      	movs	r3, #0
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	2300      	movs	r3, #0
 8009b88:	460a      	mov	r2, r1
 8009b8a:	491f      	ldr	r1, [pc, #124]	@ (8009c08 <vTaskStartScheduler+0xac>)
 8009b8c:	481f      	ldr	r0, [pc, #124]	@ (8009c0c <vTaskStartScheduler+0xb0>)
 8009b8e:	f7ff fe17 	bl	80097c0 <xTaskCreateStatic>
 8009b92:	4603      	mov	r3, r0
 8009b94:	4a1e      	ldr	r2, [pc, #120]	@ (8009c10 <vTaskStartScheduler+0xb4>)
 8009b96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b98:	4b1d      	ldr	r3, [pc, #116]	@ (8009c10 <vTaskStartScheduler+0xb4>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d002      	beq.n	8009ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	e001      	b.n	8009baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d116      	bne.n	8009bde <vTaskStartScheduler+0x82>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	613b      	str	r3, [r7, #16]
}
 8009bc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc4:	4b13      	ldr	r3, [pc, #76]	@ (8009c14 <vTaskStartScheduler+0xb8>)
 8009bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bcc:	4b12      	ldr	r3, [pc, #72]	@ (8009c18 <vTaskStartScheduler+0xbc>)
 8009bce:	2201      	movs	r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bd2:	4b12      	ldr	r3, [pc, #72]	@ (8009c1c <vTaskStartScheduler+0xc0>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bd8:	f000 feae 	bl	800a938 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bdc:	e00f      	b.n	8009bfe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d10b      	bne.n	8009bfe <vTaskStartScheduler+0xa2>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60fb      	str	r3, [r7, #12]
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <vTaskStartScheduler+0x9e>
}
 8009bfe:	bf00      	nop
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	0800dda0 	.word	0x0800dda0
 8009c0c:	0800a1c5 	.word	0x0800a1c5
 8009c10:	20000c14 	.word	0x20000c14
 8009c14:	20000c10 	.word	0x20000c10
 8009c18:	20000bfc 	.word	0x20000bfc
 8009c1c:	20000bf4 	.word	0x20000bf4

08009c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c20:	b480      	push	{r7}
 8009c22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c24:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <vTaskSuspendAll+0x18>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	4a03      	ldr	r2, [pc, #12]	@ (8009c38 <vTaskSuspendAll+0x18>)
 8009c2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c2e:	bf00      	nop
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bc80      	pop	{r7}
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20000c18 	.word	0x20000c18

08009c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c4a:	4b42      	ldr	r3, [pc, #264]	@ (8009d54 <xTaskResumeAll+0x118>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10b      	bne.n	8009c6a <xTaskResumeAll+0x2e>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	603b      	str	r3, [r7, #0]
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	e7fd      	b.n	8009c66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c6a:	f000 fed7 	bl	800aa1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c6e:	4b39      	ldr	r3, [pc, #228]	@ (8009d54 <xTaskResumeAll+0x118>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	4a37      	ldr	r2, [pc, #220]	@ (8009d54 <xTaskResumeAll+0x118>)
 8009c76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c78:	4b36      	ldr	r3, [pc, #216]	@ (8009d54 <xTaskResumeAll+0x118>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d161      	bne.n	8009d44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c80:	4b35      	ldr	r3, [pc, #212]	@ (8009d58 <xTaskResumeAll+0x11c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d05d      	beq.n	8009d44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c88:	e02e      	b.n	8009ce8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c8a:	4b34      	ldr	r3, [pc, #208]	@ (8009d5c <xTaskResumeAll+0x120>)
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3318      	adds	r3, #24
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7ff f9b1 	bl	8008ffe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7ff f9ac 	bl	8008ffe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009caa:	2201      	movs	r2, #1
 8009cac:	409a      	lsls	r2, r3
 8009cae:	4b2c      	ldr	r3, [pc, #176]	@ (8009d60 <xTaskResumeAll+0x124>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8009d60 <xTaskResumeAll+0x124>)
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4a27      	ldr	r2, [pc, #156]	@ (8009d64 <xTaskResumeAll+0x128>)
 8009cc6:	441a      	add	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7ff f93a 	bl	8008f48 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cd8:	4b23      	ldr	r3, [pc, #140]	@ (8009d68 <xTaskResumeAll+0x12c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ce2:	4b22      	ldr	r3, [pc, #136]	@ (8009d6c <xTaskResumeAll+0x130>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8009d5c <xTaskResumeAll+0x120>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1cc      	bne.n	8009c8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cf6:	f000 fb1b 	bl	800a330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009d70 <xTaskResumeAll+0x134>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d010      	beq.n	8009d28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d06:	f000 f837 	bl	8009d78 <xTaskIncrementTick>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d10:	4b16      	ldr	r3, [pc, #88]	@ (8009d6c <xTaskResumeAll+0x130>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1f1      	bne.n	8009d06 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d22:	4b13      	ldr	r3, [pc, #76]	@ (8009d70 <xTaskResumeAll+0x134>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d28:	4b10      	ldr	r3, [pc, #64]	@ (8009d6c <xTaskResumeAll+0x130>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d009      	beq.n	8009d44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d30:	2301      	movs	r3, #1
 8009d32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d34:	4b0f      	ldr	r3, [pc, #60]	@ (8009d74 <xTaskResumeAll+0x138>)
 8009d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d44:	f000 fe9a 	bl	800aa7c <vPortExitCritical>

	return xAlreadyYielded;
 8009d48:	68bb      	ldr	r3, [r7, #8]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000c18 	.word	0x20000c18
 8009d58:	20000bf0 	.word	0x20000bf0
 8009d5c:	20000bb0 	.word	0x20000bb0
 8009d60:	20000bf8 	.word	0x20000bf8
 8009d64:	20000af4 	.word	0x20000af4
 8009d68:	20000af0 	.word	0x20000af0
 8009d6c:	20000c04 	.word	0x20000c04
 8009d70:	20000c00 	.word	0x20000c00
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d82:	4b4f      	ldr	r3, [pc, #316]	@ (8009ec0 <xTaskIncrementTick+0x148>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f040 808f 	bne.w	8009eaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d8c:	4b4d      	ldr	r3, [pc, #308]	@ (8009ec4 <xTaskIncrementTick+0x14c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3301      	adds	r3, #1
 8009d92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d94:	4a4b      	ldr	r2, [pc, #300]	@ (8009ec4 <xTaskIncrementTick+0x14c>)
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d121      	bne.n	8009de4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009da0:	4b49      	ldr	r3, [pc, #292]	@ (8009ec8 <xTaskIncrementTick+0x150>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	603b      	str	r3, [r7, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	e7fd      	b.n	8009dbe <xTaskIncrementTick+0x46>
 8009dc2:	4b41      	ldr	r3, [pc, #260]	@ (8009ec8 <xTaskIncrementTick+0x150>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	4b40      	ldr	r3, [pc, #256]	@ (8009ecc <xTaskIncrementTick+0x154>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8009ec8 <xTaskIncrementTick+0x150>)
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8009ecc <xTaskIncrementTick+0x154>)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ed0 <xTaskIncrementTick+0x158>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	4a3c      	ldr	r2, [pc, #240]	@ (8009ed0 <xTaskIncrementTick+0x158>)
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	f000 faa6 	bl	800a330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009de4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ed4 <xTaskIncrementTick+0x15c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d348      	bcc.n	8009e80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dee:	4b36      	ldr	r3, [pc, #216]	@ (8009ec8 <xTaskIncrementTick+0x150>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d104      	bne.n	8009e02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df8:	4b36      	ldr	r3, [pc, #216]	@ (8009ed4 <xTaskIncrementTick+0x15c>)
 8009dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfe:	601a      	str	r2, [r3, #0]
					break;
 8009e00:	e03e      	b.n	8009e80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e02:	4b31      	ldr	r3, [pc, #196]	@ (8009ec8 <xTaskIncrementTick+0x150>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d203      	bcs.n	8009e22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8009ed4 <xTaskIncrementTick+0x15c>)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e20:	e02e      	b.n	8009e80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7ff f8e9 	bl	8008ffe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d004      	beq.n	8009e3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	3318      	adds	r3, #24
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff f8e0 	bl	8008ffe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e42:	2201      	movs	r2, #1
 8009e44:	409a      	lsls	r2, r3
 8009e46:	4b24      	ldr	r3, [pc, #144]	@ (8009ed8 <xTaskIncrementTick+0x160>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	4a22      	ldr	r2, [pc, #136]	@ (8009ed8 <xTaskIncrementTick+0x160>)
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009edc <xTaskIncrementTick+0x164>)
 8009e5e:	441a      	add	r2, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7ff f86e 	bl	8008f48 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e70:	4b1b      	ldr	r3, [pc, #108]	@ (8009ee0 <xTaskIncrementTick+0x168>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d3b9      	bcc.n	8009dee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e7e:	e7b6      	b.n	8009dee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e80:	4b17      	ldr	r3, [pc, #92]	@ (8009ee0 <xTaskIncrementTick+0x168>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e86:	4915      	ldr	r1, [pc, #84]	@ (8009edc <xTaskIncrementTick+0x164>)
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	440b      	add	r3, r1
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d901      	bls.n	8009e9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ee4 <xTaskIncrementTick+0x16c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	e004      	b.n	8009eb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee8 <xTaskIncrementTick+0x170>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8009ee8 <xTaskIncrementTick+0x170>)
 8009eb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009eb4:	697b      	ldr	r3, [r7, #20]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000c18 	.word	0x20000c18
 8009ec4:	20000bf4 	.word	0x20000bf4
 8009ec8:	20000ba8 	.word	0x20000ba8
 8009ecc:	20000bac 	.word	0x20000bac
 8009ed0:	20000c08 	.word	0x20000c08
 8009ed4:	20000c10 	.word	0x20000c10
 8009ed8:	20000bf8 	.word	0x20000bf8
 8009edc:	20000af4 	.word	0x20000af4
 8009ee0:	20000af0 	.word	0x20000af0
 8009ee4:	20000c04 	.word	0x20000c04
 8009ee8:	20000c00 	.word	0x20000c00

08009eec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ef2:	4b27      	ldr	r3, [pc, #156]	@ (8009f90 <vTaskSwitchContext+0xa4>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009efa:	4b26      	ldr	r3, [pc, #152]	@ (8009f94 <vTaskSwitchContext+0xa8>)
 8009efc:	2201      	movs	r2, #1
 8009efe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f00:	e040      	b.n	8009f84 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009f02:	4b24      	ldr	r3, [pc, #144]	@ (8009f94 <vTaskSwitchContext+0xa8>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f08:	4b23      	ldr	r3, [pc, #140]	@ (8009f98 <vTaskSwitchContext+0xac>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	fab3 f383 	clz	r3, r3
 8009f14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	f1c3 031f 	rsb	r3, r3, #31
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	491f      	ldr	r1, [pc, #124]	@ (8009f9c <vTaskSwitchContext+0xb0>)
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10b      	bne.n	8009f4a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	607b      	str	r3, [r7, #4]
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <vTaskSwitchContext+0x5a>
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4a11      	ldr	r2, [pc, #68]	@ (8009f9c <vTaskSwitchContext+0xb0>)
 8009f56:	4413      	add	r3, r2
 8009f58:	613b      	str	r3, [r7, #16]
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	605a      	str	r2, [r3, #4]
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	3308      	adds	r3, #8
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d104      	bne.n	8009f7a <vTaskSwitchContext+0x8e>
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	4a07      	ldr	r2, [pc, #28]	@ (8009fa0 <vTaskSwitchContext+0xb4>)
 8009f82:	6013      	str	r3, [r2, #0]
}
 8009f84:	bf00      	nop
 8009f86:	371c      	adds	r7, #28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bc80      	pop	{r7}
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20000c18 	.word	0x20000c18
 8009f94:	20000c04 	.word	0x20000c04
 8009f98:	20000bf8 	.word	0x20000bf8
 8009f9c:	20000af4 	.word	0x20000af4
 8009fa0:	20000af0 	.word	0x20000af0

08009fa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10b      	bne.n	8009fcc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	60fb      	str	r3, [r7, #12]
}
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	e7fd      	b.n	8009fc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fcc:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <vTaskPlaceOnEventList+0x48>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	3318      	adds	r3, #24
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7fe ffda 	bl	8008f8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fda:	2101      	movs	r1, #1
 8009fdc:	6838      	ldr	r0, [r7, #0]
 8009fde:	f000 fbc7 	bl	800a770 <prvAddCurrentTaskToDelayedList>
}
 8009fe2:	bf00      	nop
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	20000af0 	.word	0x20000af0

08009ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10b      	bne.n	800a01e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	60fb      	str	r3, [r7, #12]
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	e7fd      	b.n	800a01a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	3318      	adds	r3, #24
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe ffeb 	bl	8008ffe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a028:	4b1d      	ldr	r3, [pc, #116]	@ (800a0a0 <xTaskRemoveFromEventList+0xb0>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11c      	bne.n	800a06a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe ffe2 	bl	8008ffe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03e:	2201      	movs	r2, #1
 800a040:	409a      	lsls	r2, r3
 800a042:	4b18      	ldr	r3, [pc, #96]	@ (800a0a4 <xTaskRemoveFromEventList+0xb4>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4313      	orrs	r3, r2
 800a048:	4a16      	ldr	r2, [pc, #88]	@ (800a0a4 <xTaskRemoveFromEventList+0xb4>)
 800a04a:	6013      	str	r3, [r2, #0]
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4a13      	ldr	r2, [pc, #76]	@ (800a0a8 <xTaskRemoveFromEventList+0xb8>)
 800a05a:	441a      	add	r2, r3
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	3304      	adds	r3, #4
 800a060:	4619      	mov	r1, r3
 800a062:	4610      	mov	r0, r2
 800a064:	f7fe ff70 	bl	8008f48 <vListInsertEnd>
 800a068:	e005      	b.n	800a076 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	3318      	adds	r3, #24
 800a06e:	4619      	mov	r1, r3
 800a070:	480e      	ldr	r0, [pc, #56]	@ (800a0ac <xTaskRemoveFromEventList+0xbc>)
 800a072:	f7fe ff69 	bl	8008f48 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a07a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b0 <xTaskRemoveFromEventList+0xc0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a080:	429a      	cmp	r2, r3
 800a082:	d905      	bls.n	800a090 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a084:	2301      	movs	r3, #1
 800a086:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a088:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b4 <xTaskRemoveFromEventList+0xc4>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	e001      	b.n	800a094 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a090:	2300      	movs	r3, #0
 800a092:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a094:	697b      	ldr	r3, [r7, #20]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000c18 	.word	0x20000c18
 800a0a4:	20000bf8 	.word	0x20000bf8
 800a0a8:	20000af4 	.word	0x20000af4
 800a0ac:	20000bb0 	.word	0x20000bb0
 800a0b0:	20000af0 	.word	0x20000af0
 800a0b4:	20000c04 	.word	0x20000c04

0800a0b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0c0:	4b06      	ldr	r3, [pc, #24]	@ (800a0dc <vTaskInternalSetTimeOutState+0x24>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0c8:	4b05      	ldr	r3, [pc, #20]	@ (800a0e0 <vTaskInternalSetTimeOutState+0x28>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	605a      	str	r2, [r3, #4]
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bc80      	pop	{r7}
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20000c08 	.word	0x20000c08
 800a0e0:	20000bf4 	.word	0x20000bf4

0800a0e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10b      	bne.n	800a10c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	613b      	str	r3, [r7, #16]
}
 800a106:	bf00      	nop
 800a108:	bf00      	nop
 800a10a:	e7fd      	b.n	800a108 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10b      	bne.n	800a12a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60fb      	str	r3, [r7, #12]
}
 800a124:	bf00      	nop
 800a126:	bf00      	nop
 800a128:	e7fd      	b.n	800a126 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a12a:	f000 fc77 	bl	800aa1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a12e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <xTaskCheckForTimeOut+0xc0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a146:	d102      	bne.n	800a14e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a148:	2300      	movs	r3, #0
 800a14a:	61fb      	str	r3, [r7, #28]
 800a14c:	e023      	b.n	800a196 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4b15      	ldr	r3, [pc, #84]	@ (800a1a8 <xTaskCheckForTimeOut+0xc4>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d007      	beq.n	800a16a <xTaskCheckForTimeOut+0x86>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	429a      	cmp	r2, r3
 800a162:	d302      	bcc.n	800a16a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a164:	2301      	movs	r3, #1
 800a166:	61fb      	str	r3, [r7, #28]
 800a168:	e015      	b.n	800a196 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	429a      	cmp	r2, r3
 800a172:	d20b      	bcs.n	800a18c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	1ad2      	subs	r2, r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff ff99 	bl	800a0b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a186:	2300      	movs	r3, #0
 800a188:	61fb      	str	r3, [r7, #28]
 800a18a:	e004      	b.n	800a196 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a192:	2301      	movs	r3, #1
 800a194:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a196:	f000 fc71 	bl	800aa7c <vPortExitCritical>

	return xReturn;
 800a19a:	69fb      	ldr	r3, [r7, #28]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3720      	adds	r7, #32
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20000bf4 	.word	0x20000bf4
 800a1a8:	20000c08 	.word	0x20000c08

0800a1ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1b0:	4b03      	ldr	r3, [pc, #12]	@ (800a1c0 <vTaskMissedYield+0x14>)
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	601a      	str	r2, [r3, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bc80      	pop	{r7}
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	20000c04 	.word	0x20000c04

0800a1c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1cc:	f000 f852 	bl	800a274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1d0:	4b06      	ldr	r3, [pc, #24]	@ (800a1ec <prvIdleTask+0x28>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d9f9      	bls.n	800a1cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1d8:	4b05      	ldr	r3, [pc, #20]	@ (800a1f0 <prvIdleTask+0x2c>)
 800a1da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1de:	601a      	str	r2, [r3, #0]
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1e8:	e7f0      	b.n	800a1cc <prvIdleTask+0x8>
 800a1ea:	bf00      	nop
 800a1ec:	20000af4 	.word	0x20000af4
 800a1f0:	e000ed04 	.word	0xe000ed04

0800a1f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	607b      	str	r3, [r7, #4]
 800a1fe:	e00c      	b.n	800a21a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	4613      	mov	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4a12      	ldr	r2, [pc, #72]	@ (800a254 <prvInitialiseTaskLists+0x60>)
 800a20c:	4413      	add	r3, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe fe6f 	bl	8008ef2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3301      	adds	r3, #1
 800a218:	607b      	str	r3, [r7, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b06      	cmp	r3, #6
 800a21e:	d9ef      	bls.n	800a200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a220:	480d      	ldr	r0, [pc, #52]	@ (800a258 <prvInitialiseTaskLists+0x64>)
 800a222:	f7fe fe66 	bl	8008ef2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a226:	480d      	ldr	r0, [pc, #52]	@ (800a25c <prvInitialiseTaskLists+0x68>)
 800a228:	f7fe fe63 	bl	8008ef2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a22c:	480c      	ldr	r0, [pc, #48]	@ (800a260 <prvInitialiseTaskLists+0x6c>)
 800a22e:	f7fe fe60 	bl	8008ef2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a232:	480c      	ldr	r0, [pc, #48]	@ (800a264 <prvInitialiseTaskLists+0x70>)
 800a234:	f7fe fe5d 	bl	8008ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a238:	480b      	ldr	r0, [pc, #44]	@ (800a268 <prvInitialiseTaskLists+0x74>)
 800a23a:	f7fe fe5a 	bl	8008ef2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a23e:	4b0b      	ldr	r3, [pc, #44]	@ (800a26c <prvInitialiseTaskLists+0x78>)
 800a240:	4a05      	ldr	r2, [pc, #20]	@ (800a258 <prvInitialiseTaskLists+0x64>)
 800a242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a244:	4b0a      	ldr	r3, [pc, #40]	@ (800a270 <prvInitialiseTaskLists+0x7c>)
 800a246:	4a05      	ldr	r2, [pc, #20]	@ (800a25c <prvInitialiseTaskLists+0x68>)
 800a248:	601a      	str	r2, [r3, #0]
}
 800a24a:	bf00      	nop
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000af4 	.word	0x20000af4
 800a258:	20000b80 	.word	0x20000b80
 800a25c:	20000b94 	.word	0x20000b94
 800a260:	20000bb0 	.word	0x20000bb0
 800a264:	20000bc4 	.word	0x20000bc4
 800a268:	20000bdc 	.word	0x20000bdc
 800a26c:	20000ba8 	.word	0x20000ba8
 800a270:	20000bac 	.word	0x20000bac

0800a274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a27a:	e019      	b.n	800a2b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a27c:	f000 fbce 	bl	800aa1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a280:	4b10      	ldr	r3, [pc, #64]	@ (800a2c4 <prvCheckTasksWaitingTermination+0x50>)
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fe feb6 	bl	8008ffe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a292:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c8 <prvCheckTasksWaitingTermination+0x54>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3b01      	subs	r3, #1
 800a298:	4a0b      	ldr	r2, [pc, #44]	@ (800a2c8 <prvCheckTasksWaitingTermination+0x54>)
 800a29a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a29c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2cc <prvCheckTasksWaitingTermination+0x58>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a2cc <prvCheckTasksWaitingTermination+0x58>)
 800a2a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2a6:	f000 fbe9 	bl	800aa7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f810 	bl	800a2d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2b0:	4b06      	ldr	r3, [pc, #24]	@ (800a2cc <prvCheckTasksWaitingTermination+0x58>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1e1      	bne.n	800a27c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000bc4 	.word	0x20000bc4
 800a2c8:	20000bf0 	.word	0x20000bf0
 800a2cc:	20000bd8 	.word	0x20000bd8

0800a2d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d108      	bne.n	800a2f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fd28 	bl	800ad3c <vPortFree>
				vPortFree( pxTCB );
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fd25 	bl	800ad3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2f2:	e019      	b.n	800a328 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d103      	bne.n	800a306 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fd1c 	bl	800ad3c <vPortFree>
	}
 800a304:	e010      	b.n	800a328 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d00b      	beq.n	800a328 <prvDeleteTCB+0x58>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	60fb      	str	r3, [r7, #12]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <prvDeleteTCB+0x54>
	}
 800a328:	bf00      	nop
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a336:	4b0c      	ldr	r3, [pc, #48]	@ (800a368 <prvResetNextTaskUnblockTime+0x38>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d104      	bne.n	800a34a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a340:	4b0a      	ldr	r3, [pc, #40]	@ (800a36c <prvResetNextTaskUnblockTime+0x3c>)
 800a342:	f04f 32ff 	mov.w	r2, #4294967295
 800a346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a348:	e008      	b.n	800a35c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a34a:	4b07      	ldr	r3, [pc, #28]	@ (800a368 <prvResetNextTaskUnblockTime+0x38>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	4a04      	ldr	r2, [pc, #16]	@ (800a36c <prvResetNextTaskUnblockTime+0x3c>)
 800a35a:	6013      	str	r3, [r2, #0]
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	20000ba8 	.word	0x20000ba8
 800a36c:	20000c10 	.word	0x20000c10

0800a370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a376:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <xTaskGetSchedulerState+0x34>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d102      	bne.n	800a384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a37e:	2301      	movs	r3, #1
 800a380:	607b      	str	r3, [r7, #4]
 800a382:	e008      	b.n	800a396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a384:	4b08      	ldr	r3, [pc, #32]	@ (800a3a8 <xTaskGetSchedulerState+0x38>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d102      	bne.n	800a392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a38c:	2302      	movs	r3, #2
 800a38e:	607b      	str	r3, [r7, #4]
 800a390:	e001      	b.n	800a396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a392:	2300      	movs	r3, #0
 800a394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a396:	687b      	ldr	r3, [r7, #4]
	}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bc80      	pop	{r7}
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20000bfc 	.word	0x20000bfc
 800a3a8:	20000c18 	.word	0x20000c18

0800a3ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d070      	beq.n	800a4a4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3c2:	4b3b      	ldr	r3, [pc, #236]	@ (800a4b0 <xTaskPriorityDisinherit+0x104>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d00b      	beq.n	800a3e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	60fb      	str	r3, [r7, #12]
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	e7fd      	b.n	800a3e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	60bb      	str	r3, [r7, #8]
}
 800a3fe:	bf00      	nop
 800a400:	bf00      	nop
 800a402:	e7fd      	b.n	800a400 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a408:	1e5a      	subs	r2, r3, #1
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a416:	429a      	cmp	r2, r3
 800a418:	d044      	beq.n	800a4a4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d140      	bne.n	800a4a4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	3304      	adds	r3, #4
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fde9 	bl	8008ffe <uxListRemove>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d115      	bne.n	800a45e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a436:	491f      	ldr	r1, [pc, #124]	@ (800a4b4 <xTaskPriorityDisinherit+0x108>)
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10a      	bne.n	800a45e <xTaskPriorityDisinherit+0xb2>
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	2201      	movs	r2, #1
 800a44e:	fa02 f303 	lsl.w	r3, r2, r3
 800a452:	43da      	mvns	r2, r3
 800a454:	4b18      	ldr	r3, [pc, #96]	@ (800a4b8 <xTaskPriorityDisinherit+0x10c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4013      	ands	r3, r2
 800a45a:	4a17      	ldr	r2, [pc, #92]	@ (800a4b8 <xTaskPriorityDisinherit+0x10c>)
 800a45c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	f1c3 0207 	rsb	r2, r3, #7
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a476:	2201      	movs	r2, #1
 800a478:	409a      	lsls	r2, r3
 800a47a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b8 <xTaskPriorityDisinherit+0x10c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4313      	orrs	r3, r2
 800a480:	4a0d      	ldr	r2, [pc, #52]	@ (800a4b8 <xTaskPriorityDisinherit+0x10c>)
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4a08      	ldr	r2, [pc, #32]	@ (800a4b4 <xTaskPriorityDisinherit+0x108>)
 800a492:	441a      	add	r2, r3
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	3304      	adds	r3, #4
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f7fe fd54 	bl	8008f48 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4a4:	697b      	ldr	r3, [r7, #20]
	}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3718      	adds	r7, #24
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000af0 	.word	0x20000af0
 800a4b4:	20000af4 	.word	0x20000af4
 800a4b8:	20000bf8 	.word	0x20000bf8

0800a4bc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a4c6:	f000 faa9 	bl	800aa1c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a4ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a544 <ulTaskNotifyTake+0x88>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d113      	bne.n	800a4fc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a4d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a544 <ulTaskNotifyTake+0x88>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00b      	beq.n	800a4fc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	6838      	ldr	r0, [r7, #0]
 800a4e8:	f000 f942 	bl	800a770 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a4ec:	4b16      	ldr	r3, [pc, #88]	@ (800a548 <ulTaskNotifyTake+0x8c>)
 800a4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a4fc:	f000 fabe 	bl	800aa7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800a500:	f000 fa8c 	bl	800aa1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a504:	4b0f      	ldr	r3, [pc, #60]	@ (800a544 <ulTaskNotifyTake+0x88>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a50a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00c      	beq.n	800a52c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d004      	beq.n	800a522 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a518:	4b0a      	ldr	r3, [pc, #40]	@ (800a544 <ulTaskNotifyTake+0x88>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2200      	movs	r2, #0
 800a51e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a520:	e004      	b.n	800a52c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a522:	4b08      	ldr	r3, [pc, #32]	@ (800a544 <ulTaskNotifyTake+0x88>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	3a01      	subs	r2, #1
 800a52a:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a52c:	4b05      	ldr	r3, [pc, #20]	@ (800a544 <ulTaskNotifyTake+0x88>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800a536:	f000 faa1 	bl	800aa7c <vPortExitCritical>

		return ulReturn;
 800a53a:	68fb      	ldr	r3, [r7, #12]
	}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20000af0 	.word	0x20000af0
 800a548:	e000ed04 	.word	0xe000ed04

0800a54c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a55a:	f000 fa5f 	bl	800aa1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a55e:	4b26      	ldr	r3, [pc, #152]	@ (800a5f8 <xTaskNotifyWait+0xac>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d01a      	beq.n	800a5a2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a56c:	4b22      	ldr	r3, [pc, #136]	@ (800a5f8 <xTaskNotifyWait+0xac>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	43d2      	mvns	r2, r2
 800a576:	400a      	ands	r2, r1
 800a578:	64da      	str	r2, [r3, #76]	@ 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a57a:	4b1f      	ldr	r3, [pc, #124]	@ (800a5f8 <xTaskNotifyWait+0xac>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00b      	beq.n	800a5a2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a58a:	2101      	movs	r1, #1
 800a58c:	6838      	ldr	r0, [r7, #0]
 800a58e:	f000 f8ef 	bl	800a770 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a592:	4b1a      	ldr	r3, [pc, #104]	@ (800a5fc <xTaskNotifyWait+0xb0>)
 800a594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a5a2:	f000 fa6b 	bl	800aa7c <vPortExitCritical>

		taskENTER_CRITICAL();
 800a5a6:	f000 fa39 	bl	800aa1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d004      	beq.n	800a5ba <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a5b0:	4b11      	ldr	r3, [pc, #68]	@ (800a5f8 <xTaskNotifyWait+0xac>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f8 <xTaskNotifyWait+0xac>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d002      	beq.n	800a5ce <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	e008      	b.n	800a5e0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f8 <xTaskNotifyWait+0xac>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	43d2      	mvns	r2, r2
 800a5d8:	400a      	ands	r2, r1
 800a5da:	64da      	str	r2, [r3, #76]	@ 0x4c
				xReturn = pdTRUE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5e0:	4b05      	ldr	r3, [pc, #20]	@ (800a5f8 <xTaskNotifyWait+0xac>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800a5ea:	f000 fa47 	bl	800aa7c <vPortExitCritical>

		return xReturn;
 800a5ee:	697b      	ldr	r3, [r7, #20]
	}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	20000af0 	.word	0x20000af0
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	@ 0x28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	603b      	str	r3, [r7, #0]
 800a60c:	4613      	mov	r3, r2
 800a60e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a610:	2301      	movs	r3, #1
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10b      	bne.n	800a632 <xTaskGenericNotify+0x32>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	61bb      	str	r3, [r7, #24]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a636:	f000 f9f1 	bl	800aa1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a64e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a650:	6a3b      	ldr	r3, [r7, #32]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 800a658:	79fb      	ldrb	r3, [r7, #7]
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d827      	bhi.n	800a6ae <xTaskGenericNotify+0xae>
 800a65e:	a201      	add	r2, pc, #4	@ (adr r2, 800a664 <xTaskGenericNotify+0x64>)
 800a660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a664:	0800a6d1 	.word	0x0800a6d1
 800a668:	0800a679 	.word	0x0800a679
 800a66c:	0800a687 	.word	0x0800a687
 800a670:	0800a693 	.word	0x0800a693
 800a674:	0800a69b 	.word	0x0800a69b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	431a      	orrs	r2, r3
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800a684:	e027      	b.n	800a6d6 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68a:	1c5a      	adds	r2, r3, #1
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800a690:	e021      	b.n	800a6d6 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 800a698:	e01d      	b.n	800a6d6 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a69a:	7ffb      	ldrb	r3, [r7, #31]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d003      	beq.n	800a6a8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a6a0:	6a3b      	ldr	r3, [r7, #32]
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a6a6:	e016      	b.n	800a6d6 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a6ac:	e013      	b.n	800a6d6 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b6:	d00d      	beq.n	800a6d4 <xTaskGenericNotify+0xd4>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	617b      	str	r3, [r7, #20]
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	e7fd      	b.n	800a6cc <xTaskGenericNotify+0xcc>
					break;
 800a6d0:	bf00      	nop
 800a6d2:	e000      	b.n	800a6d6 <xTaskGenericNotify+0xd6>

					break;
 800a6d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a6d6:	7ffb      	ldrb	r3, [r7, #31]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d13a      	bne.n	800a752 <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fc8c 	bl	8008ffe <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	409a      	lsls	r2, r3
 800a6ee:	4b1c      	ldr	r3, [pc, #112]	@ (800a760 <xTaskGenericNotify+0x160>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	4a1a      	ldr	r2, [pc, #104]	@ (800a760 <xTaskGenericNotify+0x160>)
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4a17      	ldr	r2, [pc, #92]	@ (800a764 <xTaskGenericNotify+0x164>)
 800a706:	441a      	add	r2, r3
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fe fc1a 	bl	8008f48 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00b      	beq.n	800a734 <xTaskGenericNotify+0x134>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	613b      	str	r3, [r7, #16]
}
 800a72e:	bf00      	nop
 800a730:	bf00      	nop
 800a732:	e7fd      	b.n	800a730 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a738:	4b0b      	ldr	r3, [pc, #44]	@ (800a768 <xTaskGenericNotify+0x168>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73e:	429a      	cmp	r2, r3
 800a740:	d907      	bls.n	800a752 <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a742:	4b0a      	ldr	r3, [pc, #40]	@ (800a76c <xTaskGenericNotify+0x16c>)
 800a744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a752:	f000 f993 	bl	800aa7c <vPortExitCritical>

		return xReturn;
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a758:	4618      	mov	r0, r3
 800a75a:	3728      	adds	r7, #40	@ 0x28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20000bf8 	.word	0x20000bf8
 800a764:	20000af4 	.word	0x20000af4
 800a768:	20000af0 	.word	0x20000af0
 800a76c:	e000ed04 	.word	0xe000ed04

0800a770 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a77a:	4b29      	ldr	r3, [pc, #164]	@ (800a820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a780:	4b28      	ldr	r3, [pc, #160]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3304      	adds	r3, #4
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fc39 	bl	8008ffe <uxListRemove>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10b      	bne.n	800a7aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a792:	4b24      	ldr	r3, [pc, #144]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a798:	2201      	movs	r2, #1
 800a79a:	fa02 f303 	lsl.w	r3, r2, r3
 800a79e:	43da      	mvns	r2, r3
 800a7a0:	4b21      	ldr	r3, [pc, #132]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	4a20      	ldr	r2, [pc, #128]	@ (800a828 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a7a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b0:	d10a      	bne.n	800a7c8 <prvAddCurrentTaskToDelayedList+0x58>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d007      	beq.n	800a7c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4619      	mov	r1, r3
 800a7c0:	481a      	ldr	r0, [pc, #104]	@ (800a82c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a7c2:	f7fe fbc1 	bl	8008f48 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7c6:	e026      	b.n	800a816 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7d0:	4b14      	ldr	r3, [pc, #80]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d209      	bcs.n	800a7f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7e0:	4b13      	ldr	r3, [pc, #76]	@ (800a830 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	f7fe fbce 	bl	8008f8e <vListInsert>
}
 800a7f2:	e010      	b.n	800a816 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a834 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a824 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4619      	mov	r1, r3
 800a800:	4610      	mov	r0, r2
 800a802:	f7fe fbc4 	bl	8008f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a806:	4b0c      	ldr	r3, [pc, #48]	@ (800a838 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d202      	bcs.n	800a816 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a810:	4a09      	ldr	r2, [pc, #36]	@ (800a838 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6013      	str	r3, [r2, #0]
}
 800a816:	bf00      	nop
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20000bf4 	.word	0x20000bf4
 800a824:	20000af0 	.word	0x20000af0
 800a828:	20000bf8 	.word	0x20000bf8
 800a82c:	20000bdc 	.word	0x20000bdc
 800a830:	20000bac 	.word	0x20000bac
 800a834:	20000ba8 	.word	0x20000ba8
 800a838:	20000c10 	.word	0x20000c10

0800a83c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3b04      	subs	r3, #4
 800a84c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3b04      	subs	r3, #4
 800a85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f023 0201 	bic.w	r2, r3, #1
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3b04      	subs	r3, #4
 800a86a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a86c:	4a08      	ldr	r2, [pc, #32]	@ (800a890 <pxPortInitialiseStack+0x54>)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b14      	subs	r3, #20
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b20      	subs	r3, #32
 800a882:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a884:	68fb      	ldr	r3, [r7, #12]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bc80      	pop	{r7}
 800a88e:	4770      	bx	lr
 800a890:	0800a895 	.word	0x0800a895

0800a894 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a89e:	4b12      	ldr	r3, [pc, #72]	@ (800a8e8 <prvTaskExitError+0x54>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d00b      	beq.n	800a8c0 <prvTaskExitError+0x2c>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	60fb      	str	r3, [r7, #12]
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	e7fd      	b.n	800a8bc <prvTaskExitError+0x28>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60bb      	str	r3, [r7, #8]
}
 800a8d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8d4:	bf00      	nop
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d0fc      	beq.n	800a8d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bc80      	pop	{r7}
 800a8e6:	4770      	bx	lr
 800a8e8:	20000068 	.word	0x20000068
 800a8ec:	00000000 	.word	0x00000000

0800a8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8f0:	4b07      	ldr	r3, [pc, #28]	@ (800a910 <pxCurrentTCBConst2>)
 800a8f2:	6819      	ldr	r1, [r3, #0]
 800a8f4:	6808      	ldr	r0, [r1, #0]
 800a8f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8fa:	f380 8809 	msr	PSP, r0
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	f380 8811 	msr	BASEPRI, r0
 800a90a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a90e:	4770      	bx	lr

0800a910 <pxCurrentTCBConst2>:
 800a910:	20000af0 	.word	0x20000af0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop

0800a918 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a918:	4806      	ldr	r0, [pc, #24]	@ (800a934 <prvPortStartFirstTask+0x1c>)
 800a91a:	6800      	ldr	r0, [r0, #0]
 800a91c:	6800      	ldr	r0, [r0, #0]
 800a91e:	f380 8808 	msr	MSP, r0
 800a922:	b662      	cpsie	i
 800a924:	b661      	cpsie	f
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	df00      	svc	0
 800a930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a932:	bf00      	nop
 800a934:	e000ed08 	.word	0xe000ed08

0800a938 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a93e:	4b32      	ldr	r3, [pc, #200]	@ (800aa08 <xPortStartScheduler+0xd0>)
 800a940:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	b2db      	uxtb	r3, r3
 800a948:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	22ff      	movs	r2, #255	@ 0xff
 800a94e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	b2db      	uxtb	r3, r3
 800a956:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a960:	b2da      	uxtb	r2, r3
 800a962:	4b2a      	ldr	r3, [pc, #168]	@ (800aa0c <xPortStartScheduler+0xd4>)
 800a964:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a966:	4b2a      	ldr	r3, [pc, #168]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a968:	2207      	movs	r2, #7
 800a96a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a96c:	e009      	b.n	800a982 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a96e:	4b28      	ldr	r3, [pc, #160]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3b01      	subs	r3, #1
 800a974:	4a26      	ldr	r2, [pc, #152]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a976:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a978:	78fb      	ldrb	r3, [r7, #3]
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	b2db      	uxtb	r3, r3
 800a986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a98a:	2b80      	cmp	r3, #128	@ 0x80
 800a98c:	d0ef      	beq.n	800a96e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a98e:	4b20      	ldr	r3, [pc, #128]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f1c3 0307 	rsb	r3, r3, #7
 800a996:	2b04      	cmp	r3, #4
 800a998:	d00b      	beq.n	800a9b2 <xPortStartScheduler+0x7a>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	60bb      	str	r3, [r7, #8]
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	e7fd      	b.n	800a9ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9b2:	4b17      	ldr	r3, [pc, #92]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	4a15      	ldr	r2, [pc, #84]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a9ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9bc:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a9c4:	4a12      	ldr	r2, [pc, #72]	@ (800aa10 <xPortStartScheduler+0xd8>)
 800a9c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9d0:	4b10      	ldr	r3, [pc, #64]	@ (800aa14 <xPortStartScheduler+0xdc>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a0f      	ldr	r2, [pc, #60]	@ (800aa14 <xPortStartScheduler+0xdc>)
 800a9d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a9da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9dc:	4b0d      	ldr	r3, [pc, #52]	@ (800aa14 <xPortStartScheduler+0xdc>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a0c      	ldr	r2, [pc, #48]	@ (800aa14 <xPortStartScheduler+0xdc>)
 800a9e2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a9e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9e8:	f000 f8b8 	bl	800ab5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800aa18 <xPortStartScheduler+0xe0>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9f2:	f7ff ff91 	bl	800a918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9f6:	f7ff fa79 	bl	8009eec <vTaskSwitchContext>
	prvTaskExitError();
 800a9fa:	f7ff ff4b 	bl	800a894 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	e000e400 	.word	0xe000e400
 800aa0c:	20000c1c 	.word	0x20000c1c
 800aa10:	20000c20 	.word	0x20000c20
 800aa14:	e000ed20 	.word	0xe000ed20
 800aa18:	20000068 	.word	0x20000068

0800aa1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	607b      	str	r3, [r7, #4]
}
 800aa34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa36:	4b0f      	ldr	r3, [pc, #60]	@ (800aa74 <vPortEnterCritical+0x58>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	4a0d      	ldr	r2, [pc, #52]	@ (800aa74 <vPortEnterCritical+0x58>)
 800aa3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa40:	4b0c      	ldr	r3, [pc, #48]	@ (800aa74 <vPortEnterCritical+0x58>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d110      	bne.n	800aa6a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa48:	4b0b      	ldr	r3, [pc, #44]	@ (800aa78 <vPortEnterCritical+0x5c>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00b      	beq.n	800aa6a <vPortEnterCritical+0x4e>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	603b      	str	r3, [r7, #0]
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	e7fd      	b.n	800aa66 <vPortEnterCritical+0x4a>
	}
}
 800aa6a:	bf00      	nop
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bc80      	pop	{r7}
 800aa72:	4770      	bx	lr
 800aa74:	20000068 	.word	0x20000068
 800aa78:	e000ed04 	.word	0xe000ed04

0800aa7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa82:	4b12      	ldr	r3, [pc, #72]	@ (800aacc <vPortExitCritical+0x50>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10b      	bne.n	800aaa2 <vPortExitCritical+0x26>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	607b      	str	r3, [r7, #4]
}
 800aa9c:	bf00      	nop
 800aa9e:	bf00      	nop
 800aaa0:	e7fd      	b.n	800aa9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aaa2:	4b0a      	ldr	r3, [pc, #40]	@ (800aacc <vPortExitCritical+0x50>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	4a08      	ldr	r2, [pc, #32]	@ (800aacc <vPortExitCritical+0x50>)
 800aaaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aaac:	4b07      	ldr	r3, [pc, #28]	@ (800aacc <vPortExitCritical+0x50>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <vPortExitCritical+0x44>
 800aab4:	2300      	movs	r3, #0
 800aab6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aabe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bc80      	pop	{r7}
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000068 	.word	0x20000068

0800aad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aad0:	f3ef 8009 	mrs	r0, PSP
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab10 <pxCurrentTCBConst>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aae0:	6010      	str	r0, [r2, #0]
 800aae2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800aae6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aaea:	f380 8811 	msr	BASEPRI, r0
 800aaee:	f7ff f9fd 	bl	8009eec <vTaskSwitchContext>
 800aaf2:	f04f 0000 	mov.w	r0, #0
 800aaf6:	f380 8811 	msr	BASEPRI, r0
 800aafa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aafe:	6819      	ldr	r1, [r3, #0]
 800ab00:	6808      	ldr	r0, [r1, #0]
 800ab02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ab06:	f380 8809 	msr	PSP, r0
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	4770      	bx	lr

0800ab10 <pxCurrentTCBConst>:
 800ab10:	20000af0 	.word	0x20000af0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab14:	bf00      	nop
 800ab16:	bf00      	nop

0800ab18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab32:	f7ff f921 	bl	8009d78 <xTaskIncrementTick>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d003      	beq.n	800ab44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab3c:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <SysTick_Handler+0x40>)
 800ab3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	2300      	movs	r3, #0
 800ab46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	f383 8811 	msr	BASEPRI, r3
}
 800ab4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab50:	bf00      	nop
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab60:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <vPortSetupTimerInterrupt+0x30>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab66:	4b0a      	ldr	r3, [pc, #40]	@ (800ab90 <vPortSetupTimerInterrupt+0x34>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab6c:	4b09      	ldr	r3, [pc, #36]	@ (800ab94 <vPortSetupTimerInterrupt+0x38>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a09      	ldr	r2, [pc, #36]	@ (800ab98 <vPortSetupTimerInterrupt+0x3c>)
 800ab72:	fba2 2303 	umull	r2, r3, r2, r3
 800ab76:	099b      	lsrs	r3, r3, #6
 800ab78:	4a08      	ldr	r2, [pc, #32]	@ (800ab9c <vPortSetupTimerInterrupt+0x40>)
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab7e:	4b03      	ldr	r3, [pc, #12]	@ (800ab8c <vPortSetupTimerInterrupt+0x30>)
 800ab80:	2207      	movs	r2, #7
 800ab82:	601a      	str	r2, [r3, #0]
}
 800ab84:	bf00      	nop
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bc80      	pop	{r7}
 800ab8a:	4770      	bx	lr
 800ab8c:	e000e010 	.word	0xe000e010
 800ab90:	e000e018 	.word	0xe000e018
 800ab94:	2000005c 	.word	0x2000005c
 800ab98:	10624dd3 	.word	0x10624dd3
 800ab9c:	e000e014 	.word	0xe000e014

0800aba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08a      	sub	sp, #40	@ 0x28
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abac:	f7ff f838 	bl	8009c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abb0:	4b5c      	ldr	r3, [pc, #368]	@ (800ad24 <pvPortMalloc+0x184>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abb8:	f000 f924 	bl	800ae04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abbc:	4b5a      	ldr	r3, [pc, #360]	@ (800ad28 <pvPortMalloc+0x188>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4013      	ands	r3, r2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f040 8095 	bne.w	800acf4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d01e      	beq.n	800ac0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800abd0:	2208      	movs	r2, #8
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4413      	add	r3, r2
 800abd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f003 0307 	and.w	r3, r3, #7
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d015      	beq.n	800ac0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f023 0307 	bic.w	r3, r3, #7
 800abe8:	3308      	adds	r3, #8
 800abea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f003 0307 	and.w	r3, r3, #7
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00b      	beq.n	800ac0e <pvPortMalloc+0x6e>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	617b      	str	r3, [r7, #20]
}
 800ac08:	bf00      	nop
 800ac0a:	bf00      	nop
 800ac0c:	e7fd      	b.n	800ac0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d06f      	beq.n	800acf4 <pvPortMalloc+0x154>
 800ac14:	4b45      	ldr	r3, [pc, #276]	@ (800ad2c <pvPortMalloc+0x18c>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d86a      	bhi.n	800acf4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac1e:	4b44      	ldr	r3, [pc, #272]	@ (800ad30 <pvPortMalloc+0x190>)
 800ac20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac22:	4b43      	ldr	r3, [pc, #268]	@ (800ad30 <pvPortMalloc+0x190>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac28:	e004      	b.n	800ac34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d903      	bls.n	800ac46 <pvPortMalloc+0xa6>
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1f1      	bne.n	800ac2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac46:	4b37      	ldr	r3, [pc, #220]	@ (800ad24 <pvPortMalloc+0x184>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d051      	beq.n	800acf4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2208      	movs	r2, #8
 800ac56:	4413      	add	r3, r2
 800ac58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1ad2      	subs	r2, r2, r3
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d920      	bls.n	800acb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4413      	add	r3, r2
 800ac78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00b      	beq.n	800ac9c <pvPortMalloc+0xfc>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	613b      	str	r3, [r7, #16]
}
 800ac96:	bf00      	nop
 800ac98:	bf00      	nop
 800ac9a:	e7fd      	b.n	800ac98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	1ad2      	subs	r2, r2, r3
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acae:	69b8      	ldr	r0, [r7, #24]
 800acb0:	f000 f90a 	bl	800aec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acb4:	4b1d      	ldr	r3, [pc, #116]	@ (800ad2c <pvPortMalloc+0x18c>)
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	4a1b      	ldr	r2, [pc, #108]	@ (800ad2c <pvPortMalloc+0x18c>)
 800acc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ad2c <pvPortMalloc+0x18c>)
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	4b1b      	ldr	r3, [pc, #108]	@ (800ad34 <pvPortMalloc+0x194>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d203      	bcs.n	800acd6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acce:	4b17      	ldr	r3, [pc, #92]	@ (800ad2c <pvPortMalloc+0x18c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a18      	ldr	r2, [pc, #96]	@ (800ad34 <pvPortMalloc+0x194>)
 800acd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	4b13      	ldr	r3, [pc, #76]	@ (800ad28 <pvPortMalloc+0x188>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	431a      	orrs	r2, r3
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acea:	4b13      	ldr	r3, [pc, #76]	@ (800ad38 <pvPortMalloc+0x198>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3301      	adds	r3, #1
 800acf0:	4a11      	ldr	r2, [pc, #68]	@ (800ad38 <pvPortMalloc+0x198>)
 800acf2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acf4:	f7fe ffa2 	bl	8009c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	f003 0307 	and.w	r3, r3, #7
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00b      	beq.n	800ad1a <pvPortMalloc+0x17a>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	60fb      	str	r3, [r7, #12]
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop
 800ad18:	e7fd      	b.n	800ad16 <pvPortMalloc+0x176>
	return pvReturn;
 800ad1a:	69fb      	ldr	r3, [r7, #28]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3728      	adds	r7, #40	@ 0x28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	20005c2c 	.word	0x20005c2c
 800ad28:	20005c40 	.word	0x20005c40
 800ad2c:	20005c30 	.word	0x20005c30
 800ad30:	20005c24 	.word	0x20005c24
 800ad34:	20005c34 	.word	0x20005c34
 800ad38:	20005c38 	.word	0x20005c38

0800ad3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d04f      	beq.n	800adee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad4e:	2308      	movs	r3, #8
 800ad50:	425b      	negs	r3, r3
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	4413      	add	r3, r2
 800ad56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	4b25      	ldr	r3, [pc, #148]	@ (800adf8 <vPortFree+0xbc>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4013      	ands	r3, r2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10b      	bne.n	800ad82 <vPortFree+0x46>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	60fb      	str	r3, [r7, #12]
}
 800ad7c:	bf00      	nop
 800ad7e:	bf00      	nop
 800ad80:	e7fd      	b.n	800ad7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00b      	beq.n	800ada2 <vPortFree+0x66>
	__asm volatile
 800ad8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8e:	f383 8811 	msr	BASEPRI, r3
 800ad92:	f3bf 8f6f 	isb	sy
 800ad96:	f3bf 8f4f 	dsb	sy
 800ad9a:	60bb      	str	r3, [r7, #8]
}
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
 800ada0:	e7fd      	b.n	800ad9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	4b14      	ldr	r3, [pc, #80]	@ (800adf8 <vPortFree+0xbc>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4013      	ands	r3, r2
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01e      	beq.n	800adee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d11a      	bne.n	800adee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4b0e      	ldr	r3, [pc, #56]	@ (800adf8 <vPortFree+0xbc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	43db      	mvns	r3, r3
 800adc2:	401a      	ands	r2, r3
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adc8:	f7fe ff2a 	bl	8009c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	4b0a      	ldr	r3, [pc, #40]	@ (800adfc <vPortFree+0xc0>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4413      	add	r3, r2
 800add6:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <vPortFree+0xc0>)
 800add8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adda:	6938      	ldr	r0, [r7, #16]
 800addc:	f000 f874 	bl	800aec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ade0:	4b07      	ldr	r3, [pc, #28]	@ (800ae00 <vPortFree+0xc4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	4a06      	ldr	r2, [pc, #24]	@ (800ae00 <vPortFree+0xc4>)
 800ade8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adea:	f7fe ff27 	bl	8009c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adee:	bf00      	nop
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20005c40 	.word	0x20005c40
 800adfc:	20005c30 	.word	0x20005c30
 800ae00:	20005c3c 	.word	0x20005c3c

0800ae04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae0a:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800ae0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae10:	4b27      	ldr	r3, [pc, #156]	@ (800aeb0 <prvHeapInit+0xac>)
 800ae12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00c      	beq.n	800ae38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3307      	adds	r3, #7
 800ae22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0307 	bic.w	r3, r3, #7
 800ae2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	4a1f      	ldr	r2, [pc, #124]	@ (800aeb0 <prvHeapInit+0xac>)
 800ae34:	4413      	add	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae3c:	4a1d      	ldr	r2, [pc, #116]	@ (800aeb4 <prvHeapInit+0xb0>)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae42:	4b1c      	ldr	r3, [pc, #112]	@ (800aeb4 <prvHeapInit+0xb0>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae50:	2208      	movs	r2, #8
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	1a9b      	subs	r3, r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0307 	bic.w	r3, r3, #7
 800ae5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4a15      	ldr	r2, [pc, #84]	@ (800aeb8 <prvHeapInit+0xb4>)
 800ae64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae66:	4b14      	ldr	r3, [pc, #80]	@ (800aeb8 <prvHeapInit+0xb4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae6e:	4b12      	ldr	r3, [pc, #72]	@ (800aeb8 <prvHeapInit+0xb4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae84:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb8 <prvHeapInit+0xb4>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	4a0a      	ldr	r2, [pc, #40]	@ (800aebc <prvHeapInit+0xb8>)
 800ae92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	4a09      	ldr	r2, [pc, #36]	@ (800aec0 <prvHeapInit+0xbc>)
 800ae9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae9c:	4b09      	ldr	r3, [pc, #36]	@ (800aec4 <prvHeapInit+0xc0>)
 800ae9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aea2:	601a      	str	r2, [r3, #0]
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bc80      	pop	{r7}
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	20000c24 	.word	0x20000c24
 800aeb4:	20005c24 	.word	0x20005c24
 800aeb8:	20005c2c 	.word	0x20005c2c
 800aebc:	20005c34 	.word	0x20005c34
 800aec0:	20005c30 	.word	0x20005c30
 800aec4:	20005c40 	.word	0x20005c40

0800aec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aed0:	4b27      	ldr	r3, [pc, #156]	@ (800af70 <prvInsertBlockIntoFreeList+0xa8>)
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e002      	b.n	800aedc <prvInsertBlockIntoFreeList+0x14>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d8f7      	bhi.n	800aed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d108      	bne.n	800af0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	685a      	ldr	r2, [r3, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	441a      	add	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	441a      	add	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d118      	bne.n	800af50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4b14      	ldr	r3, [pc, #80]	@ (800af74 <prvInsertBlockIntoFreeList+0xac>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d00d      	beq.n	800af46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	441a      	add	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]
 800af44:	e008      	b.n	800af58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af46:	4b0b      	ldr	r3, [pc, #44]	@ (800af74 <prvInsertBlockIntoFreeList+0xac>)
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	e003      	b.n	800af58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d002      	beq.n	800af66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bc80      	pop	{r7}
 800af6e:	4770      	bx	lr
 800af70:	20005c24 	.word	0x20005c24
 800af74:	20005c2c 	.word	0x20005c2c

0800af78 <__cvt>:
 800af78:	2b00      	cmp	r3, #0
 800af7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af7e:	461d      	mov	r5, r3
 800af80:	bfbb      	ittet	lt
 800af82:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800af86:	461d      	movlt	r5, r3
 800af88:	2300      	movge	r3, #0
 800af8a:	232d      	movlt	r3, #45	@ 0x2d
 800af8c:	b088      	sub	sp, #32
 800af8e:	4614      	mov	r4, r2
 800af90:	bfb8      	it	lt
 800af92:	4614      	movlt	r4, r2
 800af94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af96:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800af98:	7013      	strb	r3, [r2, #0]
 800af9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800afa0:	f023 0820 	bic.w	r8, r3, #32
 800afa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afa8:	d005      	beq.n	800afb6 <__cvt+0x3e>
 800afaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800afae:	d100      	bne.n	800afb2 <__cvt+0x3a>
 800afb0:	3601      	adds	r6, #1
 800afb2:	2302      	movs	r3, #2
 800afb4:	e000      	b.n	800afb8 <__cvt+0x40>
 800afb6:	2303      	movs	r3, #3
 800afb8:	aa07      	add	r2, sp, #28
 800afba:	9204      	str	r2, [sp, #16]
 800afbc:	aa06      	add	r2, sp, #24
 800afbe:	e9cd a202 	strd	sl, r2, [sp, #8]
 800afc2:	e9cd 3600 	strd	r3, r6, [sp]
 800afc6:	4622      	mov	r2, r4
 800afc8:	462b      	mov	r3, r5
 800afca:	f000 fe7d 	bl	800bcc8 <_dtoa_r>
 800afce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800afd2:	4607      	mov	r7, r0
 800afd4:	d119      	bne.n	800b00a <__cvt+0x92>
 800afd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afd8:	07db      	lsls	r3, r3, #31
 800afda:	d50e      	bpl.n	800affa <__cvt+0x82>
 800afdc:	eb00 0906 	add.w	r9, r0, r6
 800afe0:	2200      	movs	r2, #0
 800afe2:	2300      	movs	r3, #0
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	f7f5 fd4e 	bl	8000a88 <__aeabi_dcmpeq>
 800afec:	b108      	cbz	r0, 800aff2 <__cvt+0x7a>
 800afee:	f8cd 901c 	str.w	r9, [sp, #28]
 800aff2:	2230      	movs	r2, #48	@ 0x30
 800aff4:	9b07      	ldr	r3, [sp, #28]
 800aff6:	454b      	cmp	r3, r9
 800aff8:	d31e      	bcc.n	800b038 <__cvt+0xc0>
 800affa:	4638      	mov	r0, r7
 800affc:	9b07      	ldr	r3, [sp, #28]
 800affe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b000:	1bdb      	subs	r3, r3, r7
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	b008      	add	sp, #32
 800b006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b00e:	eb00 0906 	add.w	r9, r0, r6
 800b012:	d1e5      	bne.n	800afe0 <__cvt+0x68>
 800b014:	7803      	ldrb	r3, [r0, #0]
 800b016:	2b30      	cmp	r3, #48	@ 0x30
 800b018:	d10a      	bne.n	800b030 <__cvt+0xb8>
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 fd31 	bl	8000a88 <__aeabi_dcmpeq>
 800b026:	b918      	cbnz	r0, 800b030 <__cvt+0xb8>
 800b028:	f1c6 0601 	rsb	r6, r6, #1
 800b02c:	f8ca 6000 	str.w	r6, [sl]
 800b030:	f8da 3000 	ldr.w	r3, [sl]
 800b034:	4499      	add	r9, r3
 800b036:	e7d3      	b.n	800afe0 <__cvt+0x68>
 800b038:	1c59      	adds	r1, r3, #1
 800b03a:	9107      	str	r1, [sp, #28]
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	e7d9      	b.n	800aff4 <__cvt+0x7c>

0800b040 <__exponent>:
 800b040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b042:	2900      	cmp	r1, #0
 800b044:	bfb6      	itet	lt
 800b046:	232d      	movlt	r3, #45	@ 0x2d
 800b048:	232b      	movge	r3, #43	@ 0x2b
 800b04a:	4249      	neglt	r1, r1
 800b04c:	2909      	cmp	r1, #9
 800b04e:	7002      	strb	r2, [r0, #0]
 800b050:	7043      	strb	r3, [r0, #1]
 800b052:	dd29      	ble.n	800b0a8 <__exponent+0x68>
 800b054:	f10d 0307 	add.w	r3, sp, #7
 800b058:	461d      	mov	r5, r3
 800b05a:	270a      	movs	r7, #10
 800b05c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b060:	461a      	mov	r2, r3
 800b062:	fb07 1416 	mls	r4, r7, r6, r1
 800b066:	3430      	adds	r4, #48	@ 0x30
 800b068:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b06c:	460c      	mov	r4, r1
 800b06e:	2c63      	cmp	r4, #99	@ 0x63
 800b070:	4631      	mov	r1, r6
 800b072:	f103 33ff 	add.w	r3, r3, #4294967295
 800b076:	dcf1      	bgt.n	800b05c <__exponent+0x1c>
 800b078:	3130      	adds	r1, #48	@ 0x30
 800b07a:	1e94      	subs	r4, r2, #2
 800b07c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b080:	4623      	mov	r3, r4
 800b082:	1c41      	adds	r1, r0, #1
 800b084:	42ab      	cmp	r3, r5
 800b086:	d30a      	bcc.n	800b09e <__exponent+0x5e>
 800b088:	f10d 0309 	add.w	r3, sp, #9
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	42ac      	cmp	r4, r5
 800b090:	bf88      	it	hi
 800b092:	2300      	movhi	r3, #0
 800b094:	3302      	adds	r3, #2
 800b096:	4403      	add	r3, r0
 800b098:	1a18      	subs	r0, r3, r0
 800b09a:	b003      	add	sp, #12
 800b09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b09e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b0a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0a6:	e7ed      	b.n	800b084 <__exponent+0x44>
 800b0a8:	2330      	movs	r3, #48	@ 0x30
 800b0aa:	3130      	adds	r1, #48	@ 0x30
 800b0ac:	7083      	strb	r3, [r0, #2]
 800b0ae:	70c1      	strb	r1, [r0, #3]
 800b0b0:	1d03      	adds	r3, r0, #4
 800b0b2:	e7f1      	b.n	800b098 <__exponent+0x58>

0800b0b4 <_printf_float>:
 800b0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b8:	b091      	sub	sp, #68	@ 0x44
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	461f      	mov	r7, r3
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	f000 fce1 	bl	800ba8c <_localeconv_r>
 800b0ca:	6803      	ldr	r3, [r0, #0]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	9308      	str	r3, [sp, #32]
 800b0d0:	f7f5 f8ae 	bl	8000230 <strlen>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	930e      	str	r3, [sp, #56]	@ 0x38
 800b0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b0dc:	9009      	str	r0, [sp, #36]	@ 0x24
 800b0de:	3307      	adds	r3, #7
 800b0e0:	f023 0307 	bic.w	r3, r3, #7
 800b0e4:	f103 0208 	add.w	r2, r3, #8
 800b0e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b0ec:	f8d4 b000 	ldr.w	fp, [r4]
 800b0f0:	f8c8 2000 	str.w	r2, [r8]
 800b0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b0fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0fe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b102:	f04f 32ff 	mov.w	r2, #4294967295
 800b106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b10a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b10e:	4b9c      	ldr	r3, [pc, #624]	@ (800b380 <_printf_float+0x2cc>)
 800b110:	f7f5 fcec 	bl	8000aec <__aeabi_dcmpun>
 800b114:	bb70      	cbnz	r0, 800b174 <_printf_float+0xc0>
 800b116:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b11a:	f04f 32ff 	mov.w	r2, #4294967295
 800b11e:	4b98      	ldr	r3, [pc, #608]	@ (800b380 <_printf_float+0x2cc>)
 800b120:	f7f5 fcc6 	bl	8000ab0 <__aeabi_dcmple>
 800b124:	bb30      	cbnz	r0, 800b174 <_printf_float+0xc0>
 800b126:	2200      	movs	r2, #0
 800b128:	2300      	movs	r3, #0
 800b12a:	4640      	mov	r0, r8
 800b12c:	4649      	mov	r1, r9
 800b12e:	f7f5 fcb5 	bl	8000a9c <__aeabi_dcmplt>
 800b132:	b110      	cbz	r0, 800b13a <_printf_float+0x86>
 800b134:	232d      	movs	r3, #45	@ 0x2d
 800b136:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b13a:	4a92      	ldr	r2, [pc, #584]	@ (800b384 <_printf_float+0x2d0>)
 800b13c:	4b92      	ldr	r3, [pc, #584]	@ (800b388 <_printf_float+0x2d4>)
 800b13e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b142:	bf94      	ite	ls
 800b144:	4690      	movls	r8, r2
 800b146:	4698      	movhi	r8, r3
 800b148:	2303      	movs	r3, #3
 800b14a:	f04f 0900 	mov.w	r9, #0
 800b14e:	6123      	str	r3, [r4, #16]
 800b150:	f02b 0304 	bic.w	r3, fp, #4
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	4633      	mov	r3, r6
 800b158:	4621      	mov	r1, r4
 800b15a:	4628      	mov	r0, r5
 800b15c:	9700      	str	r7, [sp, #0]
 800b15e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b160:	f000 f9d4 	bl	800b50c <_printf_common>
 800b164:	3001      	adds	r0, #1
 800b166:	f040 8090 	bne.w	800b28a <_printf_float+0x1d6>
 800b16a:	f04f 30ff 	mov.w	r0, #4294967295
 800b16e:	b011      	add	sp, #68	@ 0x44
 800b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b174:	4642      	mov	r2, r8
 800b176:	464b      	mov	r3, r9
 800b178:	4640      	mov	r0, r8
 800b17a:	4649      	mov	r1, r9
 800b17c:	f7f5 fcb6 	bl	8000aec <__aeabi_dcmpun>
 800b180:	b148      	cbz	r0, 800b196 <_printf_float+0xe2>
 800b182:	464b      	mov	r3, r9
 800b184:	2b00      	cmp	r3, #0
 800b186:	bfb8      	it	lt
 800b188:	232d      	movlt	r3, #45	@ 0x2d
 800b18a:	4a80      	ldr	r2, [pc, #512]	@ (800b38c <_printf_float+0x2d8>)
 800b18c:	bfb8      	it	lt
 800b18e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b192:	4b7f      	ldr	r3, [pc, #508]	@ (800b390 <_printf_float+0x2dc>)
 800b194:	e7d3      	b.n	800b13e <_printf_float+0x8a>
 800b196:	6863      	ldr	r3, [r4, #4]
 800b198:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	d13f      	bne.n	800b220 <_printf_float+0x16c>
 800b1a0:	2306      	movs	r3, #6
 800b1a2:	6063      	str	r3, [r4, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	9206      	str	r2, [sp, #24]
 800b1ae:	aa0e      	add	r2, sp, #56	@ 0x38
 800b1b0:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b1b4:	aa0d      	add	r2, sp, #52	@ 0x34
 800b1b6:	9203      	str	r2, [sp, #12]
 800b1b8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b1bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	4642      	mov	r2, r8
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	464b      	mov	r3, r9
 800b1ca:	910a      	str	r1, [sp, #40]	@ 0x28
 800b1cc:	f7ff fed4 	bl	800af78 <__cvt>
 800b1d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1d2:	4680      	mov	r8, r0
 800b1d4:	2947      	cmp	r1, #71	@ 0x47
 800b1d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b1d8:	d128      	bne.n	800b22c <_printf_float+0x178>
 800b1da:	1cc8      	adds	r0, r1, #3
 800b1dc:	db02      	blt.n	800b1e4 <_printf_float+0x130>
 800b1de:	6863      	ldr	r3, [r4, #4]
 800b1e0:	4299      	cmp	r1, r3
 800b1e2:	dd40      	ble.n	800b266 <_printf_float+0x1b2>
 800b1e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1e8:	fa5f fa8a 	uxtb.w	sl, sl
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	3901      	subs	r1, #1
 800b1f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b1f4:	910d      	str	r1, [sp, #52]	@ 0x34
 800b1f6:	f7ff ff23 	bl	800b040 <__exponent>
 800b1fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1fc:	4681      	mov	r9, r0
 800b1fe:	1813      	adds	r3, r2, r0
 800b200:	2a01      	cmp	r2, #1
 800b202:	6123      	str	r3, [r4, #16]
 800b204:	dc02      	bgt.n	800b20c <_printf_float+0x158>
 800b206:	6822      	ldr	r2, [r4, #0]
 800b208:	07d2      	lsls	r2, r2, #31
 800b20a:	d501      	bpl.n	800b210 <_printf_float+0x15c>
 800b20c:	3301      	adds	r3, #1
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b214:	2b00      	cmp	r3, #0
 800b216:	d09e      	beq.n	800b156 <_printf_float+0xa2>
 800b218:	232d      	movs	r3, #45	@ 0x2d
 800b21a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b21e:	e79a      	b.n	800b156 <_printf_float+0xa2>
 800b220:	2947      	cmp	r1, #71	@ 0x47
 800b222:	d1bf      	bne.n	800b1a4 <_printf_float+0xf0>
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1bd      	bne.n	800b1a4 <_printf_float+0xf0>
 800b228:	2301      	movs	r3, #1
 800b22a:	e7ba      	b.n	800b1a2 <_printf_float+0xee>
 800b22c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b230:	d9dc      	bls.n	800b1ec <_printf_float+0x138>
 800b232:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b236:	d118      	bne.n	800b26a <_printf_float+0x1b6>
 800b238:	2900      	cmp	r1, #0
 800b23a:	6863      	ldr	r3, [r4, #4]
 800b23c:	dd0b      	ble.n	800b256 <_printf_float+0x1a2>
 800b23e:	6121      	str	r1, [r4, #16]
 800b240:	b913      	cbnz	r3, 800b248 <_printf_float+0x194>
 800b242:	6822      	ldr	r2, [r4, #0]
 800b244:	07d0      	lsls	r0, r2, #31
 800b246:	d502      	bpl.n	800b24e <_printf_float+0x19a>
 800b248:	3301      	adds	r3, #1
 800b24a:	440b      	add	r3, r1
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	f04f 0900 	mov.w	r9, #0
 800b252:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b254:	e7dc      	b.n	800b210 <_printf_float+0x15c>
 800b256:	b913      	cbnz	r3, 800b25e <_printf_float+0x1aa>
 800b258:	6822      	ldr	r2, [r4, #0]
 800b25a:	07d2      	lsls	r2, r2, #31
 800b25c:	d501      	bpl.n	800b262 <_printf_float+0x1ae>
 800b25e:	3302      	adds	r3, #2
 800b260:	e7f4      	b.n	800b24c <_printf_float+0x198>
 800b262:	2301      	movs	r3, #1
 800b264:	e7f2      	b.n	800b24c <_printf_float+0x198>
 800b266:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b26a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b26c:	4299      	cmp	r1, r3
 800b26e:	db05      	blt.n	800b27c <_printf_float+0x1c8>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	6121      	str	r1, [r4, #16]
 800b274:	07d8      	lsls	r0, r3, #31
 800b276:	d5ea      	bpl.n	800b24e <_printf_float+0x19a>
 800b278:	1c4b      	adds	r3, r1, #1
 800b27a:	e7e7      	b.n	800b24c <_printf_float+0x198>
 800b27c:	2900      	cmp	r1, #0
 800b27e:	bfcc      	ite	gt
 800b280:	2201      	movgt	r2, #1
 800b282:	f1c1 0202 	rsble	r2, r1, #2
 800b286:	4413      	add	r3, r2
 800b288:	e7e0      	b.n	800b24c <_printf_float+0x198>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	055a      	lsls	r2, r3, #21
 800b28e:	d407      	bmi.n	800b2a0 <_printf_float+0x1ec>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	4642      	mov	r2, r8
 800b294:	4631      	mov	r1, r6
 800b296:	4628      	mov	r0, r5
 800b298:	47b8      	blx	r7
 800b29a:	3001      	adds	r0, #1
 800b29c:	d12b      	bne.n	800b2f6 <_printf_float+0x242>
 800b29e:	e764      	b.n	800b16a <_printf_float+0xb6>
 800b2a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2a4:	f240 80dc 	bls.w	800b460 <_printf_float+0x3ac>
 800b2a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f7f5 fbea 	bl	8000a88 <__aeabi_dcmpeq>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d033      	beq.n	800b320 <_printf_float+0x26c>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4628      	mov	r0, r5
 800b2be:	4a35      	ldr	r2, [pc, #212]	@ (800b394 <_printf_float+0x2e0>)
 800b2c0:	47b8      	blx	r7
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	f43f af51 	beq.w	800b16a <_printf_float+0xb6>
 800b2c8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b2cc:	4543      	cmp	r3, r8
 800b2ce:	db02      	blt.n	800b2d6 <_printf_float+0x222>
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	07d8      	lsls	r0, r3, #31
 800b2d4:	d50f      	bpl.n	800b2f6 <_printf_float+0x242>
 800b2d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b8      	blx	r7
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	f43f af42 	beq.w	800b16a <_printf_float+0xb6>
 800b2e6:	f04f 0900 	mov.w	r9, #0
 800b2ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2ee:	f104 0a1a 	add.w	sl, r4, #26
 800b2f2:	45c8      	cmp	r8, r9
 800b2f4:	dc09      	bgt.n	800b30a <_printf_float+0x256>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	079b      	lsls	r3, r3, #30
 800b2fa:	f100 8102 	bmi.w	800b502 <_printf_float+0x44e>
 800b2fe:	68e0      	ldr	r0, [r4, #12]
 800b300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b302:	4298      	cmp	r0, r3
 800b304:	bfb8      	it	lt
 800b306:	4618      	movlt	r0, r3
 800b308:	e731      	b.n	800b16e <_printf_float+0xba>
 800b30a:	2301      	movs	r3, #1
 800b30c:	4652      	mov	r2, sl
 800b30e:	4631      	mov	r1, r6
 800b310:	4628      	mov	r0, r5
 800b312:	47b8      	blx	r7
 800b314:	3001      	adds	r0, #1
 800b316:	f43f af28 	beq.w	800b16a <_printf_float+0xb6>
 800b31a:	f109 0901 	add.w	r9, r9, #1
 800b31e:	e7e8      	b.n	800b2f2 <_printf_float+0x23e>
 800b320:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b322:	2b00      	cmp	r3, #0
 800b324:	dc38      	bgt.n	800b398 <_printf_float+0x2e4>
 800b326:	2301      	movs	r3, #1
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	4a19      	ldr	r2, [pc, #100]	@ (800b394 <_printf_float+0x2e0>)
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	f43f af1a 	beq.w	800b16a <_printf_float+0xb6>
 800b336:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b33a:	ea59 0303 	orrs.w	r3, r9, r3
 800b33e:	d102      	bne.n	800b346 <_printf_float+0x292>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	07d9      	lsls	r1, r3, #31
 800b344:	d5d7      	bpl.n	800b2f6 <_printf_float+0x242>
 800b346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b34a:	4631      	mov	r1, r6
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b8      	blx	r7
 800b350:	3001      	adds	r0, #1
 800b352:	f43f af0a 	beq.w	800b16a <_printf_float+0xb6>
 800b356:	f04f 0a00 	mov.w	sl, #0
 800b35a:	f104 0b1a 	add.w	fp, r4, #26
 800b35e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b360:	425b      	negs	r3, r3
 800b362:	4553      	cmp	r3, sl
 800b364:	dc01      	bgt.n	800b36a <_printf_float+0x2b6>
 800b366:	464b      	mov	r3, r9
 800b368:	e793      	b.n	800b292 <_printf_float+0x1de>
 800b36a:	2301      	movs	r3, #1
 800b36c:	465a      	mov	r2, fp
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	f43f aef8 	beq.w	800b16a <_printf_float+0xb6>
 800b37a:	f10a 0a01 	add.w	sl, sl, #1
 800b37e:	e7ee      	b.n	800b35e <_printf_float+0x2aa>
 800b380:	7fefffff 	.word	0x7fefffff
 800b384:	0800e552 	.word	0x0800e552
 800b388:	0800e556 	.word	0x0800e556
 800b38c:	0800e55a 	.word	0x0800e55a
 800b390:	0800e55e 	.word	0x0800e55e
 800b394:	0800e562 	.word	0x0800e562
 800b398:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b39a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b39e:	4553      	cmp	r3, sl
 800b3a0:	bfa8      	it	ge
 800b3a2:	4653      	movge	r3, sl
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	4699      	mov	r9, r3
 800b3a8:	dc36      	bgt.n	800b418 <_printf_float+0x364>
 800b3aa:	f04f 0b00 	mov.w	fp, #0
 800b3ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3b2:	f104 021a 	add.w	r2, r4, #26
 800b3b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ba:	eba3 0309 	sub.w	r3, r3, r9
 800b3be:	455b      	cmp	r3, fp
 800b3c0:	dc31      	bgt.n	800b426 <_printf_float+0x372>
 800b3c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3c4:	459a      	cmp	sl, r3
 800b3c6:	dc3a      	bgt.n	800b43e <_printf_float+0x38a>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	07da      	lsls	r2, r3, #31
 800b3cc:	d437      	bmi.n	800b43e <_printf_float+0x38a>
 800b3ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3d0:	ebaa 0903 	sub.w	r9, sl, r3
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d6:	ebaa 0303 	sub.w	r3, sl, r3
 800b3da:	4599      	cmp	r9, r3
 800b3dc:	bfa8      	it	ge
 800b3de:	4699      	movge	r9, r3
 800b3e0:	f1b9 0f00 	cmp.w	r9, #0
 800b3e4:	dc33      	bgt.n	800b44e <_printf_float+0x39a>
 800b3e6:	f04f 0800 	mov.w	r8, #0
 800b3ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ee:	f104 0b1a 	add.w	fp, r4, #26
 800b3f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3f4:	ebaa 0303 	sub.w	r3, sl, r3
 800b3f8:	eba3 0309 	sub.w	r3, r3, r9
 800b3fc:	4543      	cmp	r3, r8
 800b3fe:	f77f af7a 	ble.w	800b2f6 <_printf_float+0x242>
 800b402:	2301      	movs	r3, #1
 800b404:	465a      	mov	r2, fp
 800b406:	4631      	mov	r1, r6
 800b408:	4628      	mov	r0, r5
 800b40a:	47b8      	blx	r7
 800b40c:	3001      	adds	r0, #1
 800b40e:	f43f aeac 	beq.w	800b16a <_printf_float+0xb6>
 800b412:	f108 0801 	add.w	r8, r8, #1
 800b416:	e7ec      	b.n	800b3f2 <_printf_float+0x33e>
 800b418:	4642      	mov	r2, r8
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	d1c2      	bne.n	800b3aa <_printf_float+0x2f6>
 800b424:	e6a1      	b.n	800b16a <_printf_float+0xb6>
 800b426:	2301      	movs	r3, #1
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	920a      	str	r2, [sp, #40]	@ 0x28
 800b42e:	47b8      	blx	r7
 800b430:	3001      	adds	r0, #1
 800b432:	f43f ae9a 	beq.w	800b16a <_printf_float+0xb6>
 800b436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b438:	f10b 0b01 	add.w	fp, fp, #1
 800b43c:	e7bb      	b.n	800b3b6 <_printf_float+0x302>
 800b43e:	4631      	mov	r1, r6
 800b440:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b444:	4628      	mov	r0, r5
 800b446:	47b8      	blx	r7
 800b448:	3001      	adds	r0, #1
 800b44a:	d1c0      	bne.n	800b3ce <_printf_float+0x31a>
 800b44c:	e68d      	b.n	800b16a <_printf_float+0xb6>
 800b44e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b450:	464b      	mov	r3, r9
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	4442      	add	r2, r8
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	d1c3      	bne.n	800b3e6 <_printf_float+0x332>
 800b45e:	e684      	b.n	800b16a <_printf_float+0xb6>
 800b460:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b464:	f1ba 0f01 	cmp.w	sl, #1
 800b468:	dc01      	bgt.n	800b46e <_printf_float+0x3ba>
 800b46a:	07db      	lsls	r3, r3, #31
 800b46c:	d536      	bpl.n	800b4dc <_printf_float+0x428>
 800b46e:	2301      	movs	r3, #1
 800b470:	4642      	mov	r2, r8
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f ae76 	beq.w	800b16a <_printf_float+0xb6>
 800b47e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b482:	4631      	mov	r1, r6
 800b484:	4628      	mov	r0, r5
 800b486:	47b8      	blx	r7
 800b488:	3001      	adds	r0, #1
 800b48a:	f43f ae6e 	beq.w	800b16a <_printf_float+0xb6>
 800b48e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b492:	2200      	movs	r2, #0
 800b494:	2300      	movs	r3, #0
 800b496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b49a:	f7f5 faf5 	bl	8000a88 <__aeabi_dcmpeq>
 800b49e:	b9c0      	cbnz	r0, 800b4d2 <_printf_float+0x41e>
 800b4a0:	4653      	mov	r3, sl
 800b4a2:	f108 0201 	add.w	r2, r8, #1
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	47b8      	blx	r7
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d10c      	bne.n	800b4ca <_printf_float+0x416>
 800b4b0:	e65b      	b.n	800b16a <_printf_float+0xb6>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	465a      	mov	r2, fp
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f ae54 	beq.w	800b16a <_printf_float+0xb6>
 800b4c2:	f108 0801 	add.w	r8, r8, #1
 800b4c6:	45d0      	cmp	r8, sl
 800b4c8:	dbf3      	blt.n	800b4b2 <_printf_float+0x3fe>
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4d0:	e6e0      	b.n	800b294 <_printf_float+0x1e0>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	f104 0b1a 	add.w	fp, r4, #26
 800b4da:	e7f4      	b.n	800b4c6 <_printf_float+0x412>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4642      	mov	r2, r8
 800b4e0:	e7e1      	b.n	800b4a6 <_printf_float+0x3f2>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	464a      	mov	r2, r9
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f ae3c 	beq.w	800b16a <_printf_float+0xb6>
 800b4f2:	f108 0801 	add.w	r8, r8, #1
 800b4f6:	68e3      	ldr	r3, [r4, #12]
 800b4f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b4fa:	1a5b      	subs	r3, r3, r1
 800b4fc:	4543      	cmp	r3, r8
 800b4fe:	dcf0      	bgt.n	800b4e2 <_printf_float+0x42e>
 800b500:	e6fd      	b.n	800b2fe <_printf_float+0x24a>
 800b502:	f04f 0800 	mov.w	r8, #0
 800b506:	f104 0919 	add.w	r9, r4, #25
 800b50a:	e7f4      	b.n	800b4f6 <_printf_float+0x442>

0800b50c <_printf_common>:
 800b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	4616      	mov	r6, r2
 800b512:	4698      	mov	r8, r3
 800b514:	688a      	ldr	r2, [r1, #8]
 800b516:	690b      	ldr	r3, [r1, #16]
 800b518:	4607      	mov	r7, r0
 800b51a:	4293      	cmp	r3, r2
 800b51c:	bfb8      	it	lt
 800b51e:	4613      	movlt	r3, r2
 800b520:	6033      	str	r3, [r6, #0]
 800b522:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b526:	460c      	mov	r4, r1
 800b528:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b52c:	b10a      	cbz	r2, 800b532 <_printf_common+0x26>
 800b52e:	3301      	adds	r3, #1
 800b530:	6033      	str	r3, [r6, #0]
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	0699      	lsls	r1, r3, #26
 800b536:	bf42      	ittt	mi
 800b538:	6833      	ldrmi	r3, [r6, #0]
 800b53a:	3302      	addmi	r3, #2
 800b53c:	6033      	strmi	r3, [r6, #0]
 800b53e:	6825      	ldr	r5, [r4, #0]
 800b540:	f015 0506 	ands.w	r5, r5, #6
 800b544:	d106      	bne.n	800b554 <_printf_common+0x48>
 800b546:	f104 0a19 	add.w	sl, r4, #25
 800b54a:	68e3      	ldr	r3, [r4, #12]
 800b54c:	6832      	ldr	r2, [r6, #0]
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	42ab      	cmp	r3, r5
 800b552:	dc2b      	bgt.n	800b5ac <_printf_common+0xa0>
 800b554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b558:	6822      	ldr	r2, [r4, #0]
 800b55a:	3b00      	subs	r3, #0
 800b55c:	bf18      	it	ne
 800b55e:	2301      	movne	r3, #1
 800b560:	0692      	lsls	r2, r2, #26
 800b562:	d430      	bmi.n	800b5c6 <_printf_common+0xba>
 800b564:	4641      	mov	r1, r8
 800b566:	4638      	mov	r0, r7
 800b568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b56c:	47c8      	blx	r9
 800b56e:	3001      	adds	r0, #1
 800b570:	d023      	beq.n	800b5ba <_printf_common+0xae>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	6922      	ldr	r2, [r4, #16]
 800b576:	f003 0306 	and.w	r3, r3, #6
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	bf14      	ite	ne
 800b57e:	2500      	movne	r5, #0
 800b580:	6833      	ldreq	r3, [r6, #0]
 800b582:	f04f 0600 	mov.w	r6, #0
 800b586:	bf08      	it	eq
 800b588:	68e5      	ldreq	r5, [r4, #12]
 800b58a:	f104 041a 	add.w	r4, r4, #26
 800b58e:	bf08      	it	eq
 800b590:	1aed      	subeq	r5, r5, r3
 800b592:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b596:	bf08      	it	eq
 800b598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b59c:	4293      	cmp	r3, r2
 800b59e:	bfc4      	itt	gt
 800b5a0:	1a9b      	subgt	r3, r3, r2
 800b5a2:	18ed      	addgt	r5, r5, r3
 800b5a4:	42b5      	cmp	r5, r6
 800b5a6:	d11a      	bne.n	800b5de <_printf_common+0xd2>
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e008      	b.n	800b5be <_printf_common+0xb2>
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	4652      	mov	r2, sl
 800b5b0:	4641      	mov	r1, r8
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	47c8      	blx	r9
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d103      	bne.n	800b5c2 <_printf_common+0xb6>
 800b5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c2:	3501      	adds	r5, #1
 800b5c4:	e7c1      	b.n	800b54a <_printf_common+0x3e>
 800b5c6:	2030      	movs	r0, #48	@ 0x30
 800b5c8:	18e1      	adds	r1, r4, r3
 800b5ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5d4:	4422      	add	r2, r4
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5dc:	e7c2      	b.n	800b564 <_printf_common+0x58>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	4641      	mov	r1, r8
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	47c8      	blx	r9
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d0e6      	beq.n	800b5ba <_printf_common+0xae>
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	e7d9      	b.n	800b5a4 <_printf_common+0x98>

0800b5f0 <_printf_i>:
 800b5f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	7e0f      	ldrb	r7, [r1, #24]
 800b5f6:	4691      	mov	r9, r2
 800b5f8:	2f78      	cmp	r7, #120	@ 0x78
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	469a      	mov	sl, r3
 800b600:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b606:	d807      	bhi.n	800b618 <_printf_i+0x28>
 800b608:	2f62      	cmp	r7, #98	@ 0x62
 800b60a:	d80a      	bhi.n	800b622 <_printf_i+0x32>
 800b60c:	2f00      	cmp	r7, #0
 800b60e:	f000 80d3 	beq.w	800b7b8 <_printf_i+0x1c8>
 800b612:	2f58      	cmp	r7, #88	@ 0x58
 800b614:	f000 80ba 	beq.w	800b78c <_printf_i+0x19c>
 800b618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b61c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b620:	e03a      	b.n	800b698 <_printf_i+0xa8>
 800b622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b626:	2b15      	cmp	r3, #21
 800b628:	d8f6      	bhi.n	800b618 <_printf_i+0x28>
 800b62a:	a101      	add	r1, pc, #4	@ (adr r1, 800b630 <_printf_i+0x40>)
 800b62c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b630:	0800b689 	.word	0x0800b689
 800b634:	0800b69d 	.word	0x0800b69d
 800b638:	0800b619 	.word	0x0800b619
 800b63c:	0800b619 	.word	0x0800b619
 800b640:	0800b619 	.word	0x0800b619
 800b644:	0800b619 	.word	0x0800b619
 800b648:	0800b69d 	.word	0x0800b69d
 800b64c:	0800b619 	.word	0x0800b619
 800b650:	0800b619 	.word	0x0800b619
 800b654:	0800b619 	.word	0x0800b619
 800b658:	0800b619 	.word	0x0800b619
 800b65c:	0800b79f 	.word	0x0800b79f
 800b660:	0800b6c7 	.word	0x0800b6c7
 800b664:	0800b759 	.word	0x0800b759
 800b668:	0800b619 	.word	0x0800b619
 800b66c:	0800b619 	.word	0x0800b619
 800b670:	0800b7c1 	.word	0x0800b7c1
 800b674:	0800b619 	.word	0x0800b619
 800b678:	0800b6c7 	.word	0x0800b6c7
 800b67c:	0800b619 	.word	0x0800b619
 800b680:	0800b619 	.word	0x0800b619
 800b684:	0800b761 	.word	0x0800b761
 800b688:	6833      	ldr	r3, [r6, #0]
 800b68a:	1d1a      	adds	r2, r3, #4
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6032      	str	r2, [r6, #0]
 800b690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b698:	2301      	movs	r3, #1
 800b69a:	e09e      	b.n	800b7da <_printf_i+0x1ea>
 800b69c:	6833      	ldr	r3, [r6, #0]
 800b69e:	6820      	ldr	r0, [r4, #0]
 800b6a0:	1d19      	adds	r1, r3, #4
 800b6a2:	6031      	str	r1, [r6, #0]
 800b6a4:	0606      	lsls	r6, r0, #24
 800b6a6:	d501      	bpl.n	800b6ac <_printf_i+0xbc>
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	e003      	b.n	800b6b4 <_printf_i+0xc4>
 800b6ac:	0645      	lsls	r5, r0, #25
 800b6ae:	d5fb      	bpl.n	800b6a8 <_printf_i+0xb8>
 800b6b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6b4:	2d00      	cmp	r5, #0
 800b6b6:	da03      	bge.n	800b6c0 <_printf_i+0xd0>
 800b6b8:	232d      	movs	r3, #45	@ 0x2d
 800b6ba:	426d      	negs	r5, r5
 800b6bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c0:	230a      	movs	r3, #10
 800b6c2:	4859      	ldr	r0, [pc, #356]	@ (800b828 <_printf_i+0x238>)
 800b6c4:	e011      	b.n	800b6ea <_printf_i+0xfa>
 800b6c6:	6821      	ldr	r1, [r4, #0]
 800b6c8:	6833      	ldr	r3, [r6, #0]
 800b6ca:	0608      	lsls	r0, r1, #24
 800b6cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6d0:	d402      	bmi.n	800b6d8 <_printf_i+0xe8>
 800b6d2:	0649      	lsls	r1, r1, #25
 800b6d4:	bf48      	it	mi
 800b6d6:	b2ad      	uxthmi	r5, r5
 800b6d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6da:	6033      	str	r3, [r6, #0]
 800b6dc:	bf14      	ite	ne
 800b6de:	230a      	movne	r3, #10
 800b6e0:	2308      	moveq	r3, #8
 800b6e2:	4851      	ldr	r0, [pc, #324]	@ (800b828 <_printf_i+0x238>)
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6ea:	6866      	ldr	r6, [r4, #4]
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	bfa8      	it	ge
 800b6f0:	6821      	ldrge	r1, [r4, #0]
 800b6f2:	60a6      	str	r6, [r4, #8]
 800b6f4:	bfa4      	itt	ge
 800b6f6:	f021 0104 	bicge.w	r1, r1, #4
 800b6fa:	6021      	strge	r1, [r4, #0]
 800b6fc:	b90d      	cbnz	r5, 800b702 <_printf_i+0x112>
 800b6fe:	2e00      	cmp	r6, #0
 800b700:	d04b      	beq.n	800b79a <_printf_i+0x1aa>
 800b702:	4616      	mov	r6, r2
 800b704:	fbb5 f1f3 	udiv	r1, r5, r3
 800b708:	fb03 5711 	mls	r7, r3, r1, r5
 800b70c:	5dc7      	ldrb	r7, [r0, r7]
 800b70e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b712:	462f      	mov	r7, r5
 800b714:	42bb      	cmp	r3, r7
 800b716:	460d      	mov	r5, r1
 800b718:	d9f4      	bls.n	800b704 <_printf_i+0x114>
 800b71a:	2b08      	cmp	r3, #8
 800b71c:	d10b      	bne.n	800b736 <_printf_i+0x146>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	07df      	lsls	r7, r3, #31
 800b722:	d508      	bpl.n	800b736 <_printf_i+0x146>
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	6861      	ldr	r1, [r4, #4]
 800b728:	4299      	cmp	r1, r3
 800b72a:	bfde      	ittt	le
 800b72c:	2330      	movle	r3, #48	@ 0x30
 800b72e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b732:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b736:	1b92      	subs	r2, r2, r6
 800b738:	6122      	str	r2, [r4, #16]
 800b73a:	464b      	mov	r3, r9
 800b73c:	4621      	mov	r1, r4
 800b73e:	4640      	mov	r0, r8
 800b740:	f8cd a000 	str.w	sl, [sp]
 800b744:	aa03      	add	r2, sp, #12
 800b746:	f7ff fee1 	bl	800b50c <_printf_common>
 800b74a:	3001      	adds	r0, #1
 800b74c:	d14a      	bne.n	800b7e4 <_printf_i+0x1f4>
 800b74e:	f04f 30ff 	mov.w	r0, #4294967295
 800b752:	b004      	add	sp, #16
 800b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	f043 0320 	orr.w	r3, r3, #32
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	2778      	movs	r7, #120	@ 0x78
 800b762:	4832      	ldr	r0, [pc, #200]	@ (800b82c <_printf_i+0x23c>)
 800b764:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b768:	6823      	ldr	r3, [r4, #0]
 800b76a:	6831      	ldr	r1, [r6, #0]
 800b76c:	061f      	lsls	r7, r3, #24
 800b76e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b772:	d402      	bmi.n	800b77a <_printf_i+0x18a>
 800b774:	065f      	lsls	r7, r3, #25
 800b776:	bf48      	it	mi
 800b778:	b2ad      	uxthmi	r5, r5
 800b77a:	6031      	str	r1, [r6, #0]
 800b77c:	07d9      	lsls	r1, r3, #31
 800b77e:	bf44      	itt	mi
 800b780:	f043 0320 	orrmi.w	r3, r3, #32
 800b784:	6023      	strmi	r3, [r4, #0]
 800b786:	b11d      	cbz	r5, 800b790 <_printf_i+0x1a0>
 800b788:	2310      	movs	r3, #16
 800b78a:	e7ab      	b.n	800b6e4 <_printf_i+0xf4>
 800b78c:	4826      	ldr	r0, [pc, #152]	@ (800b828 <_printf_i+0x238>)
 800b78e:	e7e9      	b.n	800b764 <_printf_i+0x174>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	f023 0320 	bic.w	r3, r3, #32
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	e7f6      	b.n	800b788 <_printf_i+0x198>
 800b79a:	4616      	mov	r6, r2
 800b79c:	e7bd      	b.n	800b71a <_printf_i+0x12a>
 800b79e:	6833      	ldr	r3, [r6, #0]
 800b7a0:	6825      	ldr	r5, [r4, #0]
 800b7a2:	1d18      	adds	r0, r3, #4
 800b7a4:	6961      	ldr	r1, [r4, #20]
 800b7a6:	6030      	str	r0, [r6, #0]
 800b7a8:	062e      	lsls	r6, r5, #24
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	d501      	bpl.n	800b7b2 <_printf_i+0x1c2>
 800b7ae:	6019      	str	r1, [r3, #0]
 800b7b0:	e002      	b.n	800b7b8 <_printf_i+0x1c8>
 800b7b2:	0668      	lsls	r0, r5, #25
 800b7b4:	d5fb      	bpl.n	800b7ae <_printf_i+0x1be>
 800b7b6:	8019      	strh	r1, [r3, #0]
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	6123      	str	r3, [r4, #16]
 800b7be:	e7bc      	b.n	800b73a <_printf_i+0x14a>
 800b7c0:	6833      	ldr	r3, [r6, #0]
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	1d1a      	adds	r2, r3, #4
 800b7c6:	6032      	str	r2, [r6, #0]
 800b7c8:	681e      	ldr	r6, [r3, #0]
 800b7ca:	6862      	ldr	r2, [r4, #4]
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 f9d4 	bl	800bb7a <memchr>
 800b7d2:	b108      	cbz	r0, 800b7d8 <_printf_i+0x1e8>
 800b7d4:	1b80      	subs	r0, r0, r6
 800b7d6:	6060      	str	r0, [r4, #4]
 800b7d8:	6863      	ldr	r3, [r4, #4]
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7e2:	e7aa      	b.n	800b73a <_printf_i+0x14a>
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	47d0      	blx	sl
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d0ad      	beq.n	800b74e <_printf_i+0x15e>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	079b      	lsls	r3, r3, #30
 800b7f6:	d413      	bmi.n	800b820 <_printf_i+0x230>
 800b7f8:	68e0      	ldr	r0, [r4, #12]
 800b7fa:	9b03      	ldr	r3, [sp, #12]
 800b7fc:	4298      	cmp	r0, r3
 800b7fe:	bfb8      	it	lt
 800b800:	4618      	movlt	r0, r3
 800b802:	e7a6      	b.n	800b752 <_printf_i+0x162>
 800b804:	2301      	movs	r3, #1
 800b806:	4632      	mov	r2, r6
 800b808:	4649      	mov	r1, r9
 800b80a:	4640      	mov	r0, r8
 800b80c:	47d0      	blx	sl
 800b80e:	3001      	adds	r0, #1
 800b810:	d09d      	beq.n	800b74e <_printf_i+0x15e>
 800b812:	3501      	adds	r5, #1
 800b814:	68e3      	ldr	r3, [r4, #12]
 800b816:	9903      	ldr	r1, [sp, #12]
 800b818:	1a5b      	subs	r3, r3, r1
 800b81a:	42ab      	cmp	r3, r5
 800b81c:	dcf2      	bgt.n	800b804 <_printf_i+0x214>
 800b81e:	e7eb      	b.n	800b7f8 <_printf_i+0x208>
 800b820:	2500      	movs	r5, #0
 800b822:	f104 0619 	add.w	r6, r4, #25
 800b826:	e7f5      	b.n	800b814 <_printf_i+0x224>
 800b828:	0800e564 	.word	0x0800e564
 800b82c:	0800e575 	.word	0x0800e575

0800b830 <std>:
 800b830:	2300      	movs	r3, #0
 800b832:	b510      	push	{r4, lr}
 800b834:	4604      	mov	r4, r0
 800b836:	e9c0 3300 	strd	r3, r3, [r0]
 800b83a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b83e:	6083      	str	r3, [r0, #8]
 800b840:	8181      	strh	r1, [r0, #12]
 800b842:	6643      	str	r3, [r0, #100]	@ 0x64
 800b844:	81c2      	strh	r2, [r0, #14]
 800b846:	6183      	str	r3, [r0, #24]
 800b848:	4619      	mov	r1, r3
 800b84a:	2208      	movs	r2, #8
 800b84c:	305c      	adds	r0, #92	@ 0x5c
 800b84e:	f000 f914 	bl	800ba7a <memset>
 800b852:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <std+0x58>)
 800b854:	6224      	str	r4, [r4, #32]
 800b856:	6263      	str	r3, [r4, #36]	@ 0x24
 800b858:	4b0c      	ldr	r3, [pc, #48]	@ (800b88c <std+0x5c>)
 800b85a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b85c:	4b0c      	ldr	r3, [pc, #48]	@ (800b890 <std+0x60>)
 800b85e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b860:	4b0c      	ldr	r3, [pc, #48]	@ (800b894 <std+0x64>)
 800b862:	6323      	str	r3, [r4, #48]	@ 0x30
 800b864:	4b0c      	ldr	r3, [pc, #48]	@ (800b898 <std+0x68>)
 800b866:	429c      	cmp	r4, r3
 800b868:	d006      	beq.n	800b878 <std+0x48>
 800b86a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b86e:	4294      	cmp	r4, r2
 800b870:	d002      	beq.n	800b878 <std+0x48>
 800b872:	33d0      	adds	r3, #208	@ 0xd0
 800b874:	429c      	cmp	r4, r3
 800b876:	d105      	bne.n	800b884 <std+0x54>
 800b878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b880:	f000 b978 	b.w	800bb74 <__retarget_lock_init_recursive>
 800b884:	bd10      	pop	{r4, pc}
 800b886:	bf00      	nop
 800b888:	0800b9f5 	.word	0x0800b9f5
 800b88c:	0800ba17 	.word	0x0800ba17
 800b890:	0800ba4f 	.word	0x0800ba4f
 800b894:	0800ba73 	.word	0x0800ba73
 800b898:	20005c44 	.word	0x20005c44

0800b89c <stdio_exit_handler>:
 800b89c:	4a02      	ldr	r2, [pc, #8]	@ (800b8a8 <stdio_exit_handler+0xc>)
 800b89e:	4903      	ldr	r1, [pc, #12]	@ (800b8ac <stdio_exit_handler+0x10>)
 800b8a0:	4803      	ldr	r0, [pc, #12]	@ (800b8b0 <stdio_exit_handler+0x14>)
 800b8a2:	f000 b869 	b.w	800b978 <_fwalk_sglue>
 800b8a6:	bf00      	nop
 800b8a8:	2000006c 	.word	0x2000006c
 800b8ac:	0800d505 	.word	0x0800d505
 800b8b0:	2000007c 	.word	0x2000007c

0800b8b4 <cleanup_stdio>:
 800b8b4:	6841      	ldr	r1, [r0, #4]
 800b8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b8e8 <cleanup_stdio+0x34>)
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	4299      	cmp	r1, r3
 800b8bc:	4604      	mov	r4, r0
 800b8be:	d001      	beq.n	800b8c4 <cleanup_stdio+0x10>
 800b8c0:	f001 fe20 	bl	800d504 <_fflush_r>
 800b8c4:	68a1      	ldr	r1, [r4, #8]
 800b8c6:	4b09      	ldr	r3, [pc, #36]	@ (800b8ec <cleanup_stdio+0x38>)
 800b8c8:	4299      	cmp	r1, r3
 800b8ca:	d002      	beq.n	800b8d2 <cleanup_stdio+0x1e>
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f001 fe19 	bl	800d504 <_fflush_r>
 800b8d2:	68e1      	ldr	r1, [r4, #12]
 800b8d4:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <cleanup_stdio+0x3c>)
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	d004      	beq.n	800b8e4 <cleanup_stdio+0x30>
 800b8da:	4620      	mov	r0, r4
 800b8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8e0:	f001 be10 	b.w	800d504 <_fflush_r>
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20005c44 	.word	0x20005c44
 800b8ec:	20005cac 	.word	0x20005cac
 800b8f0:	20005d14 	.word	0x20005d14

0800b8f4 <global_stdio_init.part.0>:
 800b8f4:	b510      	push	{r4, lr}
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <global_stdio_init.part.0+0x30>)
 800b8f8:	4c0b      	ldr	r4, [pc, #44]	@ (800b928 <global_stdio_init.part.0+0x34>)
 800b8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b92c <global_stdio_init.part.0+0x38>)
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	2104      	movs	r1, #4
 800b902:	2200      	movs	r2, #0
 800b904:	f7ff ff94 	bl	800b830 <std>
 800b908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b90c:	2201      	movs	r2, #1
 800b90e:	2109      	movs	r1, #9
 800b910:	f7ff ff8e 	bl	800b830 <std>
 800b914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b918:	2202      	movs	r2, #2
 800b91a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b91e:	2112      	movs	r1, #18
 800b920:	f7ff bf86 	b.w	800b830 <std>
 800b924:	20005d7c 	.word	0x20005d7c
 800b928:	20005c44 	.word	0x20005c44
 800b92c:	0800b89d 	.word	0x0800b89d

0800b930 <__sfp_lock_acquire>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__sfp_lock_acquire+0x8>)
 800b932:	f000 b920 	b.w	800bb76 <__retarget_lock_acquire_recursive>
 800b936:	bf00      	nop
 800b938:	20005d85 	.word	0x20005d85

0800b93c <__sfp_lock_release>:
 800b93c:	4801      	ldr	r0, [pc, #4]	@ (800b944 <__sfp_lock_release+0x8>)
 800b93e:	f000 b91b 	b.w	800bb78 <__retarget_lock_release_recursive>
 800b942:	bf00      	nop
 800b944:	20005d85 	.word	0x20005d85

0800b948 <__sinit>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	4604      	mov	r4, r0
 800b94c:	f7ff fff0 	bl	800b930 <__sfp_lock_acquire>
 800b950:	6a23      	ldr	r3, [r4, #32]
 800b952:	b11b      	cbz	r3, 800b95c <__sinit+0x14>
 800b954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b958:	f7ff bff0 	b.w	800b93c <__sfp_lock_release>
 800b95c:	4b04      	ldr	r3, [pc, #16]	@ (800b970 <__sinit+0x28>)
 800b95e:	6223      	str	r3, [r4, #32]
 800b960:	4b04      	ldr	r3, [pc, #16]	@ (800b974 <__sinit+0x2c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f5      	bne.n	800b954 <__sinit+0xc>
 800b968:	f7ff ffc4 	bl	800b8f4 <global_stdio_init.part.0>
 800b96c:	e7f2      	b.n	800b954 <__sinit+0xc>
 800b96e:	bf00      	nop
 800b970:	0800b8b5 	.word	0x0800b8b5
 800b974:	20005d7c 	.word	0x20005d7c

0800b978 <_fwalk_sglue>:
 800b978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	4607      	mov	r7, r0
 800b97e:	4688      	mov	r8, r1
 800b980:	4614      	mov	r4, r2
 800b982:	2600      	movs	r6, #0
 800b984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b988:	f1b9 0901 	subs.w	r9, r9, #1
 800b98c:	d505      	bpl.n	800b99a <_fwalk_sglue+0x22>
 800b98e:	6824      	ldr	r4, [r4, #0]
 800b990:	2c00      	cmp	r4, #0
 800b992:	d1f7      	bne.n	800b984 <_fwalk_sglue+0xc>
 800b994:	4630      	mov	r0, r6
 800b996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d907      	bls.n	800b9b0 <_fwalk_sglue+0x38>
 800b9a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	d003      	beq.n	800b9b0 <_fwalk_sglue+0x38>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	47c0      	blx	r8
 800b9ae:	4306      	orrs	r6, r0
 800b9b0:	3568      	adds	r5, #104	@ 0x68
 800b9b2:	e7e9      	b.n	800b988 <_fwalk_sglue+0x10>

0800b9b4 <siprintf>:
 800b9b4:	b40e      	push	{r1, r2, r3}
 800b9b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9ba:	b500      	push	{lr}
 800b9bc:	b09c      	sub	sp, #112	@ 0x70
 800b9be:	ab1d      	add	r3, sp, #116	@ 0x74
 800b9c0:	9002      	str	r0, [sp, #8]
 800b9c2:	9006      	str	r0, [sp, #24]
 800b9c4:	9107      	str	r1, [sp, #28]
 800b9c6:	9104      	str	r1, [sp, #16]
 800b9c8:	4808      	ldr	r0, [pc, #32]	@ (800b9ec <siprintf+0x38>)
 800b9ca:	4909      	ldr	r1, [pc, #36]	@ (800b9f0 <siprintf+0x3c>)
 800b9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d0:	9105      	str	r1, [sp, #20]
 800b9d2:	6800      	ldr	r0, [r0, #0]
 800b9d4:	a902      	add	r1, sp, #8
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	f001 fc18 	bl	800d20c <_svfiprintf_r>
 800b9dc:	2200      	movs	r2, #0
 800b9de:	9b02      	ldr	r3, [sp, #8]
 800b9e0:	701a      	strb	r2, [r3, #0]
 800b9e2:	b01c      	add	sp, #112	@ 0x70
 800b9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9e8:	b003      	add	sp, #12
 800b9ea:	4770      	bx	lr
 800b9ec:	20000078 	.word	0x20000078
 800b9f0:	ffff0208 	.word	0xffff0208

0800b9f4 <__sread>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fc:	f000 f86c 	bl	800bad8 <_read_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	bfab      	itete	ge
 800ba04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba06:	89a3      	ldrhlt	r3, [r4, #12]
 800ba08:	181b      	addge	r3, r3, r0
 800ba0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba0e:	bfac      	ite	ge
 800ba10:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba12:	81a3      	strhlt	r3, [r4, #12]
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <__swrite>:
 800ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	461f      	mov	r7, r3
 800ba1c:	898b      	ldrh	r3, [r1, #12]
 800ba1e:	4605      	mov	r5, r0
 800ba20:	05db      	lsls	r3, r3, #23
 800ba22:	460c      	mov	r4, r1
 800ba24:	4616      	mov	r6, r2
 800ba26:	d505      	bpl.n	800ba34 <__swrite+0x1e>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba30:	f000 f840 	bl	800bab4 <_lseek_r>
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	4632      	mov	r2, r6
 800ba38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba3c:	81a3      	strh	r3, [r4, #12]
 800ba3e:	4628      	mov	r0, r5
 800ba40:	463b      	mov	r3, r7
 800ba42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4a:	f000 b857 	b.w	800bafc <_write_r>

0800ba4e <__sseek>:
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	460c      	mov	r4, r1
 800ba52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba56:	f000 f82d 	bl	800bab4 <_lseek_r>
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	bf15      	itete	ne
 800ba60:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba6a:	81a3      	strheq	r3, [r4, #12]
 800ba6c:	bf18      	it	ne
 800ba6e:	81a3      	strhne	r3, [r4, #12]
 800ba70:	bd10      	pop	{r4, pc}

0800ba72 <__sclose>:
 800ba72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba76:	f000 b80d 	b.w	800ba94 <_close_r>

0800ba7a <memset>:
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4402      	add	r2, r0
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d100      	bne.n	800ba84 <memset+0xa>
 800ba82:	4770      	bx	lr
 800ba84:	f803 1b01 	strb.w	r1, [r3], #1
 800ba88:	e7f9      	b.n	800ba7e <memset+0x4>
	...

0800ba8c <_localeconv_r>:
 800ba8c:	4800      	ldr	r0, [pc, #0]	@ (800ba90 <_localeconv_r+0x4>)
 800ba8e:	4770      	bx	lr
 800ba90:	200001b8 	.word	0x200001b8

0800ba94 <_close_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	2300      	movs	r3, #0
 800ba98:	4d05      	ldr	r5, [pc, #20]	@ (800bab0 <_close_r+0x1c>)
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	f7f8 fffb 	bl	8004a9a <_close>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_close_r+0x1a>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_close_r+0x1a>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	20005d80 	.word	0x20005d80

0800bab4 <_lseek_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	4611      	mov	r1, r2
 800babc:	2200      	movs	r2, #0
 800babe:	4d05      	ldr	r5, [pc, #20]	@ (800bad4 <_lseek_r+0x20>)
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f7f9 f80d 	bl	8004ae2 <_lseek>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_lseek_r+0x1e>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_lseek_r+0x1e>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	20005d80 	.word	0x20005d80

0800bad8 <_read_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	4611      	mov	r1, r2
 800bae0:	2200      	movs	r2, #0
 800bae2:	4d05      	ldr	r5, [pc, #20]	@ (800baf8 <_read_r+0x20>)
 800bae4:	602a      	str	r2, [r5, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	f7f8 ff9e 	bl	8004a28 <_read>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_read_r+0x1e>
 800baf0:	682b      	ldr	r3, [r5, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_read_r+0x1e>
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20005d80 	.word	0x20005d80

0800bafc <_write_r>:
 800bafc:	b538      	push	{r3, r4, r5, lr}
 800bafe:	4604      	mov	r4, r0
 800bb00:	4608      	mov	r0, r1
 800bb02:	4611      	mov	r1, r2
 800bb04:	2200      	movs	r2, #0
 800bb06:	4d05      	ldr	r5, [pc, #20]	@ (800bb1c <_write_r+0x20>)
 800bb08:	602a      	str	r2, [r5, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f7f8 ffa9 	bl	8004a62 <_write>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_write_r+0x1e>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_write_r+0x1e>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	20005d80 	.word	0x20005d80

0800bb20 <__errno>:
 800bb20:	4b01      	ldr	r3, [pc, #4]	@ (800bb28 <__errno+0x8>)
 800bb22:	6818      	ldr	r0, [r3, #0]
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	20000078 	.word	0x20000078

0800bb2c <__libc_init_array>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	2600      	movs	r6, #0
 800bb30:	4d0c      	ldr	r5, [pc, #48]	@ (800bb64 <__libc_init_array+0x38>)
 800bb32:	4c0d      	ldr	r4, [pc, #52]	@ (800bb68 <__libc_init_array+0x3c>)
 800bb34:	1b64      	subs	r4, r4, r5
 800bb36:	10a4      	asrs	r4, r4, #2
 800bb38:	42a6      	cmp	r6, r4
 800bb3a:	d109      	bne.n	800bb50 <__libc_init_array+0x24>
 800bb3c:	f002 f870 	bl	800dc20 <_init>
 800bb40:	2600      	movs	r6, #0
 800bb42:	4d0a      	ldr	r5, [pc, #40]	@ (800bb6c <__libc_init_array+0x40>)
 800bb44:	4c0a      	ldr	r4, [pc, #40]	@ (800bb70 <__libc_init_array+0x44>)
 800bb46:	1b64      	subs	r4, r4, r5
 800bb48:	10a4      	asrs	r4, r4, #2
 800bb4a:	42a6      	cmp	r6, r4
 800bb4c:	d105      	bne.n	800bb5a <__libc_init_array+0x2e>
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb54:	4798      	blx	r3
 800bb56:	3601      	adds	r6, #1
 800bb58:	e7ee      	b.n	800bb38 <__libc_init_array+0xc>
 800bb5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb5e:	4798      	blx	r3
 800bb60:	3601      	adds	r6, #1
 800bb62:	e7f2      	b.n	800bb4a <__libc_init_array+0x1e>
 800bb64:	0800e8c8 	.word	0x0800e8c8
 800bb68:	0800e8c8 	.word	0x0800e8c8
 800bb6c:	0800e8c8 	.word	0x0800e8c8
 800bb70:	0800e8cc 	.word	0x0800e8cc

0800bb74 <__retarget_lock_init_recursive>:
 800bb74:	4770      	bx	lr

0800bb76 <__retarget_lock_acquire_recursive>:
 800bb76:	4770      	bx	lr

0800bb78 <__retarget_lock_release_recursive>:
 800bb78:	4770      	bx	lr

0800bb7a <memchr>:
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	b510      	push	{r4, lr}
 800bb7e:	b2c9      	uxtb	r1, r1
 800bb80:	4402      	add	r2, r0
 800bb82:	4293      	cmp	r3, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	d101      	bne.n	800bb8c <memchr+0x12>
 800bb88:	2000      	movs	r0, #0
 800bb8a:	e003      	b.n	800bb94 <memchr+0x1a>
 800bb8c:	7804      	ldrb	r4, [r0, #0]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	428c      	cmp	r4, r1
 800bb92:	d1f6      	bne.n	800bb82 <memchr+0x8>
 800bb94:	bd10      	pop	{r4, pc}

0800bb96 <memcpy>:
 800bb96:	440a      	add	r2, r1
 800bb98:	4291      	cmp	r1, r2
 800bb9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb9e:	d100      	bne.n	800bba2 <memcpy+0xc>
 800bba0:	4770      	bx	lr
 800bba2:	b510      	push	{r4, lr}
 800bba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bba8:	4291      	cmp	r1, r2
 800bbaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbae:	d1f9      	bne.n	800bba4 <memcpy+0xe>
 800bbb0:	bd10      	pop	{r4, pc}

0800bbb2 <quorem>:
 800bbb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb6:	6903      	ldr	r3, [r0, #16]
 800bbb8:	690c      	ldr	r4, [r1, #16]
 800bbba:	4607      	mov	r7, r0
 800bbbc:	42a3      	cmp	r3, r4
 800bbbe:	db7e      	blt.n	800bcbe <quorem+0x10c>
 800bbc0:	3c01      	subs	r4, #1
 800bbc2:	00a3      	lsls	r3, r4, #2
 800bbc4:	f100 0514 	add.w	r5, r0, #20
 800bbc8:	f101 0814 	add.w	r8, r1, #20
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbe8:	d32e      	bcc.n	800bc48 <quorem+0x96>
 800bbea:	f04f 0a00 	mov.w	sl, #0
 800bbee:	46c4      	mov	ip, r8
 800bbf0:	46ae      	mov	lr, r5
 800bbf2:	46d3      	mov	fp, sl
 800bbf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbf8:	b298      	uxth	r0, r3
 800bbfa:	fb06 a000 	mla	r0, r6, r0, sl
 800bbfe:	0c1b      	lsrs	r3, r3, #16
 800bc00:	0c02      	lsrs	r2, r0, #16
 800bc02:	fb06 2303 	mla	r3, r6, r3, r2
 800bc06:	f8de 2000 	ldr.w	r2, [lr]
 800bc0a:	b280      	uxth	r0, r0
 800bc0c:	b292      	uxth	r2, r2
 800bc0e:	1a12      	subs	r2, r2, r0
 800bc10:	445a      	add	r2, fp
 800bc12:	f8de 0000 	ldr.w	r0, [lr]
 800bc16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc24:	b292      	uxth	r2, r2
 800bc26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc2a:	45e1      	cmp	r9, ip
 800bc2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc30:	f84e 2b04 	str.w	r2, [lr], #4
 800bc34:	d2de      	bcs.n	800bbf4 <quorem+0x42>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	58eb      	ldr	r3, [r5, r3]
 800bc3a:	b92b      	cbnz	r3, 800bc48 <quorem+0x96>
 800bc3c:	9b01      	ldr	r3, [sp, #4]
 800bc3e:	3b04      	subs	r3, #4
 800bc40:	429d      	cmp	r5, r3
 800bc42:	461a      	mov	r2, r3
 800bc44:	d32f      	bcc.n	800bca6 <quorem+0xf4>
 800bc46:	613c      	str	r4, [r7, #16]
 800bc48:	4638      	mov	r0, r7
 800bc4a:	f001 f97b 	bl	800cf44 <__mcmp>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	db25      	blt.n	800bc9e <quorem+0xec>
 800bc52:	4629      	mov	r1, r5
 800bc54:	2000      	movs	r0, #0
 800bc56:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc5a:	f8d1 c000 	ldr.w	ip, [r1]
 800bc5e:	fa1f fe82 	uxth.w	lr, r2
 800bc62:	fa1f f38c 	uxth.w	r3, ip
 800bc66:	eba3 030e 	sub.w	r3, r3, lr
 800bc6a:	4403      	add	r3, r0
 800bc6c:	0c12      	lsrs	r2, r2, #16
 800bc6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc7c:	45c1      	cmp	r9, r8
 800bc7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc82:	f841 3b04 	str.w	r3, [r1], #4
 800bc86:	d2e6      	bcs.n	800bc56 <quorem+0xa4>
 800bc88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc90:	b922      	cbnz	r2, 800bc9c <quorem+0xea>
 800bc92:	3b04      	subs	r3, #4
 800bc94:	429d      	cmp	r5, r3
 800bc96:	461a      	mov	r2, r3
 800bc98:	d30b      	bcc.n	800bcb2 <quorem+0x100>
 800bc9a:	613c      	str	r4, [r7, #16]
 800bc9c:	3601      	adds	r6, #1
 800bc9e:	4630      	mov	r0, r6
 800bca0:	b003      	add	sp, #12
 800bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca6:	6812      	ldr	r2, [r2, #0]
 800bca8:	3b04      	subs	r3, #4
 800bcaa:	2a00      	cmp	r2, #0
 800bcac:	d1cb      	bne.n	800bc46 <quorem+0x94>
 800bcae:	3c01      	subs	r4, #1
 800bcb0:	e7c6      	b.n	800bc40 <quorem+0x8e>
 800bcb2:	6812      	ldr	r2, [r2, #0]
 800bcb4:	3b04      	subs	r3, #4
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	d1ef      	bne.n	800bc9a <quorem+0xe8>
 800bcba:	3c01      	subs	r4, #1
 800bcbc:	e7ea      	b.n	800bc94 <quorem+0xe2>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e7ee      	b.n	800bca0 <quorem+0xee>
 800bcc2:	0000      	movs	r0, r0
 800bcc4:	0000      	movs	r0, r0
	...

0800bcc8 <_dtoa_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	4614      	mov	r4, r2
 800bcce:	461d      	mov	r5, r3
 800bcd0:	69c7      	ldr	r7, [r0, #28]
 800bcd2:	b097      	sub	sp, #92	@ 0x5c
 800bcd4:	4683      	mov	fp, r0
 800bcd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bcda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bcdc:	b97f      	cbnz	r7, 800bcfe <_dtoa_r+0x36>
 800bcde:	2010      	movs	r0, #16
 800bce0:	f000 fe02 	bl	800c8e8 <malloc>
 800bce4:	4602      	mov	r2, r0
 800bce6:	f8cb 001c 	str.w	r0, [fp, #28]
 800bcea:	b920      	cbnz	r0, 800bcf6 <_dtoa_r+0x2e>
 800bcec:	21ef      	movs	r1, #239	@ 0xef
 800bcee:	4ba8      	ldr	r3, [pc, #672]	@ (800bf90 <_dtoa_r+0x2c8>)
 800bcf0:	48a8      	ldr	r0, [pc, #672]	@ (800bf94 <_dtoa_r+0x2cc>)
 800bcf2:	f001 fc59 	bl	800d5a8 <__assert_func>
 800bcf6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bcfa:	6007      	str	r7, [r0, #0]
 800bcfc:	60c7      	str	r7, [r0, #12]
 800bcfe:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	b159      	cbz	r1, 800bd1e <_dtoa_r+0x56>
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	4093      	lsls	r3, r2
 800bd0c:	604a      	str	r2, [r1, #4]
 800bd0e:	608b      	str	r3, [r1, #8]
 800bd10:	4658      	mov	r0, fp
 800bd12:	f000 fedf 	bl	800cad4 <_Bfree>
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	1e2b      	subs	r3, r5, #0
 800bd20:	bfaf      	iteee	ge
 800bd22:	2300      	movge	r3, #0
 800bd24:	2201      	movlt	r2, #1
 800bd26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd2a:	9303      	strlt	r3, [sp, #12]
 800bd2c:	bfa8      	it	ge
 800bd2e:	6033      	strge	r3, [r6, #0]
 800bd30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd34:	4b98      	ldr	r3, [pc, #608]	@ (800bf98 <_dtoa_r+0x2d0>)
 800bd36:	bfb8      	it	lt
 800bd38:	6032      	strlt	r2, [r6, #0]
 800bd3a:	ea33 0308 	bics.w	r3, r3, r8
 800bd3e:	d112      	bne.n	800bd66 <_dtoa_r+0x9e>
 800bd40:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd4c:	4323      	orrs	r3, r4
 800bd4e:	f000 8550 	beq.w	800c7f2 <_dtoa_r+0xb2a>
 800bd52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd54:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800bf9c <_dtoa_r+0x2d4>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 8552 	beq.w	800c802 <_dtoa_r+0xb3a>
 800bd5e:	f10a 0303 	add.w	r3, sl, #3
 800bd62:	f000 bd4c 	b.w	800c7fe <_dtoa_r+0xb36>
 800bd66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd72:	2200      	movs	r2, #0
 800bd74:	2300      	movs	r3, #0
 800bd76:	f7f4 fe87 	bl	8000a88 <__aeabi_dcmpeq>
 800bd7a:	4607      	mov	r7, r0
 800bd7c:	b158      	cbz	r0, 800bd96 <_dtoa_r+0xce>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd86:	b113      	cbz	r3, 800bd8e <_dtoa_r+0xc6>
 800bd88:	4b85      	ldr	r3, [pc, #532]	@ (800bfa0 <_dtoa_r+0x2d8>)
 800bd8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bfa4 <_dtoa_r+0x2dc>
 800bd92:	f000 bd36 	b.w	800c802 <_dtoa_r+0xb3a>
 800bd96:	ab14      	add	r3, sp, #80	@ 0x50
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	ab15      	add	r3, sp, #84	@ 0x54
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	4658      	mov	r0, fp
 800bda0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bda4:	f001 f97e 	bl	800d0a4 <__d2b>
 800bda8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bdac:	4681      	mov	r9, r0
 800bdae:	2e00      	cmp	r6, #0
 800bdb0:	d077      	beq.n	800bea2 <_dtoa_r+0x1da>
 800bdb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bdbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdc0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bdc4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bdc8:	9712      	str	r7, [sp, #72]	@ 0x48
 800bdca:	4619      	mov	r1, r3
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4b76      	ldr	r3, [pc, #472]	@ (800bfa8 <_dtoa_r+0x2e0>)
 800bdd0:	f7f4 fa3a 	bl	8000248 <__aeabi_dsub>
 800bdd4:	a368      	add	r3, pc, #416	@ (adr r3, 800bf78 <_dtoa_r+0x2b0>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f7f4 fbed 	bl	80005b8 <__aeabi_dmul>
 800bdde:	a368      	add	r3, pc, #416	@ (adr r3, 800bf80 <_dtoa_r+0x2b8>)
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	f7f4 fa32 	bl	800024c <__adddf3>
 800bde8:	4604      	mov	r4, r0
 800bdea:	4630      	mov	r0, r6
 800bdec:	460d      	mov	r5, r1
 800bdee:	f7f4 fb79 	bl	80004e4 <__aeabi_i2d>
 800bdf2:	a365      	add	r3, pc, #404	@ (adr r3, 800bf88 <_dtoa_r+0x2c0>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 fbde 	bl	80005b8 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4620      	mov	r0, r4
 800be02:	4629      	mov	r1, r5
 800be04:	f7f4 fa22 	bl	800024c <__adddf3>
 800be08:	4604      	mov	r4, r0
 800be0a:	460d      	mov	r5, r1
 800be0c:	f7f4 fe84 	bl	8000b18 <__aeabi_d2iz>
 800be10:	2200      	movs	r2, #0
 800be12:	4607      	mov	r7, r0
 800be14:	2300      	movs	r3, #0
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f4 fe3f 	bl	8000a9c <__aeabi_dcmplt>
 800be1e:	b140      	cbz	r0, 800be32 <_dtoa_r+0x16a>
 800be20:	4638      	mov	r0, r7
 800be22:	f7f4 fb5f 	bl	80004e4 <__aeabi_i2d>
 800be26:	4622      	mov	r2, r4
 800be28:	462b      	mov	r3, r5
 800be2a:	f7f4 fe2d 	bl	8000a88 <__aeabi_dcmpeq>
 800be2e:	b900      	cbnz	r0, 800be32 <_dtoa_r+0x16a>
 800be30:	3f01      	subs	r7, #1
 800be32:	2f16      	cmp	r7, #22
 800be34:	d853      	bhi.n	800bede <_dtoa_r+0x216>
 800be36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be3a:	4b5c      	ldr	r3, [pc, #368]	@ (800bfac <_dtoa_r+0x2e4>)
 800be3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f7f4 fe2a 	bl	8000a9c <__aeabi_dcmplt>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d04a      	beq.n	800bee2 <_dtoa_r+0x21a>
 800be4c:	2300      	movs	r3, #0
 800be4e:	3f01      	subs	r7, #1
 800be50:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be54:	1b9b      	subs	r3, r3, r6
 800be56:	1e5a      	subs	r2, r3, #1
 800be58:	bf46      	itte	mi
 800be5a:	f1c3 0801 	rsbmi	r8, r3, #1
 800be5e:	2300      	movmi	r3, #0
 800be60:	f04f 0800 	movpl.w	r8, #0
 800be64:	9209      	str	r2, [sp, #36]	@ 0x24
 800be66:	bf48      	it	mi
 800be68:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	db3b      	blt.n	800bee6 <_dtoa_r+0x21e>
 800be6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be70:	970e      	str	r7, [sp, #56]	@ 0x38
 800be72:	443b      	add	r3, r7
 800be74:	9309      	str	r3, [sp, #36]	@ 0x24
 800be76:	2300      	movs	r3, #0
 800be78:	930a      	str	r3, [sp, #40]	@ 0x28
 800be7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d866      	bhi.n	800bf4e <_dtoa_r+0x286>
 800be80:	2b05      	cmp	r3, #5
 800be82:	bfc4      	itt	gt
 800be84:	3b04      	subgt	r3, #4
 800be86:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800be88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be8a:	bfc8      	it	gt
 800be8c:	2400      	movgt	r4, #0
 800be8e:	f1a3 0302 	sub.w	r3, r3, #2
 800be92:	bfd8      	it	le
 800be94:	2401      	movle	r4, #1
 800be96:	2b03      	cmp	r3, #3
 800be98:	d864      	bhi.n	800bf64 <_dtoa_r+0x29c>
 800be9a:	e8df f003 	tbb	[pc, r3]
 800be9e:	382b      	.short	0x382b
 800bea0:	5636      	.short	0x5636
 800bea2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bea6:	441e      	add	r6, r3
 800bea8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800beac:	2b20      	cmp	r3, #32
 800beae:	bfc1      	itttt	gt
 800beb0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800beb4:	fa08 f803 	lslgt.w	r8, r8, r3
 800beb8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bebc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bec0:	bfd6      	itet	le
 800bec2:	f1c3 0320 	rsble	r3, r3, #32
 800bec6:	ea48 0003 	orrgt.w	r0, r8, r3
 800beca:	fa04 f003 	lslle.w	r0, r4, r3
 800bece:	f7f4 faf9 	bl	80004c4 <__aeabi_ui2d>
 800bed2:	2201      	movs	r2, #1
 800bed4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bed8:	3e01      	subs	r6, #1
 800beda:	9212      	str	r2, [sp, #72]	@ 0x48
 800bedc:	e775      	b.n	800bdca <_dtoa_r+0x102>
 800bede:	2301      	movs	r3, #1
 800bee0:	e7b6      	b.n	800be50 <_dtoa_r+0x188>
 800bee2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bee4:	e7b5      	b.n	800be52 <_dtoa_r+0x18a>
 800bee6:	427b      	negs	r3, r7
 800bee8:	930a      	str	r3, [sp, #40]	@ 0x28
 800beea:	2300      	movs	r3, #0
 800beec:	eba8 0807 	sub.w	r8, r8, r7
 800bef0:	930e      	str	r3, [sp, #56]	@ 0x38
 800bef2:	e7c2      	b.n	800be7a <_dtoa_r+0x1b2>
 800bef4:	2300      	movs	r3, #0
 800bef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bef8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800befa:	2b00      	cmp	r3, #0
 800befc:	dc35      	bgt.n	800bf6a <_dtoa_r+0x2a2>
 800befe:	2301      	movs	r3, #1
 800bf00:	461a      	mov	r2, r3
 800bf02:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf06:	9221      	str	r2, [sp, #132]	@ 0x84
 800bf08:	e00b      	b.n	800bf22 <_dtoa_r+0x25a>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e7f3      	b.n	800bef6 <_dtoa_r+0x22e>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf14:	18fb      	adds	r3, r7, r3
 800bf16:	9308      	str	r3, [sp, #32]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	9307      	str	r3, [sp, #28]
 800bf1e:	bfb8      	it	lt
 800bf20:	2301      	movlt	r3, #1
 800bf22:	2100      	movs	r1, #0
 800bf24:	2204      	movs	r2, #4
 800bf26:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf2a:	f102 0514 	add.w	r5, r2, #20
 800bf2e:	429d      	cmp	r5, r3
 800bf30:	d91f      	bls.n	800bf72 <_dtoa_r+0x2aa>
 800bf32:	6041      	str	r1, [r0, #4]
 800bf34:	4658      	mov	r0, fp
 800bf36:	f000 fd8d 	bl	800ca54 <_Balloc>
 800bf3a:	4682      	mov	sl, r0
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d139      	bne.n	800bfb4 <_dtoa_r+0x2ec>
 800bf40:	4602      	mov	r2, r0
 800bf42:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf46:	4b1a      	ldr	r3, [pc, #104]	@ (800bfb0 <_dtoa_r+0x2e8>)
 800bf48:	e6d2      	b.n	800bcf0 <_dtoa_r+0x28>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e7e0      	b.n	800bf10 <_dtoa_r+0x248>
 800bf4e:	2401      	movs	r4, #1
 800bf50:	2300      	movs	r3, #0
 800bf52:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bf54:	9320      	str	r3, [sp, #128]	@ 0x80
 800bf56:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf60:	2312      	movs	r3, #18
 800bf62:	e7d0      	b.n	800bf06 <_dtoa_r+0x23e>
 800bf64:	2301      	movs	r3, #1
 800bf66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf68:	e7f5      	b.n	800bf56 <_dtoa_r+0x28e>
 800bf6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf70:	e7d7      	b.n	800bf22 <_dtoa_r+0x25a>
 800bf72:	3101      	adds	r1, #1
 800bf74:	0052      	lsls	r2, r2, #1
 800bf76:	e7d8      	b.n	800bf2a <_dtoa_r+0x262>
 800bf78:	636f4361 	.word	0x636f4361
 800bf7c:	3fd287a7 	.word	0x3fd287a7
 800bf80:	8b60c8b3 	.word	0x8b60c8b3
 800bf84:	3fc68a28 	.word	0x3fc68a28
 800bf88:	509f79fb 	.word	0x509f79fb
 800bf8c:	3fd34413 	.word	0x3fd34413
 800bf90:	0800e593 	.word	0x0800e593
 800bf94:	0800e5aa 	.word	0x0800e5aa
 800bf98:	7ff00000 	.word	0x7ff00000
 800bf9c:	0800e58f 	.word	0x0800e58f
 800bfa0:	0800e563 	.word	0x0800e563
 800bfa4:	0800e562 	.word	0x0800e562
 800bfa8:	3ff80000 	.word	0x3ff80000
 800bfac:	0800e6a0 	.word	0x0800e6a0
 800bfb0:	0800e602 	.word	0x0800e602
 800bfb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bfb8:	6018      	str	r0, [r3, #0]
 800bfba:	9b07      	ldr	r3, [sp, #28]
 800bfbc:	2b0e      	cmp	r3, #14
 800bfbe:	f200 80a4 	bhi.w	800c10a <_dtoa_r+0x442>
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	f000 80a1 	beq.w	800c10a <_dtoa_r+0x442>
 800bfc8:	2f00      	cmp	r7, #0
 800bfca:	dd33      	ble.n	800c034 <_dtoa_r+0x36c>
 800bfcc:	4b86      	ldr	r3, [pc, #536]	@ (800c1e8 <_dtoa_r+0x520>)
 800bfce:	f007 020f 	and.w	r2, r7, #15
 800bfd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfd6:	05f8      	lsls	r0, r7, #23
 800bfd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfdc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bfe0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bfe4:	d516      	bpl.n	800c014 <_dtoa_r+0x34c>
 800bfe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfea:	4b80      	ldr	r3, [pc, #512]	@ (800c1ec <_dtoa_r+0x524>)
 800bfec:	2603      	movs	r6, #3
 800bfee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bff2:	f7f4 fc0b 	bl	800080c <__aeabi_ddiv>
 800bff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bffa:	f004 040f 	and.w	r4, r4, #15
 800bffe:	4d7b      	ldr	r5, [pc, #492]	@ (800c1ec <_dtoa_r+0x524>)
 800c000:	b954      	cbnz	r4, 800c018 <_dtoa_r+0x350>
 800c002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c00a:	f7f4 fbff 	bl	800080c <__aeabi_ddiv>
 800c00e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c012:	e028      	b.n	800c066 <_dtoa_r+0x39e>
 800c014:	2602      	movs	r6, #2
 800c016:	e7f2      	b.n	800bffe <_dtoa_r+0x336>
 800c018:	07e1      	lsls	r1, r4, #31
 800c01a:	d508      	bpl.n	800c02e <_dtoa_r+0x366>
 800c01c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c020:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c024:	f7f4 fac8 	bl	80005b8 <__aeabi_dmul>
 800c028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c02c:	3601      	adds	r6, #1
 800c02e:	1064      	asrs	r4, r4, #1
 800c030:	3508      	adds	r5, #8
 800c032:	e7e5      	b.n	800c000 <_dtoa_r+0x338>
 800c034:	f000 80d2 	beq.w	800c1dc <_dtoa_r+0x514>
 800c038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c03c:	427c      	negs	r4, r7
 800c03e:	4b6a      	ldr	r3, [pc, #424]	@ (800c1e8 <_dtoa_r+0x520>)
 800c040:	f004 020f 	and.w	r2, r4, #15
 800c044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	f7f4 fab4 	bl	80005b8 <__aeabi_dmul>
 800c050:	2602      	movs	r6, #2
 800c052:	2300      	movs	r3, #0
 800c054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c058:	4d64      	ldr	r5, [pc, #400]	@ (800c1ec <_dtoa_r+0x524>)
 800c05a:	1124      	asrs	r4, r4, #4
 800c05c:	2c00      	cmp	r4, #0
 800c05e:	f040 80b2 	bne.w	800c1c6 <_dtoa_r+0x4fe>
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1d3      	bne.n	800c00e <_dtoa_r+0x346>
 800c066:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c06a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 80b7 	beq.w	800c1e0 <_dtoa_r+0x518>
 800c072:	2200      	movs	r2, #0
 800c074:	4620      	mov	r0, r4
 800c076:	4629      	mov	r1, r5
 800c078:	4b5d      	ldr	r3, [pc, #372]	@ (800c1f0 <_dtoa_r+0x528>)
 800c07a:	f7f4 fd0f 	bl	8000a9c <__aeabi_dcmplt>
 800c07e:	2800      	cmp	r0, #0
 800c080:	f000 80ae 	beq.w	800c1e0 <_dtoa_r+0x518>
 800c084:	9b07      	ldr	r3, [sp, #28]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 80aa 	beq.w	800c1e0 <_dtoa_r+0x518>
 800c08c:	9b08      	ldr	r3, [sp, #32]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	dd37      	ble.n	800c102 <_dtoa_r+0x43a>
 800c092:	1e7b      	subs	r3, r7, #1
 800c094:	4620      	mov	r0, r4
 800c096:	9304      	str	r3, [sp, #16]
 800c098:	2200      	movs	r2, #0
 800c09a:	4629      	mov	r1, r5
 800c09c:	4b55      	ldr	r3, [pc, #340]	@ (800c1f4 <_dtoa_r+0x52c>)
 800c09e:	f7f4 fa8b 	bl	80005b8 <__aeabi_dmul>
 800c0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0a6:	9c08      	ldr	r4, [sp, #32]
 800c0a8:	3601      	adds	r6, #1
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7f4 fa1a 	bl	80004e4 <__aeabi_i2d>
 800c0b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0b4:	f7f4 fa80 	bl	80005b8 <__aeabi_dmul>
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4b4f      	ldr	r3, [pc, #316]	@ (800c1f8 <_dtoa_r+0x530>)
 800c0bc:	f7f4 f8c6 	bl	800024c <__adddf3>
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c0c6:	2c00      	cmp	r4, #0
 800c0c8:	f040 809a 	bne.w	800c200 <_dtoa_r+0x538>
 800c0cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4b4a      	ldr	r3, [pc, #296]	@ (800c1fc <_dtoa_r+0x534>)
 800c0d4:	f7f4 f8b8 	bl	8000248 <__aeabi_dsub>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	4633      	mov	r3, r6
 800c0e4:	f7f4 fcf8 	bl	8000ad8 <__aeabi_dcmpgt>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	f040 828e 	bne.w	800c60a <_dtoa_r+0x942>
 800c0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0f2:	462a      	mov	r2, r5
 800c0f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0f8:	f7f4 fcd0 	bl	8000a9c <__aeabi_dcmplt>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	f040 8127 	bne.w	800c350 <_dtoa_r+0x688>
 800c102:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c106:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c10a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f2c0 8163 	blt.w	800c3d8 <_dtoa_r+0x710>
 800c112:	2f0e      	cmp	r7, #14
 800c114:	f300 8160 	bgt.w	800c3d8 <_dtoa_r+0x710>
 800c118:	4b33      	ldr	r3, [pc, #204]	@ (800c1e8 <_dtoa_r+0x520>)
 800c11a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c11e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c122:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c126:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c128:	2b00      	cmp	r3, #0
 800c12a:	da03      	bge.n	800c134 <_dtoa_r+0x46c>
 800c12c:	9b07      	ldr	r3, [sp, #28]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f340 8100 	ble.w	800c334 <_dtoa_r+0x66c>
 800c134:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c138:	4656      	mov	r6, sl
 800c13a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c13e:	4620      	mov	r0, r4
 800c140:	4629      	mov	r1, r5
 800c142:	f7f4 fb63 	bl	800080c <__aeabi_ddiv>
 800c146:	f7f4 fce7 	bl	8000b18 <__aeabi_d2iz>
 800c14a:	4680      	mov	r8, r0
 800c14c:	f7f4 f9ca 	bl	80004e4 <__aeabi_i2d>
 800c150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c154:	f7f4 fa30 	bl	80005b8 <__aeabi_dmul>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4620      	mov	r0, r4
 800c15e:	4629      	mov	r1, r5
 800c160:	f7f4 f872 	bl	8000248 <__aeabi_dsub>
 800c164:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c168:	9d07      	ldr	r5, [sp, #28]
 800c16a:	f806 4b01 	strb.w	r4, [r6], #1
 800c16e:	eba6 040a 	sub.w	r4, r6, sl
 800c172:	42a5      	cmp	r5, r4
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	f040 8116 	bne.w	800c3a8 <_dtoa_r+0x6e0>
 800c17c:	f7f4 f866 	bl	800024c <__adddf3>
 800c180:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c184:	4604      	mov	r4, r0
 800c186:	460d      	mov	r5, r1
 800c188:	f7f4 fca6 	bl	8000ad8 <__aeabi_dcmpgt>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f040 80f8 	bne.w	800c382 <_dtoa_r+0x6ba>
 800c192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c196:	4620      	mov	r0, r4
 800c198:	4629      	mov	r1, r5
 800c19a:	f7f4 fc75 	bl	8000a88 <__aeabi_dcmpeq>
 800c19e:	b118      	cbz	r0, 800c1a8 <_dtoa_r+0x4e0>
 800c1a0:	f018 0f01 	tst.w	r8, #1
 800c1a4:	f040 80ed 	bne.w	800c382 <_dtoa_r+0x6ba>
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	4658      	mov	r0, fp
 800c1ac:	f000 fc92 	bl	800cad4 <_Bfree>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	7033      	strb	r3, [r6, #0]
 800c1b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c1b6:	3701      	adds	r7, #1
 800c1b8:	601f      	str	r7, [r3, #0]
 800c1ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f000 8320 	beq.w	800c802 <_dtoa_r+0xb3a>
 800c1c2:	601e      	str	r6, [r3, #0]
 800c1c4:	e31d      	b.n	800c802 <_dtoa_r+0xb3a>
 800c1c6:	07e2      	lsls	r2, r4, #31
 800c1c8:	d505      	bpl.n	800c1d6 <_dtoa_r+0x50e>
 800c1ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1ce:	f7f4 f9f3 	bl	80005b8 <__aeabi_dmul>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	3601      	adds	r6, #1
 800c1d6:	1064      	asrs	r4, r4, #1
 800c1d8:	3508      	adds	r5, #8
 800c1da:	e73f      	b.n	800c05c <_dtoa_r+0x394>
 800c1dc:	2602      	movs	r6, #2
 800c1de:	e742      	b.n	800c066 <_dtoa_r+0x39e>
 800c1e0:	9c07      	ldr	r4, [sp, #28]
 800c1e2:	9704      	str	r7, [sp, #16]
 800c1e4:	e761      	b.n	800c0aa <_dtoa_r+0x3e2>
 800c1e6:	bf00      	nop
 800c1e8:	0800e6a0 	.word	0x0800e6a0
 800c1ec:	0800e678 	.word	0x0800e678
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	40240000 	.word	0x40240000
 800c1f8:	401c0000 	.word	0x401c0000
 800c1fc:	40140000 	.word	0x40140000
 800c200:	4b70      	ldr	r3, [pc, #448]	@ (800c3c4 <_dtoa_r+0x6fc>)
 800c202:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c204:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c208:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c20c:	4454      	add	r4, sl
 800c20e:	2900      	cmp	r1, #0
 800c210:	d045      	beq.n	800c29e <_dtoa_r+0x5d6>
 800c212:	2000      	movs	r0, #0
 800c214:	496c      	ldr	r1, [pc, #432]	@ (800c3c8 <_dtoa_r+0x700>)
 800c216:	f7f4 faf9 	bl	800080c <__aeabi_ddiv>
 800c21a:	4633      	mov	r3, r6
 800c21c:	462a      	mov	r2, r5
 800c21e:	f7f4 f813 	bl	8000248 <__aeabi_dsub>
 800c222:	4656      	mov	r6, sl
 800c224:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c22c:	f7f4 fc74 	bl	8000b18 <__aeabi_d2iz>
 800c230:	4605      	mov	r5, r0
 800c232:	f7f4 f957 	bl	80004e4 <__aeabi_i2d>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c23e:	f7f4 f803 	bl	8000248 <__aeabi_dsub>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	3530      	adds	r5, #48	@ 0x30
 800c248:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c24c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c250:	f806 5b01 	strb.w	r5, [r6], #1
 800c254:	f7f4 fc22 	bl	8000a9c <__aeabi_dcmplt>
 800c258:	2800      	cmp	r0, #0
 800c25a:	d163      	bne.n	800c324 <_dtoa_r+0x65c>
 800c25c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c260:	2000      	movs	r0, #0
 800c262:	495a      	ldr	r1, [pc, #360]	@ (800c3cc <_dtoa_r+0x704>)
 800c264:	f7f3 fff0 	bl	8000248 <__aeabi_dsub>
 800c268:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c26c:	f7f4 fc16 	bl	8000a9c <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	f040 8087 	bne.w	800c384 <_dtoa_r+0x6bc>
 800c276:	42a6      	cmp	r6, r4
 800c278:	f43f af43 	beq.w	800c102 <_dtoa_r+0x43a>
 800c27c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c280:	2200      	movs	r2, #0
 800c282:	4b53      	ldr	r3, [pc, #332]	@ (800c3d0 <_dtoa_r+0x708>)
 800c284:	f7f4 f998 	bl	80005b8 <__aeabi_dmul>
 800c288:	2200      	movs	r2, #0
 800c28a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c292:	4b4f      	ldr	r3, [pc, #316]	@ (800c3d0 <_dtoa_r+0x708>)
 800c294:	f7f4 f990 	bl	80005b8 <__aeabi_dmul>
 800c298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c29c:	e7c4      	b.n	800c228 <_dtoa_r+0x560>
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f7f4 f989 	bl	80005b8 <__aeabi_dmul>
 800c2a6:	4656      	mov	r6, sl
 800c2a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2b2:	f7f4 fc31 	bl	8000b18 <__aeabi_d2iz>
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	f7f4 f914 	bl	80004e4 <__aeabi_i2d>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2c4:	f7f3 ffc0 	bl	8000248 <__aeabi_dsub>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	3530      	adds	r5, #48	@ 0x30
 800c2ce:	f806 5b01 	strb.w	r5, [r6], #1
 800c2d2:	42a6      	cmp	r6, r4
 800c2d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2d8:	f04f 0200 	mov.w	r2, #0
 800c2dc:	d124      	bne.n	800c328 <_dtoa_r+0x660>
 800c2de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2e2:	4b39      	ldr	r3, [pc, #228]	@ (800c3c8 <_dtoa_r+0x700>)
 800c2e4:	f7f3 ffb2 	bl	800024c <__adddf3>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2f0:	f7f4 fbf2 	bl	8000ad8 <__aeabi_dcmpgt>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d145      	bne.n	800c384 <_dtoa_r+0x6bc>
 800c2f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	4932      	ldr	r1, [pc, #200]	@ (800c3c8 <_dtoa_r+0x700>)
 800c300:	f7f3 ffa2 	bl	8000248 <__aeabi_dsub>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c30c:	f7f4 fbc6 	bl	8000a9c <__aeabi_dcmplt>
 800c310:	2800      	cmp	r0, #0
 800c312:	f43f aef6 	beq.w	800c102 <_dtoa_r+0x43a>
 800c316:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c318:	1e73      	subs	r3, r6, #1
 800c31a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c31c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c320:	2b30      	cmp	r3, #48	@ 0x30
 800c322:	d0f8      	beq.n	800c316 <_dtoa_r+0x64e>
 800c324:	9f04      	ldr	r7, [sp, #16]
 800c326:	e73f      	b.n	800c1a8 <_dtoa_r+0x4e0>
 800c328:	4b29      	ldr	r3, [pc, #164]	@ (800c3d0 <_dtoa_r+0x708>)
 800c32a:	f7f4 f945 	bl	80005b8 <__aeabi_dmul>
 800c32e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c332:	e7bc      	b.n	800c2ae <_dtoa_r+0x5e6>
 800c334:	d10c      	bne.n	800c350 <_dtoa_r+0x688>
 800c336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c33a:	2200      	movs	r2, #0
 800c33c:	4b25      	ldr	r3, [pc, #148]	@ (800c3d4 <_dtoa_r+0x70c>)
 800c33e:	f7f4 f93b 	bl	80005b8 <__aeabi_dmul>
 800c342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c346:	f7f4 fbbd 	bl	8000ac4 <__aeabi_dcmpge>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	f000 815b 	beq.w	800c606 <_dtoa_r+0x93e>
 800c350:	2400      	movs	r4, #0
 800c352:	4625      	mov	r5, r4
 800c354:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c356:	4656      	mov	r6, sl
 800c358:	43db      	mvns	r3, r3
 800c35a:	9304      	str	r3, [sp, #16]
 800c35c:	2700      	movs	r7, #0
 800c35e:	4621      	mov	r1, r4
 800c360:	4658      	mov	r0, fp
 800c362:	f000 fbb7 	bl	800cad4 <_Bfree>
 800c366:	2d00      	cmp	r5, #0
 800c368:	d0dc      	beq.n	800c324 <_dtoa_r+0x65c>
 800c36a:	b12f      	cbz	r7, 800c378 <_dtoa_r+0x6b0>
 800c36c:	42af      	cmp	r7, r5
 800c36e:	d003      	beq.n	800c378 <_dtoa_r+0x6b0>
 800c370:	4639      	mov	r1, r7
 800c372:	4658      	mov	r0, fp
 800c374:	f000 fbae 	bl	800cad4 <_Bfree>
 800c378:	4629      	mov	r1, r5
 800c37a:	4658      	mov	r0, fp
 800c37c:	f000 fbaa 	bl	800cad4 <_Bfree>
 800c380:	e7d0      	b.n	800c324 <_dtoa_r+0x65c>
 800c382:	9704      	str	r7, [sp, #16]
 800c384:	4633      	mov	r3, r6
 800c386:	461e      	mov	r6, r3
 800c388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c38c:	2a39      	cmp	r2, #57	@ 0x39
 800c38e:	d107      	bne.n	800c3a0 <_dtoa_r+0x6d8>
 800c390:	459a      	cmp	sl, r3
 800c392:	d1f8      	bne.n	800c386 <_dtoa_r+0x6be>
 800c394:	9a04      	ldr	r2, [sp, #16]
 800c396:	3201      	adds	r2, #1
 800c398:	9204      	str	r2, [sp, #16]
 800c39a:	2230      	movs	r2, #48	@ 0x30
 800c39c:	f88a 2000 	strb.w	r2, [sl]
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e7bd      	b.n	800c324 <_dtoa_r+0x65c>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4b09      	ldr	r3, [pc, #36]	@ (800c3d0 <_dtoa_r+0x708>)
 800c3ac:	f7f4 f904 	bl	80005b8 <__aeabi_dmul>
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	460d      	mov	r5, r1
 800c3b8:	f7f4 fb66 	bl	8000a88 <__aeabi_dcmpeq>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	f43f aebc 	beq.w	800c13a <_dtoa_r+0x472>
 800c3c2:	e6f1      	b.n	800c1a8 <_dtoa_r+0x4e0>
 800c3c4:	0800e6a0 	.word	0x0800e6a0
 800c3c8:	3fe00000 	.word	0x3fe00000
 800c3cc:	3ff00000 	.word	0x3ff00000
 800c3d0:	40240000 	.word	0x40240000
 800c3d4:	40140000 	.word	0x40140000
 800c3d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c3da:	2a00      	cmp	r2, #0
 800c3dc:	f000 80db 	beq.w	800c596 <_dtoa_r+0x8ce>
 800c3e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c3e2:	2a01      	cmp	r2, #1
 800c3e4:	f300 80bf 	bgt.w	800c566 <_dtoa_r+0x89e>
 800c3e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3ea:	2a00      	cmp	r2, #0
 800c3ec:	f000 80b7 	beq.w	800c55e <_dtoa_r+0x896>
 800c3f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3f4:	4646      	mov	r6, r8
 800c3f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	441a      	add	r2, r3
 800c3fe:	4658      	mov	r0, fp
 800c400:	4498      	add	r8, r3
 800c402:	9209      	str	r2, [sp, #36]	@ 0x24
 800c404:	f000 fc1a 	bl	800cc3c <__i2b>
 800c408:	4605      	mov	r5, r0
 800c40a:	b15e      	cbz	r6, 800c424 <_dtoa_r+0x75c>
 800c40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c40e:	2b00      	cmp	r3, #0
 800c410:	dd08      	ble.n	800c424 <_dtoa_r+0x75c>
 800c412:	42b3      	cmp	r3, r6
 800c414:	bfa8      	it	ge
 800c416:	4633      	movge	r3, r6
 800c418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c41a:	eba8 0803 	sub.w	r8, r8, r3
 800c41e:	1af6      	subs	r6, r6, r3
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	9309      	str	r3, [sp, #36]	@ 0x24
 800c424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c426:	b1f3      	cbz	r3, 800c466 <_dtoa_r+0x79e>
 800c428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	f000 80b7 	beq.w	800c59e <_dtoa_r+0x8d6>
 800c430:	b18c      	cbz	r4, 800c456 <_dtoa_r+0x78e>
 800c432:	4629      	mov	r1, r5
 800c434:	4622      	mov	r2, r4
 800c436:	4658      	mov	r0, fp
 800c438:	f000 fcbe 	bl	800cdb8 <__pow5mult>
 800c43c:	464a      	mov	r2, r9
 800c43e:	4601      	mov	r1, r0
 800c440:	4605      	mov	r5, r0
 800c442:	4658      	mov	r0, fp
 800c444:	f000 fc10 	bl	800cc68 <__multiply>
 800c448:	4649      	mov	r1, r9
 800c44a:	9004      	str	r0, [sp, #16]
 800c44c:	4658      	mov	r0, fp
 800c44e:	f000 fb41 	bl	800cad4 <_Bfree>
 800c452:	9b04      	ldr	r3, [sp, #16]
 800c454:	4699      	mov	r9, r3
 800c456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c458:	1b1a      	subs	r2, r3, r4
 800c45a:	d004      	beq.n	800c466 <_dtoa_r+0x79e>
 800c45c:	4649      	mov	r1, r9
 800c45e:	4658      	mov	r0, fp
 800c460:	f000 fcaa 	bl	800cdb8 <__pow5mult>
 800c464:	4681      	mov	r9, r0
 800c466:	2101      	movs	r1, #1
 800c468:	4658      	mov	r0, fp
 800c46a:	f000 fbe7 	bl	800cc3c <__i2b>
 800c46e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c470:	4604      	mov	r4, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 81c9 	beq.w	800c80a <_dtoa_r+0xb42>
 800c478:	461a      	mov	r2, r3
 800c47a:	4601      	mov	r1, r0
 800c47c:	4658      	mov	r0, fp
 800c47e:	f000 fc9b 	bl	800cdb8 <__pow5mult>
 800c482:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c484:	4604      	mov	r4, r0
 800c486:	2b01      	cmp	r3, #1
 800c488:	f300 808f 	bgt.w	800c5aa <_dtoa_r+0x8e2>
 800c48c:	9b02      	ldr	r3, [sp, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f040 8087 	bne.w	800c5a2 <_dtoa_r+0x8da>
 800c494:	9b03      	ldr	r3, [sp, #12]
 800c496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f040 8083 	bne.w	800c5a6 <_dtoa_r+0x8de>
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4a6:	0d1b      	lsrs	r3, r3, #20
 800c4a8:	051b      	lsls	r3, r3, #20
 800c4aa:	b12b      	cbz	r3, 800c4b8 <_dtoa_r+0x7f0>
 800c4ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ae:	f108 0801 	add.w	r8, r8, #1
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 81aa 	beq.w	800c816 <_dtoa_r+0xb4e>
 800c4c2:	6923      	ldr	r3, [r4, #16]
 800c4c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4c8:	6918      	ldr	r0, [r3, #16]
 800c4ca:	f000 fb6b 	bl	800cba4 <__hi0bits>
 800c4ce:	f1c0 0020 	rsb	r0, r0, #32
 800c4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4d4:	4418      	add	r0, r3
 800c4d6:	f010 001f 	ands.w	r0, r0, #31
 800c4da:	d071      	beq.n	800c5c0 <_dtoa_r+0x8f8>
 800c4dc:	f1c0 0320 	rsb	r3, r0, #32
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	dd65      	ble.n	800c5b0 <_dtoa_r+0x8e8>
 800c4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e6:	f1c0 001c 	rsb	r0, r0, #28
 800c4ea:	4403      	add	r3, r0
 800c4ec:	4480      	add	r8, r0
 800c4ee:	4406      	add	r6, r0
 800c4f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4f2:	f1b8 0f00 	cmp.w	r8, #0
 800c4f6:	dd05      	ble.n	800c504 <_dtoa_r+0x83c>
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	4642      	mov	r2, r8
 800c4fc:	4658      	mov	r0, fp
 800c4fe:	f000 fcb5 	bl	800ce6c <__lshift>
 800c502:	4681      	mov	r9, r0
 800c504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c506:	2b00      	cmp	r3, #0
 800c508:	dd05      	ble.n	800c516 <_dtoa_r+0x84e>
 800c50a:	4621      	mov	r1, r4
 800c50c:	461a      	mov	r2, r3
 800c50e:	4658      	mov	r0, fp
 800c510:	f000 fcac 	bl	800ce6c <__lshift>
 800c514:	4604      	mov	r4, r0
 800c516:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d053      	beq.n	800c5c4 <_dtoa_r+0x8fc>
 800c51c:	4621      	mov	r1, r4
 800c51e:	4648      	mov	r0, r9
 800c520:	f000 fd10 	bl	800cf44 <__mcmp>
 800c524:	2800      	cmp	r0, #0
 800c526:	da4d      	bge.n	800c5c4 <_dtoa_r+0x8fc>
 800c528:	1e7b      	subs	r3, r7, #1
 800c52a:	4649      	mov	r1, r9
 800c52c:	9304      	str	r3, [sp, #16]
 800c52e:	220a      	movs	r2, #10
 800c530:	2300      	movs	r3, #0
 800c532:	4658      	mov	r0, fp
 800c534:	f000 faf0 	bl	800cb18 <__multadd>
 800c538:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c53a:	4681      	mov	r9, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 816c 	beq.w	800c81a <_dtoa_r+0xb52>
 800c542:	2300      	movs	r3, #0
 800c544:	4629      	mov	r1, r5
 800c546:	220a      	movs	r2, #10
 800c548:	4658      	mov	r0, fp
 800c54a:	f000 fae5 	bl	800cb18 <__multadd>
 800c54e:	9b08      	ldr	r3, [sp, #32]
 800c550:	4605      	mov	r5, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	dc61      	bgt.n	800c61a <_dtoa_r+0x952>
 800c556:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c558:	2b02      	cmp	r3, #2
 800c55a:	dc3b      	bgt.n	800c5d4 <_dtoa_r+0x90c>
 800c55c:	e05d      	b.n	800c61a <_dtoa_r+0x952>
 800c55e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c560:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c564:	e746      	b.n	800c3f4 <_dtoa_r+0x72c>
 800c566:	9b07      	ldr	r3, [sp, #28]
 800c568:	1e5c      	subs	r4, r3, #1
 800c56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c56c:	42a3      	cmp	r3, r4
 800c56e:	bfbf      	itttt	lt
 800c570:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c572:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c574:	1ae3      	sublt	r3, r4, r3
 800c576:	18d2      	addlt	r2, r2, r3
 800c578:	bfa8      	it	ge
 800c57a:	1b1c      	subge	r4, r3, r4
 800c57c:	9b07      	ldr	r3, [sp, #28]
 800c57e:	bfbe      	ittt	lt
 800c580:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c582:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c584:	2400      	movlt	r4, #0
 800c586:	2b00      	cmp	r3, #0
 800c588:	bfb5      	itete	lt
 800c58a:	eba8 0603 	sublt.w	r6, r8, r3
 800c58e:	4646      	movge	r6, r8
 800c590:	2300      	movlt	r3, #0
 800c592:	9b07      	ldrge	r3, [sp, #28]
 800c594:	e730      	b.n	800c3f8 <_dtoa_r+0x730>
 800c596:	4646      	mov	r6, r8
 800c598:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c59a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c59c:	e735      	b.n	800c40a <_dtoa_r+0x742>
 800c59e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5a0:	e75c      	b.n	800c45c <_dtoa_r+0x794>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e788      	b.n	800c4b8 <_dtoa_r+0x7f0>
 800c5a6:	9b02      	ldr	r3, [sp, #8]
 800c5a8:	e786      	b.n	800c4b8 <_dtoa_r+0x7f0>
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ae:	e788      	b.n	800c4c2 <_dtoa_r+0x7fa>
 800c5b0:	d09f      	beq.n	800c4f2 <_dtoa_r+0x82a>
 800c5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5b4:	331c      	adds	r3, #28
 800c5b6:	441a      	add	r2, r3
 800c5b8:	4498      	add	r8, r3
 800c5ba:	441e      	add	r6, r3
 800c5bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5be:	e798      	b.n	800c4f2 <_dtoa_r+0x82a>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	e7f6      	b.n	800c5b2 <_dtoa_r+0x8ea>
 800c5c4:	9b07      	ldr	r3, [sp, #28]
 800c5c6:	9704      	str	r7, [sp, #16]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dc20      	bgt.n	800c60e <_dtoa_r+0x946>
 800c5cc:	9308      	str	r3, [sp, #32]
 800c5ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	dd1e      	ble.n	800c612 <_dtoa_r+0x94a>
 800c5d4:	9b08      	ldr	r3, [sp, #32]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f47f aebc 	bne.w	800c354 <_dtoa_r+0x68c>
 800c5dc:	4621      	mov	r1, r4
 800c5de:	2205      	movs	r2, #5
 800c5e0:	4658      	mov	r0, fp
 800c5e2:	f000 fa99 	bl	800cb18 <__multadd>
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	4648      	mov	r0, r9
 800c5ec:	f000 fcaa 	bl	800cf44 <__mcmp>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f77f aeaf 	ble.w	800c354 <_dtoa_r+0x68c>
 800c5f6:	2331      	movs	r3, #49	@ 0x31
 800c5f8:	4656      	mov	r6, sl
 800c5fa:	f806 3b01 	strb.w	r3, [r6], #1
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	3301      	adds	r3, #1
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	e6aa      	b.n	800c35c <_dtoa_r+0x694>
 800c606:	9c07      	ldr	r4, [sp, #28]
 800c608:	9704      	str	r7, [sp, #16]
 800c60a:	4625      	mov	r5, r4
 800c60c:	e7f3      	b.n	800c5f6 <_dtoa_r+0x92e>
 800c60e:	9b07      	ldr	r3, [sp, #28]
 800c610:	9308      	str	r3, [sp, #32]
 800c612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c614:	2b00      	cmp	r3, #0
 800c616:	f000 8104 	beq.w	800c822 <_dtoa_r+0xb5a>
 800c61a:	2e00      	cmp	r6, #0
 800c61c:	dd05      	ble.n	800c62a <_dtoa_r+0x962>
 800c61e:	4629      	mov	r1, r5
 800c620:	4632      	mov	r2, r6
 800c622:	4658      	mov	r0, fp
 800c624:	f000 fc22 	bl	800ce6c <__lshift>
 800c628:	4605      	mov	r5, r0
 800c62a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d05a      	beq.n	800c6e6 <_dtoa_r+0xa1e>
 800c630:	4658      	mov	r0, fp
 800c632:	6869      	ldr	r1, [r5, #4]
 800c634:	f000 fa0e 	bl	800ca54 <_Balloc>
 800c638:	4606      	mov	r6, r0
 800c63a:	b928      	cbnz	r0, 800c648 <_dtoa_r+0x980>
 800c63c:	4602      	mov	r2, r0
 800c63e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c642:	4b83      	ldr	r3, [pc, #524]	@ (800c850 <_dtoa_r+0xb88>)
 800c644:	f7ff bb54 	b.w	800bcf0 <_dtoa_r+0x28>
 800c648:	692a      	ldr	r2, [r5, #16]
 800c64a:	f105 010c 	add.w	r1, r5, #12
 800c64e:	3202      	adds	r2, #2
 800c650:	0092      	lsls	r2, r2, #2
 800c652:	300c      	adds	r0, #12
 800c654:	f7ff fa9f 	bl	800bb96 <memcpy>
 800c658:	2201      	movs	r2, #1
 800c65a:	4631      	mov	r1, r6
 800c65c:	4658      	mov	r0, fp
 800c65e:	f000 fc05 	bl	800ce6c <__lshift>
 800c662:	462f      	mov	r7, r5
 800c664:	4605      	mov	r5, r0
 800c666:	f10a 0301 	add.w	r3, sl, #1
 800c66a:	9307      	str	r3, [sp, #28]
 800c66c:	9b08      	ldr	r3, [sp, #32]
 800c66e:	4453      	add	r3, sl
 800c670:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c672:	9b02      	ldr	r3, [sp, #8]
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	930a      	str	r3, [sp, #40]	@ 0x28
 800c67a:	9b07      	ldr	r3, [sp, #28]
 800c67c:	4621      	mov	r1, r4
 800c67e:	3b01      	subs	r3, #1
 800c680:	4648      	mov	r0, r9
 800c682:	9302      	str	r3, [sp, #8]
 800c684:	f7ff fa95 	bl	800bbb2 <quorem>
 800c688:	4639      	mov	r1, r7
 800c68a:	9008      	str	r0, [sp, #32]
 800c68c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c690:	4648      	mov	r0, r9
 800c692:	f000 fc57 	bl	800cf44 <__mcmp>
 800c696:	462a      	mov	r2, r5
 800c698:	9009      	str	r0, [sp, #36]	@ 0x24
 800c69a:	4621      	mov	r1, r4
 800c69c:	4658      	mov	r0, fp
 800c69e:	f000 fc6d 	bl	800cf7c <__mdiff>
 800c6a2:	68c2      	ldr	r2, [r0, #12]
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	bb02      	cbnz	r2, 800c6ea <_dtoa_r+0xa22>
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	4648      	mov	r0, r9
 800c6ac:	f000 fc4a 	bl	800cf44 <__mcmp>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4658      	mov	r0, fp
 800c6b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6b8:	f000 fa0c 	bl	800cad4 <_Bfree>
 800c6bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6c0:	9e07      	ldr	r6, [sp, #28]
 800c6c2:	ea43 0102 	orr.w	r1, r3, r2
 800c6c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6c8:	4319      	orrs	r1, r3
 800c6ca:	d110      	bne.n	800c6ee <_dtoa_r+0xa26>
 800c6cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c6d0:	d029      	beq.n	800c726 <_dtoa_r+0xa5e>
 800c6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dd02      	ble.n	800c6de <_dtoa_r+0xa16>
 800c6d8:	9b08      	ldr	r3, [sp, #32]
 800c6da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c6de:	9b02      	ldr	r3, [sp, #8]
 800c6e0:	f883 8000 	strb.w	r8, [r3]
 800c6e4:	e63b      	b.n	800c35e <_dtoa_r+0x696>
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	e7bb      	b.n	800c662 <_dtoa_r+0x99a>
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	e7e1      	b.n	800c6b2 <_dtoa_r+0x9ea>
 800c6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	db04      	blt.n	800c6fe <_dtoa_r+0xa36>
 800c6f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c6f6:	430b      	orrs	r3, r1
 800c6f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6fa:	430b      	orrs	r3, r1
 800c6fc:	d120      	bne.n	800c740 <_dtoa_r+0xa78>
 800c6fe:	2a00      	cmp	r2, #0
 800c700:	dded      	ble.n	800c6de <_dtoa_r+0xa16>
 800c702:	4649      	mov	r1, r9
 800c704:	2201      	movs	r2, #1
 800c706:	4658      	mov	r0, fp
 800c708:	f000 fbb0 	bl	800ce6c <__lshift>
 800c70c:	4621      	mov	r1, r4
 800c70e:	4681      	mov	r9, r0
 800c710:	f000 fc18 	bl	800cf44 <__mcmp>
 800c714:	2800      	cmp	r0, #0
 800c716:	dc03      	bgt.n	800c720 <_dtoa_r+0xa58>
 800c718:	d1e1      	bne.n	800c6de <_dtoa_r+0xa16>
 800c71a:	f018 0f01 	tst.w	r8, #1
 800c71e:	d0de      	beq.n	800c6de <_dtoa_r+0xa16>
 800c720:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c724:	d1d8      	bne.n	800c6d8 <_dtoa_r+0xa10>
 800c726:	2339      	movs	r3, #57	@ 0x39
 800c728:	9a02      	ldr	r2, [sp, #8]
 800c72a:	7013      	strb	r3, [r2, #0]
 800c72c:	4633      	mov	r3, r6
 800c72e:	461e      	mov	r6, r3
 800c730:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c734:	3b01      	subs	r3, #1
 800c736:	2a39      	cmp	r2, #57	@ 0x39
 800c738:	d052      	beq.n	800c7e0 <_dtoa_r+0xb18>
 800c73a:	3201      	adds	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e60e      	b.n	800c35e <_dtoa_r+0x696>
 800c740:	2a00      	cmp	r2, #0
 800c742:	dd07      	ble.n	800c754 <_dtoa_r+0xa8c>
 800c744:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c748:	d0ed      	beq.n	800c726 <_dtoa_r+0xa5e>
 800c74a:	9a02      	ldr	r2, [sp, #8]
 800c74c:	f108 0301 	add.w	r3, r8, #1
 800c750:	7013      	strb	r3, [r2, #0]
 800c752:	e604      	b.n	800c35e <_dtoa_r+0x696>
 800c754:	9b07      	ldr	r3, [sp, #28]
 800c756:	9a07      	ldr	r2, [sp, #28]
 800c758:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c75c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c75e:	4293      	cmp	r3, r2
 800c760:	d028      	beq.n	800c7b4 <_dtoa_r+0xaec>
 800c762:	4649      	mov	r1, r9
 800c764:	2300      	movs	r3, #0
 800c766:	220a      	movs	r2, #10
 800c768:	4658      	mov	r0, fp
 800c76a:	f000 f9d5 	bl	800cb18 <__multadd>
 800c76e:	42af      	cmp	r7, r5
 800c770:	4681      	mov	r9, r0
 800c772:	f04f 0300 	mov.w	r3, #0
 800c776:	f04f 020a 	mov.w	r2, #10
 800c77a:	4639      	mov	r1, r7
 800c77c:	4658      	mov	r0, fp
 800c77e:	d107      	bne.n	800c790 <_dtoa_r+0xac8>
 800c780:	f000 f9ca 	bl	800cb18 <__multadd>
 800c784:	4607      	mov	r7, r0
 800c786:	4605      	mov	r5, r0
 800c788:	9b07      	ldr	r3, [sp, #28]
 800c78a:	3301      	adds	r3, #1
 800c78c:	9307      	str	r3, [sp, #28]
 800c78e:	e774      	b.n	800c67a <_dtoa_r+0x9b2>
 800c790:	f000 f9c2 	bl	800cb18 <__multadd>
 800c794:	4629      	mov	r1, r5
 800c796:	4607      	mov	r7, r0
 800c798:	2300      	movs	r3, #0
 800c79a:	220a      	movs	r2, #10
 800c79c:	4658      	mov	r0, fp
 800c79e:	f000 f9bb 	bl	800cb18 <__multadd>
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	e7f0      	b.n	800c788 <_dtoa_r+0xac0>
 800c7a6:	9b08      	ldr	r3, [sp, #32]
 800c7a8:	2700      	movs	r7, #0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	bfcc      	ite	gt
 800c7ae:	461e      	movgt	r6, r3
 800c7b0:	2601      	movle	r6, #1
 800c7b2:	4456      	add	r6, sl
 800c7b4:	4649      	mov	r1, r9
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	4658      	mov	r0, fp
 800c7ba:	f000 fb57 	bl	800ce6c <__lshift>
 800c7be:	4621      	mov	r1, r4
 800c7c0:	4681      	mov	r9, r0
 800c7c2:	f000 fbbf 	bl	800cf44 <__mcmp>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	dcb0      	bgt.n	800c72c <_dtoa_r+0xa64>
 800c7ca:	d102      	bne.n	800c7d2 <_dtoa_r+0xb0a>
 800c7cc:	f018 0f01 	tst.w	r8, #1
 800c7d0:	d1ac      	bne.n	800c72c <_dtoa_r+0xa64>
 800c7d2:	4633      	mov	r3, r6
 800c7d4:	461e      	mov	r6, r3
 800c7d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7da:	2a30      	cmp	r2, #48	@ 0x30
 800c7dc:	d0fa      	beq.n	800c7d4 <_dtoa_r+0xb0c>
 800c7de:	e5be      	b.n	800c35e <_dtoa_r+0x696>
 800c7e0:	459a      	cmp	sl, r3
 800c7e2:	d1a4      	bne.n	800c72e <_dtoa_r+0xa66>
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	9304      	str	r3, [sp, #16]
 800c7ea:	2331      	movs	r3, #49	@ 0x31
 800c7ec:	f88a 3000 	strb.w	r3, [sl]
 800c7f0:	e5b5      	b.n	800c35e <_dtoa_r+0x696>
 800c7f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c7f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c854 <_dtoa_r+0xb8c>
 800c7f8:	b11b      	cbz	r3, 800c802 <_dtoa_r+0xb3a>
 800c7fa:	f10a 0308 	add.w	r3, sl, #8
 800c7fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c800:	6013      	str	r3, [r2, #0]
 800c802:	4650      	mov	r0, sl
 800c804:	b017      	add	sp, #92	@ 0x5c
 800c806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c80a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	f77f ae3d 	ble.w	800c48c <_dtoa_r+0x7c4>
 800c812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c814:	930a      	str	r3, [sp, #40]	@ 0x28
 800c816:	2001      	movs	r0, #1
 800c818:	e65b      	b.n	800c4d2 <_dtoa_r+0x80a>
 800c81a:	9b08      	ldr	r3, [sp, #32]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f77f aed6 	ble.w	800c5ce <_dtoa_r+0x906>
 800c822:	4656      	mov	r6, sl
 800c824:	4621      	mov	r1, r4
 800c826:	4648      	mov	r0, r9
 800c828:	f7ff f9c3 	bl	800bbb2 <quorem>
 800c82c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c830:	9b08      	ldr	r3, [sp, #32]
 800c832:	f806 8b01 	strb.w	r8, [r6], #1
 800c836:	eba6 020a 	sub.w	r2, r6, sl
 800c83a:	4293      	cmp	r3, r2
 800c83c:	ddb3      	ble.n	800c7a6 <_dtoa_r+0xade>
 800c83e:	4649      	mov	r1, r9
 800c840:	2300      	movs	r3, #0
 800c842:	220a      	movs	r2, #10
 800c844:	4658      	mov	r0, fp
 800c846:	f000 f967 	bl	800cb18 <__multadd>
 800c84a:	4681      	mov	r9, r0
 800c84c:	e7ea      	b.n	800c824 <_dtoa_r+0xb5c>
 800c84e:	bf00      	nop
 800c850:	0800e602 	.word	0x0800e602
 800c854:	0800e586 	.word	0x0800e586

0800c858 <_free_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4605      	mov	r5, r0
 800c85c:	2900      	cmp	r1, #0
 800c85e:	d040      	beq.n	800c8e2 <_free_r+0x8a>
 800c860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c864:	1f0c      	subs	r4, r1, #4
 800c866:	2b00      	cmp	r3, #0
 800c868:	bfb8      	it	lt
 800c86a:	18e4      	addlt	r4, r4, r3
 800c86c:	f000 f8e6 	bl	800ca3c <__malloc_lock>
 800c870:	4a1c      	ldr	r2, [pc, #112]	@ (800c8e4 <_free_r+0x8c>)
 800c872:	6813      	ldr	r3, [r2, #0]
 800c874:	b933      	cbnz	r3, 800c884 <_free_r+0x2c>
 800c876:	6063      	str	r3, [r4, #4]
 800c878:	6014      	str	r4, [r2, #0]
 800c87a:	4628      	mov	r0, r5
 800c87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c880:	f000 b8e2 	b.w	800ca48 <__malloc_unlock>
 800c884:	42a3      	cmp	r3, r4
 800c886:	d908      	bls.n	800c89a <_free_r+0x42>
 800c888:	6820      	ldr	r0, [r4, #0]
 800c88a:	1821      	adds	r1, r4, r0
 800c88c:	428b      	cmp	r3, r1
 800c88e:	bf01      	itttt	eq
 800c890:	6819      	ldreq	r1, [r3, #0]
 800c892:	685b      	ldreq	r3, [r3, #4]
 800c894:	1809      	addeq	r1, r1, r0
 800c896:	6021      	streq	r1, [r4, #0]
 800c898:	e7ed      	b.n	800c876 <_free_r+0x1e>
 800c89a:	461a      	mov	r2, r3
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	b10b      	cbz	r3, 800c8a4 <_free_r+0x4c>
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d9fa      	bls.n	800c89a <_free_r+0x42>
 800c8a4:	6811      	ldr	r1, [r2, #0]
 800c8a6:	1850      	adds	r0, r2, r1
 800c8a8:	42a0      	cmp	r0, r4
 800c8aa:	d10b      	bne.n	800c8c4 <_free_r+0x6c>
 800c8ac:	6820      	ldr	r0, [r4, #0]
 800c8ae:	4401      	add	r1, r0
 800c8b0:	1850      	adds	r0, r2, r1
 800c8b2:	4283      	cmp	r3, r0
 800c8b4:	6011      	str	r1, [r2, #0]
 800c8b6:	d1e0      	bne.n	800c87a <_free_r+0x22>
 800c8b8:	6818      	ldr	r0, [r3, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	4408      	add	r0, r1
 800c8be:	6010      	str	r0, [r2, #0]
 800c8c0:	6053      	str	r3, [r2, #4]
 800c8c2:	e7da      	b.n	800c87a <_free_r+0x22>
 800c8c4:	d902      	bls.n	800c8cc <_free_r+0x74>
 800c8c6:	230c      	movs	r3, #12
 800c8c8:	602b      	str	r3, [r5, #0]
 800c8ca:	e7d6      	b.n	800c87a <_free_r+0x22>
 800c8cc:	6820      	ldr	r0, [r4, #0]
 800c8ce:	1821      	adds	r1, r4, r0
 800c8d0:	428b      	cmp	r3, r1
 800c8d2:	bf01      	itttt	eq
 800c8d4:	6819      	ldreq	r1, [r3, #0]
 800c8d6:	685b      	ldreq	r3, [r3, #4]
 800c8d8:	1809      	addeq	r1, r1, r0
 800c8da:	6021      	streq	r1, [r4, #0]
 800c8dc:	6063      	str	r3, [r4, #4]
 800c8de:	6054      	str	r4, [r2, #4]
 800c8e0:	e7cb      	b.n	800c87a <_free_r+0x22>
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	20005d8c 	.word	0x20005d8c

0800c8e8 <malloc>:
 800c8e8:	4b02      	ldr	r3, [pc, #8]	@ (800c8f4 <malloc+0xc>)
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	f000 b825 	b.w	800c93c <_malloc_r>
 800c8f2:	bf00      	nop
 800c8f4:	20000078 	.word	0x20000078

0800c8f8 <sbrk_aligned>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	4e0f      	ldr	r6, [pc, #60]	@ (800c938 <sbrk_aligned+0x40>)
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	6831      	ldr	r1, [r6, #0]
 800c900:	4605      	mov	r5, r0
 800c902:	b911      	cbnz	r1, 800c90a <sbrk_aligned+0x12>
 800c904:	f000 fe40 	bl	800d588 <_sbrk_r>
 800c908:	6030      	str	r0, [r6, #0]
 800c90a:	4621      	mov	r1, r4
 800c90c:	4628      	mov	r0, r5
 800c90e:	f000 fe3b 	bl	800d588 <_sbrk_r>
 800c912:	1c43      	adds	r3, r0, #1
 800c914:	d103      	bne.n	800c91e <sbrk_aligned+0x26>
 800c916:	f04f 34ff 	mov.w	r4, #4294967295
 800c91a:	4620      	mov	r0, r4
 800c91c:	bd70      	pop	{r4, r5, r6, pc}
 800c91e:	1cc4      	adds	r4, r0, #3
 800c920:	f024 0403 	bic.w	r4, r4, #3
 800c924:	42a0      	cmp	r0, r4
 800c926:	d0f8      	beq.n	800c91a <sbrk_aligned+0x22>
 800c928:	1a21      	subs	r1, r4, r0
 800c92a:	4628      	mov	r0, r5
 800c92c:	f000 fe2c 	bl	800d588 <_sbrk_r>
 800c930:	3001      	adds	r0, #1
 800c932:	d1f2      	bne.n	800c91a <sbrk_aligned+0x22>
 800c934:	e7ef      	b.n	800c916 <sbrk_aligned+0x1e>
 800c936:	bf00      	nop
 800c938:	20005d88 	.word	0x20005d88

0800c93c <_malloc_r>:
 800c93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c940:	1ccd      	adds	r5, r1, #3
 800c942:	f025 0503 	bic.w	r5, r5, #3
 800c946:	3508      	adds	r5, #8
 800c948:	2d0c      	cmp	r5, #12
 800c94a:	bf38      	it	cc
 800c94c:	250c      	movcc	r5, #12
 800c94e:	2d00      	cmp	r5, #0
 800c950:	4606      	mov	r6, r0
 800c952:	db01      	blt.n	800c958 <_malloc_r+0x1c>
 800c954:	42a9      	cmp	r1, r5
 800c956:	d904      	bls.n	800c962 <_malloc_r+0x26>
 800c958:	230c      	movs	r3, #12
 800c95a:	6033      	str	r3, [r6, #0]
 800c95c:	2000      	movs	r0, #0
 800c95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca38 <_malloc_r+0xfc>
 800c966:	f000 f869 	bl	800ca3c <__malloc_lock>
 800c96a:	f8d8 3000 	ldr.w	r3, [r8]
 800c96e:	461c      	mov	r4, r3
 800c970:	bb44      	cbnz	r4, 800c9c4 <_malloc_r+0x88>
 800c972:	4629      	mov	r1, r5
 800c974:	4630      	mov	r0, r6
 800c976:	f7ff ffbf 	bl	800c8f8 <sbrk_aligned>
 800c97a:	1c43      	adds	r3, r0, #1
 800c97c:	4604      	mov	r4, r0
 800c97e:	d158      	bne.n	800ca32 <_malloc_r+0xf6>
 800c980:	f8d8 4000 	ldr.w	r4, [r8]
 800c984:	4627      	mov	r7, r4
 800c986:	2f00      	cmp	r7, #0
 800c988:	d143      	bne.n	800ca12 <_malloc_r+0xd6>
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	d04b      	beq.n	800ca26 <_malloc_r+0xea>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	4639      	mov	r1, r7
 800c992:	4630      	mov	r0, r6
 800c994:	eb04 0903 	add.w	r9, r4, r3
 800c998:	f000 fdf6 	bl	800d588 <_sbrk_r>
 800c99c:	4581      	cmp	r9, r0
 800c99e:	d142      	bne.n	800ca26 <_malloc_r+0xea>
 800c9a0:	6821      	ldr	r1, [r4, #0]
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	1a6d      	subs	r5, r5, r1
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	f7ff ffa6 	bl	800c8f8 <sbrk_aligned>
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d03a      	beq.n	800ca26 <_malloc_r+0xea>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	442b      	add	r3, r5
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	bb62      	cbnz	r2, 800ca18 <_malloc_r+0xdc>
 800c9be:	f8c8 7000 	str.w	r7, [r8]
 800c9c2:	e00f      	b.n	800c9e4 <_malloc_r+0xa8>
 800c9c4:	6822      	ldr	r2, [r4, #0]
 800c9c6:	1b52      	subs	r2, r2, r5
 800c9c8:	d420      	bmi.n	800ca0c <_malloc_r+0xd0>
 800c9ca:	2a0b      	cmp	r2, #11
 800c9cc:	d917      	bls.n	800c9fe <_malloc_r+0xc2>
 800c9ce:	1961      	adds	r1, r4, r5
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	6025      	str	r5, [r4, #0]
 800c9d4:	bf18      	it	ne
 800c9d6:	6059      	strne	r1, [r3, #4]
 800c9d8:	6863      	ldr	r3, [r4, #4]
 800c9da:	bf08      	it	eq
 800c9dc:	f8c8 1000 	streq.w	r1, [r8]
 800c9e0:	5162      	str	r2, [r4, r5]
 800c9e2:	604b      	str	r3, [r1, #4]
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f000 f82f 	bl	800ca48 <__malloc_unlock>
 800c9ea:	f104 000b 	add.w	r0, r4, #11
 800c9ee:	1d23      	adds	r3, r4, #4
 800c9f0:	f020 0007 	bic.w	r0, r0, #7
 800c9f4:	1ac2      	subs	r2, r0, r3
 800c9f6:	bf1c      	itt	ne
 800c9f8:	1a1b      	subne	r3, r3, r0
 800c9fa:	50a3      	strne	r3, [r4, r2]
 800c9fc:	e7af      	b.n	800c95e <_malloc_r+0x22>
 800c9fe:	6862      	ldr	r2, [r4, #4]
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	bf0c      	ite	eq
 800ca04:	f8c8 2000 	streq.w	r2, [r8]
 800ca08:	605a      	strne	r2, [r3, #4]
 800ca0a:	e7eb      	b.n	800c9e4 <_malloc_r+0xa8>
 800ca0c:	4623      	mov	r3, r4
 800ca0e:	6864      	ldr	r4, [r4, #4]
 800ca10:	e7ae      	b.n	800c970 <_malloc_r+0x34>
 800ca12:	463c      	mov	r4, r7
 800ca14:	687f      	ldr	r7, [r7, #4]
 800ca16:	e7b6      	b.n	800c986 <_malloc_r+0x4a>
 800ca18:	461a      	mov	r2, r3
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	d1fb      	bne.n	800ca18 <_malloc_r+0xdc>
 800ca20:	2300      	movs	r3, #0
 800ca22:	6053      	str	r3, [r2, #4]
 800ca24:	e7de      	b.n	800c9e4 <_malloc_r+0xa8>
 800ca26:	230c      	movs	r3, #12
 800ca28:	4630      	mov	r0, r6
 800ca2a:	6033      	str	r3, [r6, #0]
 800ca2c:	f000 f80c 	bl	800ca48 <__malloc_unlock>
 800ca30:	e794      	b.n	800c95c <_malloc_r+0x20>
 800ca32:	6005      	str	r5, [r0, #0]
 800ca34:	e7d6      	b.n	800c9e4 <_malloc_r+0xa8>
 800ca36:	bf00      	nop
 800ca38:	20005d8c 	.word	0x20005d8c

0800ca3c <__malloc_lock>:
 800ca3c:	4801      	ldr	r0, [pc, #4]	@ (800ca44 <__malloc_lock+0x8>)
 800ca3e:	f7ff b89a 	b.w	800bb76 <__retarget_lock_acquire_recursive>
 800ca42:	bf00      	nop
 800ca44:	20005d84 	.word	0x20005d84

0800ca48 <__malloc_unlock>:
 800ca48:	4801      	ldr	r0, [pc, #4]	@ (800ca50 <__malloc_unlock+0x8>)
 800ca4a:	f7ff b895 	b.w	800bb78 <__retarget_lock_release_recursive>
 800ca4e:	bf00      	nop
 800ca50:	20005d84 	.word	0x20005d84

0800ca54 <_Balloc>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	69c6      	ldr	r6, [r0, #28]
 800ca58:	4604      	mov	r4, r0
 800ca5a:	460d      	mov	r5, r1
 800ca5c:	b976      	cbnz	r6, 800ca7c <_Balloc+0x28>
 800ca5e:	2010      	movs	r0, #16
 800ca60:	f7ff ff42 	bl	800c8e8 <malloc>
 800ca64:	4602      	mov	r2, r0
 800ca66:	61e0      	str	r0, [r4, #28]
 800ca68:	b920      	cbnz	r0, 800ca74 <_Balloc+0x20>
 800ca6a:	216b      	movs	r1, #107	@ 0x6b
 800ca6c:	4b17      	ldr	r3, [pc, #92]	@ (800cacc <_Balloc+0x78>)
 800ca6e:	4818      	ldr	r0, [pc, #96]	@ (800cad0 <_Balloc+0x7c>)
 800ca70:	f000 fd9a 	bl	800d5a8 <__assert_func>
 800ca74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca78:	6006      	str	r6, [r0, #0]
 800ca7a:	60c6      	str	r6, [r0, #12]
 800ca7c:	69e6      	ldr	r6, [r4, #28]
 800ca7e:	68f3      	ldr	r3, [r6, #12]
 800ca80:	b183      	cbz	r3, 800caa4 <_Balloc+0x50>
 800ca82:	69e3      	ldr	r3, [r4, #28]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca8a:	b9b8      	cbnz	r0, 800cabc <_Balloc+0x68>
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ca92:	1d72      	adds	r2, r6, #5
 800ca94:	4620      	mov	r0, r4
 800ca96:	0092      	lsls	r2, r2, #2
 800ca98:	f000 fda4 	bl	800d5e4 <_calloc_r>
 800ca9c:	b160      	cbz	r0, 800cab8 <_Balloc+0x64>
 800ca9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caa2:	e00e      	b.n	800cac2 <_Balloc+0x6e>
 800caa4:	2221      	movs	r2, #33	@ 0x21
 800caa6:	2104      	movs	r1, #4
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 fd9b 	bl	800d5e4 <_calloc_r>
 800caae:	69e3      	ldr	r3, [r4, #28]
 800cab0:	60f0      	str	r0, [r6, #12]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e4      	bne.n	800ca82 <_Balloc+0x2e>
 800cab8:	2000      	movs	r0, #0
 800caba:	bd70      	pop	{r4, r5, r6, pc}
 800cabc:	6802      	ldr	r2, [r0, #0]
 800cabe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cac2:	2300      	movs	r3, #0
 800cac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cac8:	e7f7      	b.n	800caba <_Balloc+0x66>
 800caca:	bf00      	nop
 800cacc:	0800e593 	.word	0x0800e593
 800cad0:	0800e613 	.word	0x0800e613

0800cad4 <_Bfree>:
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	69c6      	ldr	r6, [r0, #28]
 800cad8:	4605      	mov	r5, r0
 800cada:	460c      	mov	r4, r1
 800cadc:	b976      	cbnz	r6, 800cafc <_Bfree+0x28>
 800cade:	2010      	movs	r0, #16
 800cae0:	f7ff ff02 	bl	800c8e8 <malloc>
 800cae4:	4602      	mov	r2, r0
 800cae6:	61e8      	str	r0, [r5, #28]
 800cae8:	b920      	cbnz	r0, 800caf4 <_Bfree+0x20>
 800caea:	218f      	movs	r1, #143	@ 0x8f
 800caec:	4b08      	ldr	r3, [pc, #32]	@ (800cb10 <_Bfree+0x3c>)
 800caee:	4809      	ldr	r0, [pc, #36]	@ (800cb14 <_Bfree+0x40>)
 800caf0:	f000 fd5a 	bl	800d5a8 <__assert_func>
 800caf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caf8:	6006      	str	r6, [r0, #0]
 800cafa:	60c6      	str	r6, [r0, #12]
 800cafc:	b13c      	cbz	r4, 800cb0e <_Bfree+0x3a>
 800cafe:	69eb      	ldr	r3, [r5, #28]
 800cb00:	6862      	ldr	r2, [r4, #4]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb08:	6021      	str	r1, [r4, #0]
 800cb0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	0800e593 	.word	0x0800e593
 800cb14:	0800e613 	.word	0x0800e613

0800cb18 <__multadd>:
 800cb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1c:	4607      	mov	r7, r0
 800cb1e:	460c      	mov	r4, r1
 800cb20:	461e      	mov	r6, r3
 800cb22:	2000      	movs	r0, #0
 800cb24:	690d      	ldr	r5, [r1, #16]
 800cb26:	f101 0c14 	add.w	ip, r1, #20
 800cb2a:	f8dc 3000 	ldr.w	r3, [ip]
 800cb2e:	3001      	adds	r0, #1
 800cb30:	b299      	uxth	r1, r3
 800cb32:	fb02 6101 	mla	r1, r2, r1, r6
 800cb36:	0c1e      	lsrs	r6, r3, #16
 800cb38:	0c0b      	lsrs	r3, r1, #16
 800cb3a:	fb02 3306 	mla	r3, r2, r6, r3
 800cb3e:	b289      	uxth	r1, r1
 800cb40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb44:	4285      	cmp	r5, r0
 800cb46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb4a:	f84c 1b04 	str.w	r1, [ip], #4
 800cb4e:	dcec      	bgt.n	800cb2a <__multadd+0x12>
 800cb50:	b30e      	cbz	r6, 800cb96 <__multadd+0x7e>
 800cb52:	68a3      	ldr	r3, [r4, #8]
 800cb54:	42ab      	cmp	r3, r5
 800cb56:	dc19      	bgt.n	800cb8c <__multadd+0x74>
 800cb58:	6861      	ldr	r1, [r4, #4]
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	3101      	adds	r1, #1
 800cb5e:	f7ff ff79 	bl	800ca54 <_Balloc>
 800cb62:	4680      	mov	r8, r0
 800cb64:	b928      	cbnz	r0, 800cb72 <__multadd+0x5a>
 800cb66:	4602      	mov	r2, r0
 800cb68:	21ba      	movs	r1, #186	@ 0xba
 800cb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb9c <__multadd+0x84>)
 800cb6c:	480c      	ldr	r0, [pc, #48]	@ (800cba0 <__multadd+0x88>)
 800cb6e:	f000 fd1b 	bl	800d5a8 <__assert_func>
 800cb72:	6922      	ldr	r2, [r4, #16]
 800cb74:	f104 010c 	add.w	r1, r4, #12
 800cb78:	3202      	adds	r2, #2
 800cb7a:	0092      	lsls	r2, r2, #2
 800cb7c:	300c      	adds	r0, #12
 800cb7e:	f7ff f80a 	bl	800bb96 <memcpy>
 800cb82:	4621      	mov	r1, r4
 800cb84:	4638      	mov	r0, r7
 800cb86:	f7ff ffa5 	bl	800cad4 <_Bfree>
 800cb8a:	4644      	mov	r4, r8
 800cb8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb90:	3501      	adds	r5, #1
 800cb92:	615e      	str	r6, [r3, #20]
 800cb94:	6125      	str	r5, [r4, #16]
 800cb96:	4620      	mov	r0, r4
 800cb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9c:	0800e602 	.word	0x0800e602
 800cba0:	0800e613 	.word	0x0800e613

0800cba4 <__hi0bits>:
 800cba4:	4603      	mov	r3, r0
 800cba6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cbaa:	bf3a      	itte	cc
 800cbac:	0403      	lslcc	r3, r0, #16
 800cbae:	2010      	movcc	r0, #16
 800cbb0:	2000      	movcs	r0, #0
 800cbb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbb6:	bf3c      	itt	cc
 800cbb8:	021b      	lslcc	r3, r3, #8
 800cbba:	3008      	addcc	r0, #8
 800cbbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbc0:	bf3c      	itt	cc
 800cbc2:	011b      	lslcc	r3, r3, #4
 800cbc4:	3004      	addcc	r0, #4
 800cbc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbca:	bf3c      	itt	cc
 800cbcc:	009b      	lslcc	r3, r3, #2
 800cbce:	3002      	addcc	r0, #2
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	db05      	blt.n	800cbe0 <__hi0bits+0x3c>
 800cbd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbd8:	f100 0001 	add.w	r0, r0, #1
 800cbdc:	bf08      	it	eq
 800cbde:	2020      	moveq	r0, #32
 800cbe0:	4770      	bx	lr

0800cbe2 <__lo0bits>:
 800cbe2:	6803      	ldr	r3, [r0, #0]
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	f013 0007 	ands.w	r0, r3, #7
 800cbea:	d00b      	beq.n	800cc04 <__lo0bits+0x22>
 800cbec:	07d9      	lsls	r1, r3, #31
 800cbee:	d421      	bmi.n	800cc34 <__lo0bits+0x52>
 800cbf0:	0798      	lsls	r0, r3, #30
 800cbf2:	bf49      	itett	mi
 800cbf4:	085b      	lsrmi	r3, r3, #1
 800cbf6:	089b      	lsrpl	r3, r3, #2
 800cbf8:	2001      	movmi	r0, #1
 800cbfa:	6013      	strmi	r3, [r2, #0]
 800cbfc:	bf5c      	itt	pl
 800cbfe:	2002      	movpl	r0, #2
 800cc00:	6013      	strpl	r3, [r2, #0]
 800cc02:	4770      	bx	lr
 800cc04:	b299      	uxth	r1, r3
 800cc06:	b909      	cbnz	r1, 800cc0c <__lo0bits+0x2a>
 800cc08:	2010      	movs	r0, #16
 800cc0a:	0c1b      	lsrs	r3, r3, #16
 800cc0c:	b2d9      	uxtb	r1, r3
 800cc0e:	b909      	cbnz	r1, 800cc14 <__lo0bits+0x32>
 800cc10:	3008      	adds	r0, #8
 800cc12:	0a1b      	lsrs	r3, r3, #8
 800cc14:	0719      	lsls	r1, r3, #28
 800cc16:	bf04      	itt	eq
 800cc18:	091b      	lsreq	r3, r3, #4
 800cc1a:	3004      	addeq	r0, #4
 800cc1c:	0799      	lsls	r1, r3, #30
 800cc1e:	bf04      	itt	eq
 800cc20:	089b      	lsreq	r3, r3, #2
 800cc22:	3002      	addeq	r0, #2
 800cc24:	07d9      	lsls	r1, r3, #31
 800cc26:	d403      	bmi.n	800cc30 <__lo0bits+0x4e>
 800cc28:	085b      	lsrs	r3, r3, #1
 800cc2a:	f100 0001 	add.w	r0, r0, #1
 800cc2e:	d003      	beq.n	800cc38 <__lo0bits+0x56>
 800cc30:	6013      	str	r3, [r2, #0]
 800cc32:	4770      	bx	lr
 800cc34:	2000      	movs	r0, #0
 800cc36:	4770      	bx	lr
 800cc38:	2020      	movs	r0, #32
 800cc3a:	4770      	bx	lr

0800cc3c <__i2b>:
 800cc3c:	b510      	push	{r4, lr}
 800cc3e:	460c      	mov	r4, r1
 800cc40:	2101      	movs	r1, #1
 800cc42:	f7ff ff07 	bl	800ca54 <_Balloc>
 800cc46:	4602      	mov	r2, r0
 800cc48:	b928      	cbnz	r0, 800cc56 <__i2b+0x1a>
 800cc4a:	f240 1145 	movw	r1, #325	@ 0x145
 800cc4e:	4b04      	ldr	r3, [pc, #16]	@ (800cc60 <__i2b+0x24>)
 800cc50:	4804      	ldr	r0, [pc, #16]	@ (800cc64 <__i2b+0x28>)
 800cc52:	f000 fca9 	bl	800d5a8 <__assert_func>
 800cc56:	2301      	movs	r3, #1
 800cc58:	6144      	str	r4, [r0, #20]
 800cc5a:	6103      	str	r3, [r0, #16]
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	bf00      	nop
 800cc60:	0800e602 	.word	0x0800e602
 800cc64:	0800e613 	.word	0x0800e613

0800cc68 <__multiply>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	690a      	ldr	r2, [r1, #16]
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	460f      	mov	r7, r1
 800cc74:	429a      	cmp	r2, r3
 800cc76:	bfa2      	ittt	ge
 800cc78:	4623      	movge	r3, r4
 800cc7a:	460c      	movge	r4, r1
 800cc7c:	461f      	movge	r7, r3
 800cc7e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cc82:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cc86:	68a3      	ldr	r3, [r4, #8]
 800cc88:	6861      	ldr	r1, [r4, #4]
 800cc8a:	eb0a 0609 	add.w	r6, sl, r9
 800cc8e:	42b3      	cmp	r3, r6
 800cc90:	b085      	sub	sp, #20
 800cc92:	bfb8      	it	lt
 800cc94:	3101      	addlt	r1, #1
 800cc96:	f7ff fedd 	bl	800ca54 <_Balloc>
 800cc9a:	b930      	cbnz	r0, 800ccaa <__multiply+0x42>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cca2:	4b43      	ldr	r3, [pc, #268]	@ (800cdb0 <__multiply+0x148>)
 800cca4:	4843      	ldr	r0, [pc, #268]	@ (800cdb4 <__multiply+0x14c>)
 800cca6:	f000 fc7f 	bl	800d5a8 <__assert_func>
 800ccaa:	f100 0514 	add.w	r5, r0, #20
 800ccae:	462b      	mov	r3, r5
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ccb6:	4543      	cmp	r3, r8
 800ccb8:	d321      	bcc.n	800ccfe <__multiply+0x96>
 800ccba:	f107 0114 	add.w	r1, r7, #20
 800ccbe:	f104 0214 	add.w	r2, r4, #20
 800ccc2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ccc6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ccca:	9302      	str	r3, [sp, #8]
 800cccc:	1b13      	subs	r3, r2, r4
 800ccce:	3b15      	subs	r3, #21
 800ccd0:	f023 0303 	bic.w	r3, r3, #3
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	f104 0715 	add.w	r7, r4, #21
 800ccda:	42ba      	cmp	r2, r7
 800ccdc:	bf38      	it	cc
 800ccde:	2304      	movcc	r3, #4
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	9b02      	ldr	r3, [sp, #8]
 800cce4:	9103      	str	r1, [sp, #12]
 800cce6:	428b      	cmp	r3, r1
 800cce8:	d80c      	bhi.n	800cd04 <__multiply+0x9c>
 800ccea:	2e00      	cmp	r6, #0
 800ccec:	dd03      	ble.n	800ccf6 <__multiply+0x8e>
 800ccee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d05a      	beq.n	800cdac <__multiply+0x144>
 800ccf6:	6106      	str	r6, [r0, #16]
 800ccf8:	b005      	add	sp, #20
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	f843 2b04 	str.w	r2, [r3], #4
 800cd02:	e7d8      	b.n	800ccb6 <__multiply+0x4e>
 800cd04:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd08:	f1ba 0f00 	cmp.w	sl, #0
 800cd0c:	d023      	beq.n	800cd56 <__multiply+0xee>
 800cd0e:	46a9      	mov	r9, r5
 800cd10:	f04f 0c00 	mov.w	ip, #0
 800cd14:	f104 0e14 	add.w	lr, r4, #20
 800cd18:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd1c:	f8d9 3000 	ldr.w	r3, [r9]
 800cd20:	fa1f fb87 	uxth.w	fp, r7
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd2a:	4463      	add	r3, ip
 800cd2c:	f8d9 c000 	ldr.w	ip, [r9]
 800cd30:	0c3f      	lsrs	r7, r7, #16
 800cd32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cd36:	fb0a c707 	mla	r7, sl, r7, ip
 800cd3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd44:	4572      	cmp	r2, lr
 800cd46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd4a:	f849 3b04 	str.w	r3, [r9], #4
 800cd4e:	d8e3      	bhi.n	800cd18 <__multiply+0xb0>
 800cd50:	9b01      	ldr	r3, [sp, #4]
 800cd52:	f845 c003 	str.w	ip, [r5, r3]
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	3104      	adds	r1, #4
 800cd5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd5e:	f1b9 0f00 	cmp.w	r9, #0
 800cd62:	d021      	beq.n	800cda8 <__multiply+0x140>
 800cd64:	46ae      	mov	lr, r5
 800cd66:	f04f 0a00 	mov.w	sl, #0
 800cd6a:	682b      	ldr	r3, [r5, #0]
 800cd6c:	f104 0c14 	add.w	ip, r4, #20
 800cd70:	f8bc b000 	ldrh.w	fp, [ip]
 800cd74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	fb09 770b 	mla	r7, r9, fp, r7
 800cd7e:	4457      	add	r7, sl
 800cd80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd84:	f84e 3b04 	str.w	r3, [lr], #4
 800cd88:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cd8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd90:	f8be 3000 	ldrh.w	r3, [lr]
 800cd94:	4562      	cmp	r2, ip
 800cd96:	fb09 330a 	mla	r3, r9, sl, r3
 800cd9a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cd9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cda2:	d8e5      	bhi.n	800cd70 <__multiply+0x108>
 800cda4:	9f01      	ldr	r7, [sp, #4]
 800cda6:	51eb      	str	r3, [r5, r7]
 800cda8:	3504      	adds	r5, #4
 800cdaa:	e79a      	b.n	800cce2 <__multiply+0x7a>
 800cdac:	3e01      	subs	r6, #1
 800cdae:	e79c      	b.n	800ccea <__multiply+0x82>
 800cdb0:	0800e602 	.word	0x0800e602
 800cdb4:	0800e613 	.word	0x0800e613

0800cdb8 <__pow5mult>:
 800cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdbc:	4615      	mov	r5, r2
 800cdbe:	f012 0203 	ands.w	r2, r2, #3
 800cdc2:	4607      	mov	r7, r0
 800cdc4:	460e      	mov	r6, r1
 800cdc6:	d007      	beq.n	800cdd8 <__pow5mult+0x20>
 800cdc8:	4c25      	ldr	r4, [pc, #148]	@ (800ce60 <__pow5mult+0xa8>)
 800cdca:	3a01      	subs	r2, #1
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdd2:	f7ff fea1 	bl	800cb18 <__multadd>
 800cdd6:	4606      	mov	r6, r0
 800cdd8:	10ad      	asrs	r5, r5, #2
 800cdda:	d03d      	beq.n	800ce58 <__pow5mult+0xa0>
 800cddc:	69fc      	ldr	r4, [r7, #28]
 800cdde:	b97c      	cbnz	r4, 800ce00 <__pow5mult+0x48>
 800cde0:	2010      	movs	r0, #16
 800cde2:	f7ff fd81 	bl	800c8e8 <malloc>
 800cde6:	4602      	mov	r2, r0
 800cde8:	61f8      	str	r0, [r7, #28]
 800cdea:	b928      	cbnz	r0, 800cdf8 <__pow5mult+0x40>
 800cdec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce64 <__pow5mult+0xac>)
 800cdf2:	481d      	ldr	r0, [pc, #116]	@ (800ce68 <__pow5mult+0xb0>)
 800cdf4:	f000 fbd8 	bl	800d5a8 <__assert_func>
 800cdf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdfc:	6004      	str	r4, [r0, #0]
 800cdfe:	60c4      	str	r4, [r0, #12]
 800ce00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce08:	b94c      	cbnz	r4, 800ce1e <__pow5mult+0x66>
 800ce0a:	f240 2171 	movw	r1, #625	@ 0x271
 800ce0e:	4638      	mov	r0, r7
 800ce10:	f7ff ff14 	bl	800cc3c <__i2b>
 800ce14:	2300      	movs	r3, #0
 800ce16:	4604      	mov	r4, r0
 800ce18:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce1c:	6003      	str	r3, [r0, #0]
 800ce1e:	f04f 0900 	mov.w	r9, #0
 800ce22:	07eb      	lsls	r3, r5, #31
 800ce24:	d50a      	bpl.n	800ce3c <__pow5mult+0x84>
 800ce26:	4631      	mov	r1, r6
 800ce28:	4622      	mov	r2, r4
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	f7ff ff1c 	bl	800cc68 <__multiply>
 800ce30:	4680      	mov	r8, r0
 800ce32:	4631      	mov	r1, r6
 800ce34:	4638      	mov	r0, r7
 800ce36:	f7ff fe4d 	bl	800cad4 <_Bfree>
 800ce3a:	4646      	mov	r6, r8
 800ce3c:	106d      	asrs	r5, r5, #1
 800ce3e:	d00b      	beq.n	800ce58 <__pow5mult+0xa0>
 800ce40:	6820      	ldr	r0, [r4, #0]
 800ce42:	b938      	cbnz	r0, 800ce54 <__pow5mult+0x9c>
 800ce44:	4622      	mov	r2, r4
 800ce46:	4621      	mov	r1, r4
 800ce48:	4638      	mov	r0, r7
 800ce4a:	f7ff ff0d 	bl	800cc68 <__multiply>
 800ce4e:	6020      	str	r0, [r4, #0]
 800ce50:	f8c0 9000 	str.w	r9, [r0]
 800ce54:	4604      	mov	r4, r0
 800ce56:	e7e4      	b.n	800ce22 <__pow5mult+0x6a>
 800ce58:	4630      	mov	r0, r6
 800ce5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce5e:	bf00      	nop
 800ce60:	0800e66c 	.word	0x0800e66c
 800ce64:	0800e593 	.word	0x0800e593
 800ce68:	0800e613 	.word	0x0800e613

0800ce6c <__lshift>:
 800ce6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce70:	460c      	mov	r4, r1
 800ce72:	4607      	mov	r7, r0
 800ce74:	4691      	mov	r9, r2
 800ce76:	6923      	ldr	r3, [r4, #16]
 800ce78:	6849      	ldr	r1, [r1, #4]
 800ce7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce7e:	68a3      	ldr	r3, [r4, #8]
 800ce80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce84:	f108 0601 	add.w	r6, r8, #1
 800ce88:	42b3      	cmp	r3, r6
 800ce8a:	db0b      	blt.n	800cea4 <__lshift+0x38>
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	f7ff fde1 	bl	800ca54 <_Balloc>
 800ce92:	4605      	mov	r5, r0
 800ce94:	b948      	cbnz	r0, 800ceaa <__lshift+0x3e>
 800ce96:	4602      	mov	r2, r0
 800ce98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce9c:	4b27      	ldr	r3, [pc, #156]	@ (800cf3c <__lshift+0xd0>)
 800ce9e:	4828      	ldr	r0, [pc, #160]	@ (800cf40 <__lshift+0xd4>)
 800cea0:	f000 fb82 	bl	800d5a8 <__assert_func>
 800cea4:	3101      	adds	r1, #1
 800cea6:	005b      	lsls	r3, r3, #1
 800cea8:	e7ee      	b.n	800ce88 <__lshift+0x1c>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f100 0114 	add.w	r1, r0, #20
 800ceb0:	f100 0210 	add.w	r2, r0, #16
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	4553      	cmp	r3, sl
 800ceb8:	db33      	blt.n	800cf22 <__lshift+0xb6>
 800ceba:	6920      	ldr	r0, [r4, #16]
 800cebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cec0:	f104 0314 	add.w	r3, r4, #20
 800cec4:	f019 091f 	ands.w	r9, r9, #31
 800cec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cecc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ced0:	d02b      	beq.n	800cf2a <__lshift+0xbe>
 800ced2:	468a      	mov	sl, r1
 800ced4:	2200      	movs	r2, #0
 800ced6:	f1c9 0e20 	rsb	lr, r9, #32
 800ceda:	6818      	ldr	r0, [r3, #0]
 800cedc:	fa00 f009 	lsl.w	r0, r0, r9
 800cee0:	4310      	orrs	r0, r2
 800cee2:	f84a 0b04 	str.w	r0, [sl], #4
 800cee6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceea:	459c      	cmp	ip, r3
 800ceec:	fa22 f20e 	lsr.w	r2, r2, lr
 800cef0:	d8f3      	bhi.n	800ceda <__lshift+0x6e>
 800cef2:	ebac 0304 	sub.w	r3, ip, r4
 800cef6:	3b15      	subs	r3, #21
 800cef8:	f023 0303 	bic.w	r3, r3, #3
 800cefc:	3304      	adds	r3, #4
 800cefe:	f104 0015 	add.w	r0, r4, #21
 800cf02:	4584      	cmp	ip, r0
 800cf04:	bf38      	it	cc
 800cf06:	2304      	movcc	r3, #4
 800cf08:	50ca      	str	r2, [r1, r3]
 800cf0a:	b10a      	cbz	r2, 800cf10 <__lshift+0xa4>
 800cf0c:	f108 0602 	add.w	r6, r8, #2
 800cf10:	3e01      	subs	r6, #1
 800cf12:	4638      	mov	r0, r7
 800cf14:	4621      	mov	r1, r4
 800cf16:	612e      	str	r6, [r5, #16]
 800cf18:	f7ff fddc 	bl	800cad4 <_Bfree>
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf22:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf26:	3301      	adds	r3, #1
 800cf28:	e7c5      	b.n	800ceb6 <__lshift+0x4a>
 800cf2a:	3904      	subs	r1, #4
 800cf2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf30:	459c      	cmp	ip, r3
 800cf32:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf36:	d8f9      	bhi.n	800cf2c <__lshift+0xc0>
 800cf38:	e7ea      	b.n	800cf10 <__lshift+0xa4>
 800cf3a:	bf00      	nop
 800cf3c:	0800e602 	.word	0x0800e602
 800cf40:	0800e613 	.word	0x0800e613

0800cf44 <__mcmp>:
 800cf44:	4603      	mov	r3, r0
 800cf46:	690a      	ldr	r2, [r1, #16]
 800cf48:	6900      	ldr	r0, [r0, #16]
 800cf4a:	b530      	push	{r4, r5, lr}
 800cf4c:	1a80      	subs	r0, r0, r2
 800cf4e:	d10e      	bne.n	800cf6e <__mcmp+0x2a>
 800cf50:	3314      	adds	r3, #20
 800cf52:	3114      	adds	r1, #20
 800cf54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf64:	4295      	cmp	r5, r2
 800cf66:	d003      	beq.n	800cf70 <__mcmp+0x2c>
 800cf68:	d205      	bcs.n	800cf76 <__mcmp+0x32>
 800cf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6e:	bd30      	pop	{r4, r5, pc}
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	d3f3      	bcc.n	800cf5c <__mcmp+0x18>
 800cf74:	e7fb      	b.n	800cf6e <__mcmp+0x2a>
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7f9      	b.n	800cf6e <__mcmp+0x2a>
	...

0800cf7c <__mdiff>:
 800cf7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	4689      	mov	r9, r1
 800cf82:	4606      	mov	r6, r0
 800cf84:	4611      	mov	r1, r2
 800cf86:	4648      	mov	r0, r9
 800cf88:	4614      	mov	r4, r2
 800cf8a:	f7ff ffdb 	bl	800cf44 <__mcmp>
 800cf8e:	1e05      	subs	r5, r0, #0
 800cf90:	d112      	bne.n	800cfb8 <__mdiff+0x3c>
 800cf92:	4629      	mov	r1, r5
 800cf94:	4630      	mov	r0, r6
 800cf96:	f7ff fd5d 	bl	800ca54 <_Balloc>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	b928      	cbnz	r0, 800cfaa <__mdiff+0x2e>
 800cf9e:	f240 2137 	movw	r1, #567	@ 0x237
 800cfa2:	4b3e      	ldr	r3, [pc, #248]	@ (800d09c <__mdiff+0x120>)
 800cfa4:	483e      	ldr	r0, [pc, #248]	@ (800d0a0 <__mdiff+0x124>)
 800cfa6:	f000 faff 	bl	800d5a8 <__assert_func>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	b003      	add	sp, #12
 800cfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb8:	bfbc      	itt	lt
 800cfba:	464b      	movlt	r3, r9
 800cfbc:	46a1      	movlt	r9, r4
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cfc4:	bfba      	itte	lt
 800cfc6:	461c      	movlt	r4, r3
 800cfc8:	2501      	movlt	r5, #1
 800cfca:	2500      	movge	r5, #0
 800cfcc:	f7ff fd42 	bl	800ca54 <_Balloc>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	b918      	cbnz	r0, 800cfdc <__mdiff+0x60>
 800cfd4:	f240 2145 	movw	r1, #581	@ 0x245
 800cfd8:	4b30      	ldr	r3, [pc, #192]	@ (800d09c <__mdiff+0x120>)
 800cfda:	e7e3      	b.n	800cfa4 <__mdiff+0x28>
 800cfdc:	f100 0b14 	add.w	fp, r0, #20
 800cfe0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfe4:	f109 0310 	add.w	r3, r9, #16
 800cfe8:	60c5      	str	r5, [r0, #12]
 800cfea:	f04f 0c00 	mov.w	ip, #0
 800cfee:	f109 0514 	add.w	r5, r9, #20
 800cff2:	46d9      	mov	r9, fp
 800cff4:	6926      	ldr	r6, [r4, #16]
 800cff6:	f104 0e14 	add.w	lr, r4, #20
 800cffa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cffe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d002:	9301      	str	r3, [sp, #4]
 800d004:	9b01      	ldr	r3, [sp, #4]
 800d006:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d00a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d00e:	b281      	uxth	r1, r0
 800d010:	9301      	str	r3, [sp, #4]
 800d012:	fa1f f38a 	uxth.w	r3, sl
 800d016:	1a5b      	subs	r3, r3, r1
 800d018:	0c00      	lsrs	r0, r0, #16
 800d01a:	4463      	add	r3, ip
 800d01c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d020:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d024:	b29b      	uxth	r3, r3
 800d026:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d02a:	4576      	cmp	r6, lr
 800d02c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d030:	f849 3b04 	str.w	r3, [r9], #4
 800d034:	d8e6      	bhi.n	800d004 <__mdiff+0x88>
 800d036:	1b33      	subs	r3, r6, r4
 800d038:	3b15      	subs	r3, #21
 800d03a:	f023 0303 	bic.w	r3, r3, #3
 800d03e:	3415      	adds	r4, #21
 800d040:	3304      	adds	r3, #4
 800d042:	42a6      	cmp	r6, r4
 800d044:	bf38      	it	cc
 800d046:	2304      	movcc	r3, #4
 800d048:	441d      	add	r5, r3
 800d04a:	445b      	add	r3, fp
 800d04c:	461e      	mov	r6, r3
 800d04e:	462c      	mov	r4, r5
 800d050:	4544      	cmp	r4, r8
 800d052:	d30e      	bcc.n	800d072 <__mdiff+0xf6>
 800d054:	f108 0103 	add.w	r1, r8, #3
 800d058:	1b49      	subs	r1, r1, r5
 800d05a:	f021 0103 	bic.w	r1, r1, #3
 800d05e:	3d03      	subs	r5, #3
 800d060:	45a8      	cmp	r8, r5
 800d062:	bf38      	it	cc
 800d064:	2100      	movcc	r1, #0
 800d066:	440b      	add	r3, r1
 800d068:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d06c:	b199      	cbz	r1, 800d096 <__mdiff+0x11a>
 800d06e:	6117      	str	r7, [r2, #16]
 800d070:	e79e      	b.n	800cfb0 <__mdiff+0x34>
 800d072:	46e6      	mov	lr, ip
 800d074:	f854 1b04 	ldr.w	r1, [r4], #4
 800d078:	fa1f fc81 	uxth.w	ip, r1
 800d07c:	44f4      	add	ip, lr
 800d07e:	0c08      	lsrs	r0, r1, #16
 800d080:	4471      	add	r1, lr
 800d082:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d086:	b289      	uxth	r1, r1
 800d088:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d08c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d090:	f846 1b04 	str.w	r1, [r6], #4
 800d094:	e7dc      	b.n	800d050 <__mdiff+0xd4>
 800d096:	3f01      	subs	r7, #1
 800d098:	e7e6      	b.n	800d068 <__mdiff+0xec>
 800d09a:	bf00      	nop
 800d09c:	0800e602 	.word	0x0800e602
 800d0a0:	0800e613 	.word	0x0800e613

0800d0a4 <__d2b>:
 800d0a4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	4690      	mov	r8, r2
 800d0ac:	4699      	mov	r9, r3
 800d0ae:	9e08      	ldr	r6, [sp, #32]
 800d0b0:	f7ff fcd0 	bl	800ca54 <_Balloc>
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	b930      	cbnz	r0, 800d0c6 <__d2b+0x22>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0be:	4b23      	ldr	r3, [pc, #140]	@ (800d14c <__d2b+0xa8>)
 800d0c0:	4823      	ldr	r0, [pc, #140]	@ (800d150 <__d2b+0xac>)
 800d0c2:	f000 fa71 	bl	800d5a8 <__assert_func>
 800d0c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0ce:	b10d      	cbz	r5, 800d0d4 <__d2b+0x30>
 800d0d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0d4:	9301      	str	r3, [sp, #4]
 800d0d6:	f1b8 0300 	subs.w	r3, r8, #0
 800d0da:	d024      	beq.n	800d126 <__d2b+0x82>
 800d0dc:	4668      	mov	r0, sp
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	f7ff fd7f 	bl	800cbe2 <__lo0bits>
 800d0e4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0e8:	b1d8      	cbz	r0, 800d122 <__d2b+0x7e>
 800d0ea:	f1c0 0320 	rsb	r3, r0, #32
 800d0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f2:	430b      	orrs	r3, r1
 800d0f4:	40c2      	lsrs	r2, r0
 800d0f6:	6163      	str	r3, [r4, #20]
 800d0f8:	9201      	str	r2, [sp, #4]
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bf0c      	ite	eq
 800d100:	2201      	moveq	r2, #1
 800d102:	2202      	movne	r2, #2
 800d104:	61a3      	str	r3, [r4, #24]
 800d106:	6122      	str	r2, [r4, #16]
 800d108:	b1ad      	cbz	r5, 800d136 <__d2b+0x92>
 800d10a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d10e:	4405      	add	r5, r0
 800d110:	6035      	str	r5, [r6, #0]
 800d112:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d118:	6018      	str	r0, [r3, #0]
 800d11a:	4620      	mov	r0, r4
 800d11c:	b002      	add	sp, #8
 800d11e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d122:	6161      	str	r1, [r4, #20]
 800d124:	e7e9      	b.n	800d0fa <__d2b+0x56>
 800d126:	a801      	add	r0, sp, #4
 800d128:	f7ff fd5b 	bl	800cbe2 <__lo0bits>
 800d12c:	9b01      	ldr	r3, [sp, #4]
 800d12e:	2201      	movs	r2, #1
 800d130:	6163      	str	r3, [r4, #20]
 800d132:	3020      	adds	r0, #32
 800d134:	e7e7      	b.n	800d106 <__d2b+0x62>
 800d136:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d13a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d13e:	6030      	str	r0, [r6, #0]
 800d140:	6918      	ldr	r0, [r3, #16]
 800d142:	f7ff fd2f 	bl	800cba4 <__hi0bits>
 800d146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d14a:	e7e4      	b.n	800d116 <__d2b+0x72>
 800d14c:	0800e602 	.word	0x0800e602
 800d150:	0800e613 	.word	0x0800e613

0800d154 <__ssputs_r>:
 800d154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d158:	461f      	mov	r7, r3
 800d15a:	688e      	ldr	r6, [r1, #8]
 800d15c:	4682      	mov	sl, r0
 800d15e:	42be      	cmp	r6, r7
 800d160:	460c      	mov	r4, r1
 800d162:	4690      	mov	r8, r2
 800d164:	680b      	ldr	r3, [r1, #0]
 800d166:	d82d      	bhi.n	800d1c4 <__ssputs_r+0x70>
 800d168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d16c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d170:	d026      	beq.n	800d1c0 <__ssputs_r+0x6c>
 800d172:	6965      	ldr	r5, [r4, #20]
 800d174:	6909      	ldr	r1, [r1, #16]
 800d176:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d17a:	eba3 0901 	sub.w	r9, r3, r1
 800d17e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d182:	1c7b      	adds	r3, r7, #1
 800d184:	444b      	add	r3, r9
 800d186:	106d      	asrs	r5, r5, #1
 800d188:	429d      	cmp	r5, r3
 800d18a:	bf38      	it	cc
 800d18c:	461d      	movcc	r5, r3
 800d18e:	0553      	lsls	r3, r2, #21
 800d190:	d527      	bpl.n	800d1e2 <__ssputs_r+0x8e>
 800d192:	4629      	mov	r1, r5
 800d194:	f7ff fbd2 	bl	800c93c <_malloc_r>
 800d198:	4606      	mov	r6, r0
 800d19a:	b360      	cbz	r0, 800d1f6 <__ssputs_r+0xa2>
 800d19c:	464a      	mov	r2, r9
 800d19e:	6921      	ldr	r1, [r4, #16]
 800d1a0:	f7fe fcf9 	bl	800bb96 <memcpy>
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	6126      	str	r6, [r4, #16]
 800d1b2:	444e      	add	r6, r9
 800d1b4:	6026      	str	r6, [r4, #0]
 800d1b6:	463e      	mov	r6, r7
 800d1b8:	6165      	str	r5, [r4, #20]
 800d1ba:	eba5 0509 	sub.w	r5, r5, r9
 800d1be:	60a5      	str	r5, [r4, #8]
 800d1c0:	42be      	cmp	r6, r7
 800d1c2:	d900      	bls.n	800d1c6 <__ssputs_r+0x72>
 800d1c4:	463e      	mov	r6, r7
 800d1c6:	4632      	mov	r2, r6
 800d1c8:	4641      	mov	r1, r8
 800d1ca:	6820      	ldr	r0, [r4, #0]
 800d1cc:	f000 f9c2 	bl	800d554 <memmove>
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	68a3      	ldr	r3, [r4, #8]
 800d1d4:	1b9b      	subs	r3, r3, r6
 800d1d6:	60a3      	str	r3, [r4, #8]
 800d1d8:	6823      	ldr	r3, [r4, #0]
 800d1da:	4433      	add	r3, r6
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	f000 fa24 	bl	800d630 <_realloc_r>
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d1e0      	bne.n	800d1b0 <__ssputs_r+0x5c>
 800d1ee:	4650      	mov	r0, sl
 800d1f0:	6921      	ldr	r1, [r4, #16]
 800d1f2:	f7ff fb31 	bl	800c858 <_free_r>
 800d1f6:	230c      	movs	r3, #12
 800d1f8:	f8ca 3000 	str.w	r3, [sl]
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	e7e9      	b.n	800d1de <__ssputs_r+0x8a>
	...

0800d20c <_svfiprintf_r>:
 800d20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d210:	4698      	mov	r8, r3
 800d212:	898b      	ldrh	r3, [r1, #12]
 800d214:	4607      	mov	r7, r0
 800d216:	061b      	lsls	r3, r3, #24
 800d218:	460d      	mov	r5, r1
 800d21a:	4614      	mov	r4, r2
 800d21c:	b09d      	sub	sp, #116	@ 0x74
 800d21e:	d510      	bpl.n	800d242 <_svfiprintf_r+0x36>
 800d220:	690b      	ldr	r3, [r1, #16]
 800d222:	b973      	cbnz	r3, 800d242 <_svfiprintf_r+0x36>
 800d224:	2140      	movs	r1, #64	@ 0x40
 800d226:	f7ff fb89 	bl	800c93c <_malloc_r>
 800d22a:	6028      	str	r0, [r5, #0]
 800d22c:	6128      	str	r0, [r5, #16]
 800d22e:	b930      	cbnz	r0, 800d23e <_svfiprintf_r+0x32>
 800d230:	230c      	movs	r3, #12
 800d232:	603b      	str	r3, [r7, #0]
 800d234:	f04f 30ff 	mov.w	r0, #4294967295
 800d238:	b01d      	add	sp, #116	@ 0x74
 800d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23e:	2340      	movs	r3, #64	@ 0x40
 800d240:	616b      	str	r3, [r5, #20]
 800d242:	2300      	movs	r3, #0
 800d244:	9309      	str	r3, [sp, #36]	@ 0x24
 800d246:	2320      	movs	r3, #32
 800d248:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d24c:	2330      	movs	r3, #48	@ 0x30
 800d24e:	f04f 0901 	mov.w	r9, #1
 800d252:	f8cd 800c 	str.w	r8, [sp, #12]
 800d256:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d3f0 <_svfiprintf_r+0x1e4>
 800d25a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d25e:	4623      	mov	r3, r4
 800d260:	469a      	mov	sl, r3
 800d262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d266:	b10a      	cbz	r2, 800d26c <_svfiprintf_r+0x60>
 800d268:	2a25      	cmp	r2, #37	@ 0x25
 800d26a:	d1f9      	bne.n	800d260 <_svfiprintf_r+0x54>
 800d26c:	ebba 0b04 	subs.w	fp, sl, r4
 800d270:	d00b      	beq.n	800d28a <_svfiprintf_r+0x7e>
 800d272:	465b      	mov	r3, fp
 800d274:	4622      	mov	r2, r4
 800d276:	4629      	mov	r1, r5
 800d278:	4638      	mov	r0, r7
 800d27a:	f7ff ff6b 	bl	800d154 <__ssputs_r>
 800d27e:	3001      	adds	r0, #1
 800d280:	f000 80a7 	beq.w	800d3d2 <_svfiprintf_r+0x1c6>
 800d284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d286:	445a      	add	r2, fp
 800d288:	9209      	str	r2, [sp, #36]	@ 0x24
 800d28a:	f89a 3000 	ldrb.w	r3, [sl]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 809f 	beq.w	800d3d2 <_svfiprintf_r+0x1c6>
 800d294:	2300      	movs	r3, #0
 800d296:	f04f 32ff 	mov.w	r2, #4294967295
 800d29a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d29e:	f10a 0a01 	add.w	sl, sl, #1
 800d2a2:	9304      	str	r3, [sp, #16]
 800d2a4:	9307      	str	r3, [sp, #28]
 800d2a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2ac:	4654      	mov	r4, sl
 800d2ae:	2205      	movs	r2, #5
 800d2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b4:	484e      	ldr	r0, [pc, #312]	@ (800d3f0 <_svfiprintf_r+0x1e4>)
 800d2b6:	f7fe fc60 	bl	800bb7a <memchr>
 800d2ba:	9a04      	ldr	r2, [sp, #16]
 800d2bc:	b9d8      	cbnz	r0, 800d2f6 <_svfiprintf_r+0xea>
 800d2be:	06d0      	lsls	r0, r2, #27
 800d2c0:	bf44      	itt	mi
 800d2c2:	2320      	movmi	r3, #32
 800d2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2c8:	0711      	lsls	r1, r2, #28
 800d2ca:	bf44      	itt	mi
 800d2cc:	232b      	movmi	r3, #43	@ 0x2b
 800d2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2d8:	d015      	beq.n	800d306 <_svfiprintf_r+0xfa>
 800d2da:	4654      	mov	r4, sl
 800d2dc:	2000      	movs	r0, #0
 800d2de:	f04f 0c0a 	mov.w	ip, #10
 800d2e2:	9a07      	ldr	r2, [sp, #28]
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ea:	3b30      	subs	r3, #48	@ 0x30
 800d2ec:	2b09      	cmp	r3, #9
 800d2ee:	d94b      	bls.n	800d388 <_svfiprintf_r+0x17c>
 800d2f0:	b1b0      	cbz	r0, 800d320 <_svfiprintf_r+0x114>
 800d2f2:	9207      	str	r2, [sp, #28]
 800d2f4:	e014      	b.n	800d320 <_svfiprintf_r+0x114>
 800d2f6:	eba0 0308 	sub.w	r3, r0, r8
 800d2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800d2fe:	4313      	orrs	r3, r2
 800d300:	46a2      	mov	sl, r4
 800d302:	9304      	str	r3, [sp, #16]
 800d304:	e7d2      	b.n	800d2ac <_svfiprintf_r+0xa0>
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	1d19      	adds	r1, r3, #4
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	9103      	str	r1, [sp, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	bfbb      	ittet	lt
 800d312:	425b      	neglt	r3, r3
 800d314:	f042 0202 	orrlt.w	r2, r2, #2
 800d318:	9307      	strge	r3, [sp, #28]
 800d31a:	9307      	strlt	r3, [sp, #28]
 800d31c:	bfb8      	it	lt
 800d31e:	9204      	strlt	r2, [sp, #16]
 800d320:	7823      	ldrb	r3, [r4, #0]
 800d322:	2b2e      	cmp	r3, #46	@ 0x2e
 800d324:	d10a      	bne.n	800d33c <_svfiprintf_r+0x130>
 800d326:	7863      	ldrb	r3, [r4, #1]
 800d328:	2b2a      	cmp	r3, #42	@ 0x2a
 800d32a:	d132      	bne.n	800d392 <_svfiprintf_r+0x186>
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	3402      	adds	r4, #2
 800d330:	1d1a      	adds	r2, r3, #4
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	9203      	str	r2, [sp, #12]
 800d336:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d33a:	9305      	str	r3, [sp, #20]
 800d33c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d3f4 <_svfiprintf_r+0x1e8>
 800d340:	2203      	movs	r2, #3
 800d342:	4650      	mov	r0, sl
 800d344:	7821      	ldrb	r1, [r4, #0]
 800d346:	f7fe fc18 	bl	800bb7a <memchr>
 800d34a:	b138      	cbz	r0, 800d35c <_svfiprintf_r+0x150>
 800d34c:	2240      	movs	r2, #64	@ 0x40
 800d34e:	9b04      	ldr	r3, [sp, #16]
 800d350:	eba0 000a 	sub.w	r0, r0, sl
 800d354:	4082      	lsls	r2, r0
 800d356:	4313      	orrs	r3, r2
 800d358:	3401      	adds	r4, #1
 800d35a:	9304      	str	r3, [sp, #16]
 800d35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d360:	2206      	movs	r2, #6
 800d362:	4825      	ldr	r0, [pc, #148]	@ (800d3f8 <_svfiprintf_r+0x1ec>)
 800d364:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d368:	f7fe fc07 	bl	800bb7a <memchr>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d036      	beq.n	800d3de <_svfiprintf_r+0x1d2>
 800d370:	4b22      	ldr	r3, [pc, #136]	@ (800d3fc <_svfiprintf_r+0x1f0>)
 800d372:	bb1b      	cbnz	r3, 800d3bc <_svfiprintf_r+0x1b0>
 800d374:	9b03      	ldr	r3, [sp, #12]
 800d376:	3307      	adds	r3, #7
 800d378:	f023 0307 	bic.w	r3, r3, #7
 800d37c:	3308      	adds	r3, #8
 800d37e:	9303      	str	r3, [sp, #12]
 800d380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d382:	4433      	add	r3, r6
 800d384:	9309      	str	r3, [sp, #36]	@ 0x24
 800d386:	e76a      	b.n	800d25e <_svfiprintf_r+0x52>
 800d388:	460c      	mov	r4, r1
 800d38a:	2001      	movs	r0, #1
 800d38c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d390:	e7a8      	b.n	800d2e4 <_svfiprintf_r+0xd8>
 800d392:	2300      	movs	r3, #0
 800d394:	f04f 0c0a 	mov.w	ip, #10
 800d398:	4619      	mov	r1, r3
 800d39a:	3401      	adds	r4, #1
 800d39c:	9305      	str	r3, [sp, #20]
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3a4:	3a30      	subs	r2, #48	@ 0x30
 800d3a6:	2a09      	cmp	r2, #9
 800d3a8:	d903      	bls.n	800d3b2 <_svfiprintf_r+0x1a6>
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d0c6      	beq.n	800d33c <_svfiprintf_r+0x130>
 800d3ae:	9105      	str	r1, [sp, #20]
 800d3b0:	e7c4      	b.n	800d33c <_svfiprintf_r+0x130>
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ba:	e7f0      	b.n	800d39e <_svfiprintf_r+0x192>
 800d3bc:	ab03      	add	r3, sp, #12
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	462a      	mov	r2, r5
 800d3c2:	4638      	mov	r0, r7
 800d3c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d400 <_svfiprintf_r+0x1f4>)
 800d3c6:	a904      	add	r1, sp, #16
 800d3c8:	f7fd fe74 	bl	800b0b4 <_printf_float>
 800d3cc:	1c42      	adds	r2, r0, #1
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	d1d6      	bne.n	800d380 <_svfiprintf_r+0x174>
 800d3d2:	89ab      	ldrh	r3, [r5, #12]
 800d3d4:	065b      	lsls	r3, r3, #25
 800d3d6:	f53f af2d 	bmi.w	800d234 <_svfiprintf_r+0x28>
 800d3da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3dc:	e72c      	b.n	800d238 <_svfiprintf_r+0x2c>
 800d3de:	ab03      	add	r3, sp, #12
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	462a      	mov	r2, r5
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	4b06      	ldr	r3, [pc, #24]	@ (800d400 <_svfiprintf_r+0x1f4>)
 800d3e8:	a904      	add	r1, sp, #16
 800d3ea:	f7fe f901 	bl	800b5f0 <_printf_i>
 800d3ee:	e7ed      	b.n	800d3cc <_svfiprintf_r+0x1c0>
 800d3f0:	0800e768 	.word	0x0800e768
 800d3f4:	0800e76e 	.word	0x0800e76e
 800d3f8:	0800e772 	.word	0x0800e772
 800d3fc:	0800b0b5 	.word	0x0800b0b5
 800d400:	0800d155 	.word	0x0800d155

0800d404 <__sflush_r>:
 800d404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	0716      	lsls	r6, r2, #28
 800d40c:	4605      	mov	r5, r0
 800d40e:	460c      	mov	r4, r1
 800d410:	d454      	bmi.n	800d4bc <__sflush_r+0xb8>
 800d412:	684b      	ldr	r3, [r1, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	dc02      	bgt.n	800d41e <__sflush_r+0x1a>
 800d418:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	dd48      	ble.n	800d4b0 <__sflush_r+0xac>
 800d41e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d420:	2e00      	cmp	r6, #0
 800d422:	d045      	beq.n	800d4b0 <__sflush_r+0xac>
 800d424:	2300      	movs	r3, #0
 800d426:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d42a:	682f      	ldr	r7, [r5, #0]
 800d42c:	6a21      	ldr	r1, [r4, #32]
 800d42e:	602b      	str	r3, [r5, #0]
 800d430:	d030      	beq.n	800d494 <__sflush_r+0x90>
 800d432:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	0759      	lsls	r1, r3, #29
 800d438:	d505      	bpl.n	800d446 <__sflush_r+0x42>
 800d43a:	6863      	ldr	r3, [r4, #4]
 800d43c:	1ad2      	subs	r2, r2, r3
 800d43e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d440:	b10b      	cbz	r3, 800d446 <__sflush_r+0x42>
 800d442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d444:	1ad2      	subs	r2, r2, r3
 800d446:	2300      	movs	r3, #0
 800d448:	4628      	mov	r0, r5
 800d44a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d44c:	6a21      	ldr	r1, [r4, #32]
 800d44e:	47b0      	blx	r6
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	d106      	bne.n	800d464 <__sflush_r+0x60>
 800d456:	6829      	ldr	r1, [r5, #0]
 800d458:	291d      	cmp	r1, #29
 800d45a:	d82b      	bhi.n	800d4b4 <__sflush_r+0xb0>
 800d45c:	4a28      	ldr	r2, [pc, #160]	@ (800d500 <__sflush_r+0xfc>)
 800d45e:	410a      	asrs	r2, r1
 800d460:	07d6      	lsls	r6, r2, #31
 800d462:	d427      	bmi.n	800d4b4 <__sflush_r+0xb0>
 800d464:	2200      	movs	r2, #0
 800d466:	6062      	str	r2, [r4, #4]
 800d468:	6922      	ldr	r2, [r4, #16]
 800d46a:	04d9      	lsls	r1, r3, #19
 800d46c:	6022      	str	r2, [r4, #0]
 800d46e:	d504      	bpl.n	800d47a <__sflush_r+0x76>
 800d470:	1c42      	adds	r2, r0, #1
 800d472:	d101      	bne.n	800d478 <__sflush_r+0x74>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b903      	cbnz	r3, 800d47a <__sflush_r+0x76>
 800d478:	6560      	str	r0, [r4, #84]	@ 0x54
 800d47a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d47c:	602f      	str	r7, [r5, #0]
 800d47e:	b1b9      	cbz	r1, 800d4b0 <__sflush_r+0xac>
 800d480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d484:	4299      	cmp	r1, r3
 800d486:	d002      	beq.n	800d48e <__sflush_r+0x8a>
 800d488:	4628      	mov	r0, r5
 800d48a:	f7ff f9e5 	bl	800c858 <_free_r>
 800d48e:	2300      	movs	r3, #0
 800d490:	6363      	str	r3, [r4, #52]	@ 0x34
 800d492:	e00d      	b.n	800d4b0 <__sflush_r+0xac>
 800d494:	2301      	movs	r3, #1
 800d496:	4628      	mov	r0, r5
 800d498:	47b0      	blx	r6
 800d49a:	4602      	mov	r2, r0
 800d49c:	1c50      	adds	r0, r2, #1
 800d49e:	d1c9      	bne.n	800d434 <__sflush_r+0x30>
 800d4a0:	682b      	ldr	r3, [r5, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d0c6      	beq.n	800d434 <__sflush_r+0x30>
 800d4a6:	2b1d      	cmp	r3, #29
 800d4a8:	d001      	beq.n	800d4ae <__sflush_r+0xaa>
 800d4aa:	2b16      	cmp	r3, #22
 800d4ac:	d11d      	bne.n	800d4ea <__sflush_r+0xe6>
 800d4ae:	602f      	str	r7, [r5, #0]
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e021      	b.n	800d4f8 <__sflush_r+0xf4>
 800d4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4b8:	b21b      	sxth	r3, r3
 800d4ba:	e01a      	b.n	800d4f2 <__sflush_r+0xee>
 800d4bc:	690f      	ldr	r7, [r1, #16]
 800d4be:	2f00      	cmp	r7, #0
 800d4c0:	d0f6      	beq.n	800d4b0 <__sflush_r+0xac>
 800d4c2:	0793      	lsls	r3, r2, #30
 800d4c4:	bf18      	it	ne
 800d4c6:	2300      	movne	r3, #0
 800d4c8:	680e      	ldr	r6, [r1, #0]
 800d4ca:	bf08      	it	eq
 800d4cc:	694b      	ldreq	r3, [r1, #20]
 800d4ce:	1bf6      	subs	r6, r6, r7
 800d4d0:	600f      	str	r7, [r1, #0]
 800d4d2:	608b      	str	r3, [r1, #8]
 800d4d4:	2e00      	cmp	r6, #0
 800d4d6:	ddeb      	ble.n	800d4b0 <__sflush_r+0xac>
 800d4d8:	4633      	mov	r3, r6
 800d4da:	463a      	mov	r2, r7
 800d4dc:	4628      	mov	r0, r5
 800d4de:	6a21      	ldr	r1, [r4, #32]
 800d4e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d4e4:	47e0      	blx	ip
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	dc07      	bgt.n	800d4fa <__sflush_r+0xf6>
 800d4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4fa:	4407      	add	r7, r0
 800d4fc:	1a36      	subs	r6, r6, r0
 800d4fe:	e7e9      	b.n	800d4d4 <__sflush_r+0xd0>
 800d500:	dfbffffe 	.word	0xdfbffffe

0800d504 <_fflush_r>:
 800d504:	b538      	push	{r3, r4, r5, lr}
 800d506:	690b      	ldr	r3, [r1, #16]
 800d508:	4605      	mov	r5, r0
 800d50a:	460c      	mov	r4, r1
 800d50c:	b913      	cbnz	r3, 800d514 <_fflush_r+0x10>
 800d50e:	2500      	movs	r5, #0
 800d510:	4628      	mov	r0, r5
 800d512:	bd38      	pop	{r3, r4, r5, pc}
 800d514:	b118      	cbz	r0, 800d51e <_fflush_r+0x1a>
 800d516:	6a03      	ldr	r3, [r0, #32]
 800d518:	b90b      	cbnz	r3, 800d51e <_fflush_r+0x1a>
 800d51a:	f7fe fa15 	bl	800b948 <__sinit>
 800d51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0f3      	beq.n	800d50e <_fflush_r+0xa>
 800d526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d528:	07d0      	lsls	r0, r2, #31
 800d52a:	d404      	bmi.n	800d536 <_fflush_r+0x32>
 800d52c:	0599      	lsls	r1, r3, #22
 800d52e:	d402      	bmi.n	800d536 <_fflush_r+0x32>
 800d530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d532:	f7fe fb20 	bl	800bb76 <__retarget_lock_acquire_recursive>
 800d536:	4628      	mov	r0, r5
 800d538:	4621      	mov	r1, r4
 800d53a:	f7ff ff63 	bl	800d404 <__sflush_r>
 800d53e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d540:	4605      	mov	r5, r0
 800d542:	07da      	lsls	r2, r3, #31
 800d544:	d4e4      	bmi.n	800d510 <_fflush_r+0xc>
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	059b      	lsls	r3, r3, #22
 800d54a:	d4e1      	bmi.n	800d510 <_fflush_r+0xc>
 800d54c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d54e:	f7fe fb13 	bl	800bb78 <__retarget_lock_release_recursive>
 800d552:	e7dd      	b.n	800d510 <_fflush_r+0xc>

0800d554 <memmove>:
 800d554:	4288      	cmp	r0, r1
 800d556:	b510      	push	{r4, lr}
 800d558:	eb01 0402 	add.w	r4, r1, r2
 800d55c:	d902      	bls.n	800d564 <memmove+0x10>
 800d55e:	4284      	cmp	r4, r0
 800d560:	4623      	mov	r3, r4
 800d562:	d807      	bhi.n	800d574 <memmove+0x20>
 800d564:	1e43      	subs	r3, r0, #1
 800d566:	42a1      	cmp	r1, r4
 800d568:	d008      	beq.n	800d57c <memmove+0x28>
 800d56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d56e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d572:	e7f8      	b.n	800d566 <memmove+0x12>
 800d574:	4601      	mov	r1, r0
 800d576:	4402      	add	r2, r0
 800d578:	428a      	cmp	r2, r1
 800d57a:	d100      	bne.n	800d57e <memmove+0x2a>
 800d57c:	bd10      	pop	{r4, pc}
 800d57e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d586:	e7f7      	b.n	800d578 <memmove+0x24>

0800d588 <_sbrk_r>:
 800d588:	b538      	push	{r3, r4, r5, lr}
 800d58a:	2300      	movs	r3, #0
 800d58c:	4d05      	ldr	r5, [pc, #20]	@ (800d5a4 <_sbrk_r+0x1c>)
 800d58e:	4604      	mov	r4, r0
 800d590:	4608      	mov	r0, r1
 800d592:	602b      	str	r3, [r5, #0]
 800d594:	f7f7 fab2 	bl	8004afc <_sbrk>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_sbrk_r+0x1a>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_sbrk_r+0x1a>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	20005d80 	.word	0x20005d80

0800d5a8 <__assert_func>:
 800d5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5aa:	4614      	mov	r4, r2
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b09      	ldr	r3, [pc, #36]	@ (800d5d4 <__assert_func+0x2c>)
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68d8      	ldr	r0, [r3, #12]
 800d5b6:	b954      	cbnz	r4, 800d5ce <__assert_func+0x26>
 800d5b8:	4b07      	ldr	r3, [pc, #28]	@ (800d5d8 <__assert_func+0x30>)
 800d5ba:	461c      	mov	r4, r3
 800d5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5c0:	9100      	str	r1, [sp, #0]
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	4905      	ldr	r1, [pc, #20]	@ (800d5dc <__assert_func+0x34>)
 800d5c6:	f000 f86f 	bl	800d6a8 <fiprintf>
 800d5ca:	f000 f87f 	bl	800d6cc <abort>
 800d5ce:	4b04      	ldr	r3, [pc, #16]	@ (800d5e0 <__assert_func+0x38>)
 800d5d0:	e7f4      	b.n	800d5bc <__assert_func+0x14>
 800d5d2:	bf00      	nop
 800d5d4:	20000078 	.word	0x20000078
 800d5d8:	0800e7be 	.word	0x0800e7be
 800d5dc:	0800e790 	.word	0x0800e790
 800d5e0:	0800e783 	.word	0x0800e783

0800d5e4 <_calloc_r>:
 800d5e4:	b570      	push	{r4, r5, r6, lr}
 800d5e6:	fba1 5402 	umull	r5, r4, r1, r2
 800d5ea:	b93c      	cbnz	r4, 800d5fc <_calloc_r+0x18>
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7ff f9a5 	bl	800c93c <_malloc_r>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	b928      	cbnz	r0, 800d602 <_calloc_r+0x1e>
 800d5f6:	2600      	movs	r6, #0
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	220c      	movs	r2, #12
 800d5fe:	6002      	str	r2, [r0, #0]
 800d600:	e7f9      	b.n	800d5f6 <_calloc_r+0x12>
 800d602:	462a      	mov	r2, r5
 800d604:	4621      	mov	r1, r4
 800d606:	f7fe fa38 	bl	800ba7a <memset>
 800d60a:	e7f5      	b.n	800d5f8 <_calloc_r+0x14>

0800d60c <__ascii_mbtowc>:
 800d60c:	b082      	sub	sp, #8
 800d60e:	b901      	cbnz	r1, 800d612 <__ascii_mbtowc+0x6>
 800d610:	a901      	add	r1, sp, #4
 800d612:	b142      	cbz	r2, 800d626 <__ascii_mbtowc+0x1a>
 800d614:	b14b      	cbz	r3, 800d62a <__ascii_mbtowc+0x1e>
 800d616:	7813      	ldrb	r3, [r2, #0]
 800d618:	600b      	str	r3, [r1, #0]
 800d61a:	7812      	ldrb	r2, [r2, #0]
 800d61c:	1e10      	subs	r0, r2, #0
 800d61e:	bf18      	it	ne
 800d620:	2001      	movne	r0, #1
 800d622:	b002      	add	sp, #8
 800d624:	4770      	bx	lr
 800d626:	4610      	mov	r0, r2
 800d628:	e7fb      	b.n	800d622 <__ascii_mbtowc+0x16>
 800d62a:	f06f 0001 	mvn.w	r0, #1
 800d62e:	e7f8      	b.n	800d622 <__ascii_mbtowc+0x16>

0800d630 <_realloc_r>:
 800d630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d634:	4680      	mov	r8, r0
 800d636:	4615      	mov	r5, r2
 800d638:	460c      	mov	r4, r1
 800d63a:	b921      	cbnz	r1, 800d646 <_realloc_r+0x16>
 800d63c:	4611      	mov	r1, r2
 800d63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d642:	f7ff b97b 	b.w	800c93c <_malloc_r>
 800d646:	b92a      	cbnz	r2, 800d654 <_realloc_r+0x24>
 800d648:	f7ff f906 	bl	800c858 <_free_r>
 800d64c:	2400      	movs	r4, #0
 800d64e:	4620      	mov	r0, r4
 800d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d654:	f000 f841 	bl	800d6da <_malloc_usable_size_r>
 800d658:	4285      	cmp	r5, r0
 800d65a:	4606      	mov	r6, r0
 800d65c:	d802      	bhi.n	800d664 <_realloc_r+0x34>
 800d65e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d662:	d8f4      	bhi.n	800d64e <_realloc_r+0x1e>
 800d664:	4629      	mov	r1, r5
 800d666:	4640      	mov	r0, r8
 800d668:	f7ff f968 	bl	800c93c <_malloc_r>
 800d66c:	4607      	mov	r7, r0
 800d66e:	2800      	cmp	r0, #0
 800d670:	d0ec      	beq.n	800d64c <_realloc_r+0x1c>
 800d672:	42b5      	cmp	r5, r6
 800d674:	462a      	mov	r2, r5
 800d676:	4621      	mov	r1, r4
 800d678:	bf28      	it	cs
 800d67a:	4632      	movcs	r2, r6
 800d67c:	f7fe fa8b 	bl	800bb96 <memcpy>
 800d680:	4621      	mov	r1, r4
 800d682:	4640      	mov	r0, r8
 800d684:	f7ff f8e8 	bl	800c858 <_free_r>
 800d688:	463c      	mov	r4, r7
 800d68a:	e7e0      	b.n	800d64e <_realloc_r+0x1e>

0800d68c <__ascii_wctomb>:
 800d68c:	4603      	mov	r3, r0
 800d68e:	4608      	mov	r0, r1
 800d690:	b141      	cbz	r1, 800d6a4 <__ascii_wctomb+0x18>
 800d692:	2aff      	cmp	r2, #255	@ 0xff
 800d694:	d904      	bls.n	800d6a0 <__ascii_wctomb+0x14>
 800d696:	228a      	movs	r2, #138	@ 0x8a
 800d698:	f04f 30ff 	mov.w	r0, #4294967295
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	4770      	bx	lr
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	700a      	strb	r2, [r1, #0]
 800d6a4:	4770      	bx	lr
	...

0800d6a8 <fiprintf>:
 800d6a8:	b40e      	push	{r1, r2, r3}
 800d6aa:	b503      	push	{r0, r1, lr}
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	ab03      	add	r3, sp, #12
 800d6b0:	4805      	ldr	r0, [pc, #20]	@ (800d6c8 <fiprintf+0x20>)
 800d6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6b6:	6800      	ldr	r0, [r0, #0]
 800d6b8:	9301      	str	r3, [sp, #4]
 800d6ba:	f000 f83d 	bl	800d738 <_vfiprintf_r>
 800d6be:	b002      	add	sp, #8
 800d6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6c4:	b003      	add	sp, #12
 800d6c6:	4770      	bx	lr
 800d6c8:	20000078 	.word	0x20000078

0800d6cc <abort>:
 800d6cc:	2006      	movs	r0, #6
 800d6ce:	b508      	push	{r3, lr}
 800d6d0:	f000 fa06 	bl	800dae0 <raise>
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	f7f7 f99c 	bl	8004a12 <_exit>

0800d6da <_malloc_usable_size_r>:
 800d6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6de:	1f18      	subs	r0, r3, #4
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	bfbc      	itt	lt
 800d6e4:	580b      	ldrlt	r3, [r1, r0]
 800d6e6:	18c0      	addlt	r0, r0, r3
 800d6e8:	4770      	bx	lr

0800d6ea <__sfputc_r>:
 800d6ea:	6893      	ldr	r3, [r2, #8]
 800d6ec:	b410      	push	{r4}
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	6093      	str	r3, [r2, #8]
 800d6f4:	da07      	bge.n	800d706 <__sfputc_r+0x1c>
 800d6f6:	6994      	ldr	r4, [r2, #24]
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	db01      	blt.n	800d700 <__sfputc_r+0x16>
 800d6fc:	290a      	cmp	r1, #10
 800d6fe:	d102      	bne.n	800d706 <__sfputc_r+0x1c>
 800d700:	bc10      	pop	{r4}
 800d702:	f000 b931 	b.w	800d968 <__swbuf_r>
 800d706:	6813      	ldr	r3, [r2, #0]
 800d708:	1c58      	adds	r0, r3, #1
 800d70a:	6010      	str	r0, [r2, #0]
 800d70c:	7019      	strb	r1, [r3, #0]
 800d70e:	4608      	mov	r0, r1
 800d710:	bc10      	pop	{r4}
 800d712:	4770      	bx	lr

0800d714 <__sfputs_r>:
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d716:	4606      	mov	r6, r0
 800d718:	460f      	mov	r7, r1
 800d71a:	4614      	mov	r4, r2
 800d71c:	18d5      	adds	r5, r2, r3
 800d71e:	42ac      	cmp	r4, r5
 800d720:	d101      	bne.n	800d726 <__sfputs_r+0x12>
 800d722:	2000      	movs	r0, #0
 800d724:	e007      	b.n	800d736 <__sfputs_r+0x22>
 800d726:	463a      	mov	r2, r7
 800d728:	4630      	mov	r0, r6
 800d72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72e:	f7ff ffdc 	bl	800d6ea <__sfputc_r>
 800d732:	1c43      	adds	r3, r0, #1
 800d734:	d1f3      	bne.n	800d71e <__sfputs_r+0xa>
 800d736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d738 <_vfiprintf_r>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	460d      	mov	r5, r1
 800d73e:	4614      	mov	r4, r2
 800d740:	4698      	mov	r8, r3
 800d742:	4606      	mov	r6, r0
 800d744:	b09d      	sub	sp, #116	@ 0x74
 800d746:	b118      	cbz	r0, 800d750 <_vfiprintf_r+0x18>
 800d748:	6a03      	ldr	r3, [r0, #32]
 800d74a:	b90b      	cbnz	r3, 800d750 <_vfiprintf_r+0x18>
 800d74c:	f7fe f8fc 	bl	800b948 <__sinit>
 800d750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d752:	07d9      	lsls	r1, r3, #31
 800d754:	d405      	bmi.n	800d762 <_vfiprintf_r+0x2a>
 800d756:	89ab      	ldrh	r3, [r5, #12]
 800d758:	059a      	lsls	r2, r3, #22
 800d75a:	d402      	bmi.n	800d762 <_vfiprintf_r+0x2a>
 800d75c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d75e:	f7fe fa0a 	bl	800bb76 <__retarget_lock_acquire_recursive>
 800d762:	89ab      	ldrh	r3, [r5, #12]
 800d764:	071b      	lsls	r3, r3, #28
 800d766:	d501      	bpl.n	800d76c <_vfiprintf_r+0x34>
 800d768:	692b      	ldr	r3, [r5, #16]
 800d76a:	b99b      	cbnz	r3, 800d794 <_vfiprintf_r+0x5c>
 800d76c:	4629      	mov	r1, r5
 800d76e:	4630      	mov	r0, r6
 800d770:	f000 f938 	bl	800d9e4 <__swsetup_r>
 800d774:	b170      	cbz	r0, 800d794 <_vfiprintf_r+0x5c>
 800d776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d778:	07dc      	lsls	r4, r3, #31
 800d77a:	d504      	bpl.n	800d786 <_vfiprintf_r+0x4e>
 800d77c:	f04f 30ff 	mov.w	r0, #4294967295
 800d780:	b01d      	add	sp, #116	@ 0x74
 800d782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d786:	89ab      	ldrh	r3, [r5, #12]
 800d788:	0598      	lsls	r0, r3, #22
 800d78a:	d4f7      	bmi.n	800d77c <_vfiprintf_r+0x44>
 800d78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d78e:	f7fe f9f3 	bl	800bb78 <__retarget_lock_release_recursive>
 800d792:	e7f3      	b.n	800d77c <_vfiprintf_r+0x44>
 800d794:	2300      	movs	r3, #0
 800d796:	9309      	str	r3, [sp, #36]	@ 0x24
 800d798:	2320      	movs	r3, #32
 800d79a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d79e:	2330      	movs	r3, #48	@ 0x30
 800d7a0:	f04f 0901 	mov.w	r9, #1
 800d7a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d954 <_vfiprintf_r+0x21c>
 800d7ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7b0:	4623      	mov	r3, r4
 800d7b2:	469a      	mov	sl, r3
 800d7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7b8:	b10a      	cbz	r2, 800d7be <_vfiprintf_r+0x86>
 800d7ba:	2a25      	cmp	r2, #37	@ 0x25
 800d7bc:	d1f9      	bne.n	800d7b2 <_vfiprintf_r+0x7a>
 800d7be:	ebba 0b04 	subs.w	fp, sl, r4
 800d7c2:	d00b      	beq.n	800d7dc <_vfiprintf_r+0xa4>
 800d7c4:	465b      	mov	r3, fp
 800d7c6:	4622      	mov	r2, r4
 800d7c8:	4629      	mov	r1, r5
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f7ff ffa2 	bl	800d714 <__sfputs_r>
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	f000 80a7 	beq.w	800d924 <_vfiprintf_r+0x1ec>
 800d7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7d8:	445a      	add	r2, fp
 800d7da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 809f 	beq.w	800d924 <_vfiprintf_r+0x1ec>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7f0:	f10a 0a01 	add.w	sl, sl, #1
 800d7f4:	9304      	str	r3, [sp, #16]
 800d7f6:	9307      	str	r3, [sp, #28]
 800d7f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7fe:	4654      	mov	r4, sl
 800d800:	2205      	movs	r2, #5
 800d802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d806:	4853      	ldr	r0, [pc, #332]	@ (800d954 <_vfiprintf_r+0x21c>)
 800d808:	f7fe f9b7 	bl	800bb7a <memchr>
 800d80c:	9a04      	ldr	r2, [sp, #16]
 800d80e:	b9d8      	cbnz	r0, 800d848 <_vfiprintf_r+0x110>
 800d810:	06d1      	lsls	r1, r2, #27
 800d812:	bf44      	itt	mi
 800d814:	2320      	movmi	r3, #32
 800d816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d81a:	0713      	lsls	r3, r2, #28
 800d81c:	bf44      	itt	mi
 800d81e:	232b      	movmi	r3, #43	@ 0x2b
 800d820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d824:	f89a 3000 	ldrb.w	r3, [sl]
 800d828:	2b2a      	cmp	r3, #42	@ 0x2a
 800d82a:	d015      	beq.n	800d858 <_vfiprintf_r+0x120>
 800d82c:	4654      	mov	r4, sl
 800d82e:	2000      	movs	r0, #0
 800d830:	f04f 0c0a 	mov.w	ip, #10
 800d834:	9a07      	ldr	r2, [sp, #28]
 800d836:	4621      	mov	r1, r4
 800d838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d83c:	3b30      	subs	r3, #48	@ 0x30
 800d83e:	2b09      	cmp	r3, #9
 800d840:	d94b      	bls.n	800d8da <_vfiprintf_r+0x1a2>
 800d842:	b1b0      	cbz	r0, 800d872 <_vfiprintf_r+0x13a>
 800d844:	9207      	str	r2, [sp, #28]
 800d846:	e014      	b.n	800d872 <_vfiprintf_r+0x13a>
 800d848:	eba0 0308 	sub.w	r3, r0, r8
 800d84c:	fa09 f303 	lsl.w	r3, r9, r3
 800d850:	4313      	orrs	r3, r2
 800d852:	46a2      	mov	sl, r4
 800d854:	9304      	str	r3, [sp, #16]
 800d856:	e7d2      	b.n	800d7fe <_vfiprintf_r+0xc6>
 800d858:	9b03      	ldr	r3, [sp, #12]
 800d85a:	1d19      	adds	r1, r3, #4
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	9103      	str	r1, [sp, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	bfbb      	ittet	lt
 800d864:	425b      	neglt	r3, r3
 800d866:	f042 0202 	orrlt.w	r2, r2, #2
 800d86a:	9307      	strge	r3, [sp, #28]
 800d86c:	9307      	strlt	r3, [sp, #28]
 800d86e:	bfb8      	it	lt
 800d870:	9204      	strlt	r2, [sp, #16]
 800d872:	7823      	ldrb	r3, [r4, #0]
 800d874:	2b2e      	cmp	r3, #46	@ 0x2e
 800d876:	d10a      	bne.n	800d88e <_vfiprintf_r+0x156>
 800d878:	7863      	ldrb	r3, [r4, #1]
 800d87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d87c:	d132      	bne.n	800d8e4 <_vfiprintf_r+0x1ac>
 800d87e:	9b03      	ldr	r3, [sp, #12]
 800d880:	3402      	adds	r4, #2
 800d882:	1d1a      	adds	r2, r3, #4
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	9203      	str	r2, [sp, #12]
 800d888:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d88c:	9305      	str	r3, [sp, #20]
 800d88e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d958 <_vfiprintf_r+0x220>
 800d892:	2203      	movs	r2, #3
 800d894:	4650      	mov	r0, sl
 800d896:	7821      	ldrb	r1, [r4, #0]
 800d898:	f7fe f96f 	bl	800bb7a <memchr>
 800d89c:	b138      	cbz	r0, 800d8ae <_vfiprintf_r+0x176>
 800d89e:	2240      	movs	r2, #64	@ 0x40
 800d8a0:	9b04      	ldr	r3, [sp, #16]
 800d8a2:	eba0 000a 	sub.w	r0, r0, sl
 800d8a6:	4082      	lsls	r2, r0
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	3401      	adds	r4, #1
 800d8ac:	9304      	str	r3, [sp, #16]
 800d8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b2:	2206      	movs	r2, #6
 800d8b4:	4829      	ldr	r0, [pc, #164]	@ (800d95c <_vfiprintf_r+0x224>)
 800d8b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8ba:	f7fe f95e 	bl	800bb7a <memchr>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d03f      	beq.n	800d942 <_vfiprintf_r+0x20a>
 800d8c2:	4b27      	ldr	r3, [pc, #156]	@ (800d960 <_vfiprintf_r+0x228>)
 800d8c4:	bb1b      	cbnz	r3, 800d90e <_vfiprintf_r+0x1d6>
 800d8c6:	9b03      	ldr	r3, [sp, #12]
 800d8c8:	3307      	adds	r3, #7
 800d8ca:	f023 0307 	bic.w	r3, r3, #7
 800d8ce:	3308      	adds	r3, #8
 800d8d0:	9303      	str	r3, [sp, #12]
 800d8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d4:	443b      	add	r3, r7
 800d8d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8d8:	e76a      	b.n	800d7b0 <_vfiprintf_r+0x78>
 800d8da:	460c      	mov	r4, r1
 800d8dc:	2001      	movs	r0, #1
 800d8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8e2:	e7a8      	b.n	800d836 <_vfiprintf_r+0xfe>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f04f 0c0a 	mov.w	ip, #10
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	3401      	adds	r4, #1
 800d8ee:	9305      	str	r3, [sp, #20]
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8f6:	3a30      	subs	r2, #48	@ 0x30
 800d8f8:	2a09      	cmp	r2, #9
 800d8fa:	d903      	bls.n	800d904 <_vfiprintf_r+0x1cc>
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d0c6      	beq.n	800d88e <_vfiprintf_r+0x156>
 800d900:	9105      	str	r1, [sp, #20]
 800d902:	e7c4      	b.n	800d88e <_vfiprintf_r+0x156>
 800d904:	4604      	mov	r4, r0
 800d906:	2301      	movs	r3, #1
 800d908:	fb0c 2101 	mla	r1, ip, r1, r2
 800d90c:	e7f0      	b.n	800d8f0 <_vfiprintf_r+0x1b8>
 800d90e:	ab03      	add	r3, sp, #12
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	462a      	mov	r2, r5
 800d914:	4630      	mov	r0, r6
 800d916:	4b13      	ldr	r3, [pc, #76]	@ (800d964 <_vfiprintf_r+0x22c>)
 800d918:	a904      	add	r1, sp, #16
 800d91a:	f7fd fbcb 	bl	800b0b4 <_printf_float>
 800d91e:	4607      	mov	r7, r0
 800d920:	1c78      	adds	r0, r7, #1
 800d922:	d1d6      	bne.n	800d8d2 <_vfiprintf_r+0x19a>
 800d924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d926:	07d9      	lsls	r1, r3, #31
 800d928:	d405      	bmi.n	800d936 <_vfiprintf_r+0x1fe>
 800d92a:	89ab      	ldrh	r3, [r5, #12]
 800d92c:	059a      	lsls	r2, r3, #22
 800d92e:	d402      	bmi.n	800d936 <_vfiprintf_r+0x1fe>
 800d930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d932:	f7fe f921 	bl	800bb78 <__retarget_lock_release_recursive>
 800d936:	89ab      	ldrh	r3, [r5, #12]
 800d938:	065b      	lsls	r3, r3, #25
 800d93a:	f53f af1f 	bmi.w	800d77c <_vfiprintf_r+0x44>
 800d93e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d940:	e71e      	b.n	800d780 <_vfiprintf_r+0x48>
 800d942:	ab03      	add	r3, sp, #12
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	462a      	mov	r2, r5
 800d948:	4630      	mov	r0, r6
 800d94a:	4b06      	ldr	r3, [pc, #24]	@ (800d964 <_vfiprintf_r+0x22c>)
 800d94c:	a904      	add	r1, sp, #16
 800d94e:	f7fd fe4f 	bl	800b5f0 <_printf_i>
 800d952:	e7e4      	b.n	800d91e <_vfiprintf_r+0x1e6>
 800d954:	0800e768 	.word	0x0800e768
 800d958:	0800e76e 	.word	0x0800e76e
 800d95c:	0800e772 	.word	0x0800e772
 800d960:	0800b0b5 	.word	0x0800b0b5
 800d964:	0800d715 	.word	0x0800d715

0800d968 <__swbuf_r>:
 800d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96a:	460e      	mov	r6, r1
 800d96c:	4614      	mov	r4, r2
 800d96e:	4605      	mov	r5, r0
 800d970:	b118      	cbz	r0, 800d97a <__swbuf_r+0x12>
 800d972:	6a03      	ldr	r3, [r0, #32]
 800d974:	b90b      	cbnz	r3, 800d97a <__swbuf_r+0x12>
 800d976:	f7fd ffe7 	bl	800b948 <__sinit>
 800d97a:	69a3      	ldr	r3, [r4, #24]
 800d97c:	60a3      	str	r3, [r4, #8]
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	071a      	lsls	r2, r3, #28
 800d982:	d501      	bpl.n	800d988 <__swbuf_r+0x20>
 800d984:	6923      	ldr	r3, [r4, #16]
 800d986:	b943      	cbnz	r3, 800d99a <__swbuf_r+0x32>
 800d988:	4621      	mov	r1, r4
 800d98a:	4628      	mov	r0, r5
 800d98c:	f000 f82a 	bl	800d9e4 <__swsetup_r>
 800d990:	b118      	cbz	r0, 800d99a <__swbuf_r+0x32>
 800d992:	f04f 37ff 	mov.w	r7, #4294967295
 800d996:	4638      	mov	r0, r7
 800d998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	6922      	ldr	r2, [r4, #16]
 800d99e:	b2f6      	uxtb	r6, r6
 800d9a0:	1a98      	subs	r0, r3, r2
 800d9a2:	6963      	ldr	r3, [r4, #20]
 800d9a4:	4637      	mov	r7, r6
 800d9a6:	4283      	cmp	r3, r0
 800d9a8:	dc05      	bgt.n	800d9b6 <__swbuf_r+0x4e>
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	f7ff fda9 	bl	800d504 <_fflush_r>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d1ed      	bne.n	800d992 <__swbuf_r+0x2a>
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	60a3      	str	r3, [r4, #8]
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	6022      	str	r2, [r4, #0]
 800d9c2:	701e      	strb	r6, [r3, #0]
 800d9c4:	6962      	ldr	r2, [r4, #20]
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d004      	beq.n	800d9d6 <__swbuf_r+0x6e>
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	07db      	lsls	r3, r3, #31
 800d9d0:	d5e1      	bpl.n	800d996 <__swbuf_r+0x2e>
 800d9d2:	2e0a      	cmp	r6, #10
 800d9d4:	d1df      	bne.n	800d996 <__swbuf_r+0x2e>
 800d9d6:	4621      	mov	r1, r4
 800d9d8:	4628      	mov	r0, r5
 800d9da:	f7ff fd93 	bl	800d504 <_fflush_r>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0d9      	beq.n	800d996 <__swbuf_r+0x2e>
 800d9e2:	e7d6      	b.n	800d992 <__swbuf_r+0x2a>

0800d9e4 <__swsetup_r>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4b29      	ldr	r3, [pc, #164]	@ (800da8c <__swsetup_r+0xa8>)
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	6818      	ldr	r0, [r3, #0]
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	b118      	cbz	r0, 800d9f8 <__swsetup_r+0x14>
 800d9f0:	6a03      	ldr	r3, [r0, #32]
 800d9f2:	b90b      	cbnz	r3, 800d9f8 <__swsetup_r+0x14>
 800d9f4:	f7fd ffa8 	bl	800b948 <__sinit>
 800d9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9fc:	0719      	lsls	r1, r3, #28
 800d9fe:	d422      	bmi.n	800da46 <__swsetup_r+0x62>
 800da00:	06da      	lsls	r2, r3, #27
 800da02:	d407      	bmi.n	800da14 <__swsetup_r+0x30>
 800da04:	2209      	movs	r2, #9
 800da06:	602a      	str	r2, [r5, #0]
 800da08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da0c:	f04f 30ff 	mov.w	r0, #4294967295
 800da10:	81a3      	strh	r3, [r4, #12]
 800da12:	e033      	b.n	800da7c <__swsetup_r+0x98>
 800da14:	0758      	lsls	r0, r3, #29
 800da16:	d512      	bpl.n	800da3e <__swsetup_r+0x5a>
 800da18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da1a:	b141      	cbz	r1, 800da2e <__swsetup_r+0x4a>
 800da1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da20:	4299      	cmp	r1, r3
 800da22:	d002      	beq.n	800da2a <__swsetup_r+0x46>
 800da24:	4628      	mov	r0, r5
 800da26:	f7fe ff17 	bl	800c858 <_free_r>
 800da2a:	2300      	movs	r3, #0
 800da2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da34:	81a3      	strh	r3, [r4, #12]
 800da36:	2300      	movs	r3, #0
 800da38:	6063      	str	r3, [r4, #4]
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	f043 0308 	orr.w	r3, r3, #8
 800da44:	81a3      	strh	r3, [r4, #12]
 800da46:	6923      	ldr	r3, [r4, #16]
 800da48:	b94b      	cbnz	r3, 800da5e <__swsetup_r+0x7a>
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da54:	d003      	beq.n	800da5e <__swsetup_r+0x7a>
 800da56:	4621      	mov	r1, r4
 800da58:	4628      	mov	r0, r5
 800da5a:	f000 f882 	bl	800db62 <__smakebuf_r>
 800da5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da62:	f013 0201 	ands.w	r2, r3, #1
 800da66:	d00a      	beq.n	800da7e <__swsetup_r+0x9a>
 800da68:	2200      	movs	r2, #0
 800da6a:	60a2      	str	r2, [r4, #8]
 800da6c:	6962      	ldr	r2, [r4, #20]
 800da6e:	4252      	negs	r2, r2
 800da70:	61a2      	str	r2, [r4, #24]
 800da72:	6922      	ldr	r2, [r4, #16]
 800da74:	b942      	cbnz	r2, 800da88 <__swsetup_r+0xa4>
 800da76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da7a:	d1c5      	bne.n	800da08 <__swsetup_r+0x24>
 800da7c:	bd38      	pop	{r3, r4, r5, pc}
 800da7e:	0799      	lsls	r1, r3, #30
 800da80:	bf58      	it	pl
 800da82:	6962      	ldrpl	r2, [r4, #20]
 800da84:	60a2      	str	r2, [r4, #8]
 800da86:	e7f4      	b.n	800da72 <__swsetup_r+0x8e>
 800da88:	2000      	movs	r0, #0
 800da8a:	e7f7      	b.n	800da7c <__swsetup_r+0x98>
 800da8c:	20000078 	.word	0x20000078

0800da90 <_raise_r>:
 800da90:	291f      	cmp	r1, #31
 800da92:	b538      	push	{r3, r4, r5, lr}
 800da94:	4605      	mov	r5, r0
 800da96:	460c      	mov	r4, r1
 800da98:	d904      	bls.n	800daa4 <_raise_r+0x14>
 800da9a:	2316      	movs	r3, #22
 800da9c:	6003      	str	r3, [r0, #0]
 800da9e:	f04f 30ff 	mov.w	r0, #4294967295
 800daa2:	bd38      	pop	{r3, r4, r5, pc}
 800daa4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800daa6:	b112      	cbz	r2, 800daae <_raise_r+0x1e>
 800daa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daac:	b94b      	cbnz	r3, 800dac2 <_raise_r+0x32>
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 f830 	bl	800db14 <_getpid_r>
 800dab4:	4622      	mov	r2, r4
 800dab6:	4601      	mov	r1, r0
 800dab8:	4628      	mov	r0, r5
 800daba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dabe:	f000 b817 	b.w	800daf0 <_kill_r>
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d00a      	beq.n	800dadc <_raise_r+0x4c>
 800dac6:	1c59      	adds	r1, r3, #1
 800dac8:	d103      	bne.n	800dad2 <_raise_r+0x42>
 800daca:	2316      	movs	r3, #22
 800dacc:	6003      	str	r3, [r0, #0]
 800dace:	2001      	movs	r0, #1
 800dad0:	e7e7      	b.n	800daa2 <_raise_r+0x12>
 800dad2:	2100      	movs	r1, #0
 800dad4:	4620      	mov	r0, r4
 800dad6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dada:	4798      	blx	r3
 800dadc:	2000      	movs	r0, #0
 800dade:	e7e0      	b.n	800daa2 <_raise_r+0x12>

0800dae0 <raise>:
 800dae0:	4b02      	ldr	r3, [pc, #8]	@ (800daec <raise+0xc>)
 800dae2:	4601      	mov	r1, r0
 800dae4:	6818      	ldr	r0, [r3, #0]
 800dae6:	f7ff bfd3 	b.w	800da90 <_raise_r>
 800daea:	bf00      	nop
 800daec:	20000078 	.word	0x20000078

0800daf0 <_kill_r>:
 800daf0:	b538      	push	{r3, r4, r5, lr}
 800daf2:	2300      	movs	r3, #0
 800daf4:	4d06      	ldr	r5, [pc, #24]	@ (800db10 <_kill_r+0x20>)
 800daf6:	4604      	mov	r4, r0
 800daf8:	4608      	mov	r0, r1
 800dafa:	4611      	mov	r1, r2
 800dafc:	602b      	str	r3, [r5, #0]
 800dafe:	f7f6 ff78 	bl	80049f2 <_kill>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d102      	bne.n	800db0c <_kill_r+0x1c>
 800db06:	682b      	ldr	r3, [r5, #0]
 800db08:	b103      	cbz	r3, 800db0c <_kill_r+0x1c>
 800db0a:	6023      	str	r3, [r4, #0]
 800db0c:	bd38      	pop	{r3, r4, r5, pc}
 800db0e:	bf00      	nop
 800db10:	20005d80 	.word	0x20005d80

0800db14 <_getpid_r>:
 800db14:	f7f6 bf66 	b.w	80049e4 <_getpid>

0800db18 <__swhatbuf_r>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	460c      	mov	r4, r1
 800db1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db20:	4615      	mov	r5, r2
 800db22:	2900      	cmp	r1, #0
 800db24:	461e      	mov	r6, r3
 800db26:	b096      	sub	sp, #88	@ 0x58
 800db28:	da0c      	bge.n	800db44 <__swhatbuf_r+0x2c>
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	2100      	movs	r1, #0
 800db2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db32:	bf14      	ite	ne
 800db34:	2340      	movne	r3, #64	@ 0x40
 800db36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db3a:	2000      	movs	r0, #0
 800db3c:	6031      	str	r1, [r6, #0]
 800db3e:	602b      	str	r3, [r5, #0]
 800db40:	b016      	add	sp, #88	@ 0x58
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	466a      	mov	r2, sp
 800db46:	f000 f849 	bl	800dbdc <_fstat_r>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	dbed      	blt.n	800db2a <__swhatbuf_r+0x12>
 800db4e:	9901      	ldr	r1, [sp, #4]
 800db50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db58:	4259      	negs	r1, r3
 800db5a:	4159      	adcs	r1, r3
 800db5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db60:	e7eb      	b.n	800db3a <__swhatbuf_r+0x22>

0800db62 <__smakebuf_r>:
 800db62:	898b      	ldrh	r3, [r1, #12]
 800db64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db66:	079d      	lsls	r5, r3, #30
 800db68:	4606      	mov	r6, r0
 800db6a:	460c      	mov	r4, r1
 800db6c:	d507      	bpl.n	800db7e <__smakebuf_r+0x1c>
 800db6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db72:	6023      	str	r3, [r4, #0]
 800db74:	6123      	str	r3, [r4, #16]
 800db76:	2301      	movs	r3, #1
 800db78:	6163      	str	r3, [r4, #20]
 800db7a:	b003      	add	sp, #12
 800db7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db7e:	466a      	mov	r2, sp
 800db80:	ab01      	add	r3, sp, #4
 800db82:	f7ff ffc9 	bl	800db18 <__swhatbuf_r>
 800db86:	9f00      	ldr	r7, [sp, #0]
 800db88:	4605      	mov	r5, r0
 800db8a:	4639      	mov	r1, r7
 800db8c:	4630      	mov	r0, r6
 800db8e:	f7fe fed5 	bl	800c93c <_malloc_r>
 800db92:	b948      	cbnz	r0, 800dba8 <__smakebuf_r+0x46>
 800db94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db98:	059a      	lsls	r2, r3, #22
 800db9a:	d4ee      	bmi.n	800db7a <__smakebuf_r+0x18>
 800db9c:	f023 0303 	bic.w	r3, r3, #3
 800dba0:	f043 0302 	orr.w	r3, r3, #2
 800dba4:	81a3      	strh	r3, [r4, #12]
 800dba6:	e7e2      	b.n	800db6e <__smakebuf_r+0xc>
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dbae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb2:	81a3      	strh	r3, [r4, #12]
 800dbb4:	9b01      	ldr	r3, [sp, #4]
 800dbb6:	6020      	str	r0, [r4, #0]
 800dbb8:	b15b      	cbz	r3, 800dbd2 <__smakebuf_r+0x70>
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbc0:	f000 f81e 	bl	800dc00 <_isatty_r>
 800dbc4:	b128      	cbz	r0, 800dbd2 <__smakebuf_r+0x70>
 800dbc6:	89a3      	ldrh	r3, [r4, #12]
 800dbc8:	f023 0303 	bic.w	r3, r3, #3
 800dbcc:	f043 0301 	orr.w	r3, r3, #1
 800dbd0:	81a3      	strh	r3, [r4, #12]
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	431d      	orrs	r5, r3
 800dbd6:	81a5      	strh	r5, [r4, #12]
 800dbd8:	e7cf      	b.n	800db7a <__smakebuf_r+0x18>
	...

0800dbdc <_fstat_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	2300      	movs	r3, #0
 800dbe0:	4d06      	ldr	r5, [pc, #24]	@ (800dbfc <_fstat_r+0x20>)
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	602b      	str	r3, [r5, #0]
 800dbea:	f7f6 ff61 	bl	8004ab0 <_fstat>
 800dbee:	1c43      	adds	r3, r0, #1
 800dbf0:	d102      	bne.n	800dbf8 <_fstat_r+0x1c>
 800dbf2:	682b      	ldr	r3, [r5, #0]
 800dbf4:	b103      	cbz	r3, 800dbf8 <_fstat_r+0x1c>
 800dbf6:	6023      	str	r3, [r4, #0]
 800dbf8:	bd38      	pop	{r3, r4, r5, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20005d80 	.word	0x20005d80

0800dc00 <_isatty_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	2300      	movs	r3, #0
 800dc04:	4d05      	ldr	r5, [pc, #20]	@ (800dc1c <_isatty_r+0x1c>)
 800dc06:	4604      	mov	r4, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	f7f6 ff5f 	bl	8004ace <_isatty>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d102      	bne.n	800dc1a <_isatty_r+0x1a>
 800dc14:	682b      	ldr	r3, [r5, #0]
 800dc16:	b103      	cbz	r3, 800dc1a <_isatty_r+0x1a>
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	20005d80 	.word	0x20005d80

0800dc20 <_init>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	bf00      	nop
 800dc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc26:	bc08      	pop	{r3}
 800dc28:	469e      	mov	lr, r3
 800dc2a:	4770      	bx	lr

0800dc2c <_fini>:
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	bf00      	nop
 800dc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc32:	bc08      	pop	{r3}
 800dc34:	469e      	mov	lr, r3
 800dc36:	4770      	bx	lr
